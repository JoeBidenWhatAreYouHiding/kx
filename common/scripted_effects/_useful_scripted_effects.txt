#	Various useful scripted effects
#
#	By Rylock and Alpinia

# removes the country in scope from all wars (separately - it won't end the wars)
separate_peace_all_wars = {
	if = {
		limit = { has_war = yes }
		effect_tooltip = {
			every_enemy_country = {
				limit = { NOT = { civilwar_target = PREV } }
				white_peace = PREV
			}
		}
		hidden_effect = {
			# first peace out with faction leaders
			every_enemy_country = {
				limit = {
					is_faction_leader = yes
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}

			# then all non-puppets whose faction leaders aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = yes
					faction_leader = { NOT = { has_war_with = PREV.PREV } }
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}

			# then all non-puppets who aren't in factions
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = no
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}

			# then all puppets whose overlords aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = yes
					overlord = { NOT = { has_war_with = PREV.PREV } }
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}
		}
	}
}
remove_from_all_tech_sharing_groups = {
	if = {
		limit = { is_in_tech_sharing_group = entente_research }
		remove_from_tech_sharing_group = entente_research
	}
	if = {
		limit = { is_in_tech_sharing_group = russian_research }
		remove_from_tech_sharing_group = russian_research
	}
	if = {
		limit = { is_in_tech_sharing_group = german_research }
		remove_from_tech_sharing_group = german_research
	}
	if = {
		limit = { is_in_tech_sharing_group = us_research }
		remove_from_tech_sharing_group = us_research
	}
	if = {
		limit = { is_in_tech_sharing_group = japan_research }
		remove_from_tech_sharing_group = japan_research
	}
	if = {
		limit = { is_in_tech_sharing_group = austrian_research }
		remove_from_tech_sharing_group = austrian_research
	}
	if = {
		limit = { is_in_tech_sharing_group = scandinavian_research }
		remove_from_tech_sharing_group = scandinavian_research
	}
	if = {
		limit = { is_in_tech_sharing_group = belgian_research }
		remove_from_tech_sharing_group = belgian_research
	}
	if = {
		limit = { is_in_tech_sharing_group = argentina_research }
		remove_from_tech_sharing_group = argentina_research
	}
	if = {
		limit = { is_in_tech_sharing_group = balkan_research }
		remove_from_tech_sharing_group = balkan_research
	}
	if = {
		limit = { is_in_tech_sharing_group = maliphinsul_research_group }
		remove_from_tech_sharing_group = maliphinsul_research_group
	}
	if = {
		limit = { is_in_tech_sharing_group = colombia_research }
		remove_from_tech_sharing_group = colombia_research
	}
	if = {
		limit = { is_in_tech_sharing_group = mizhmoria_research }
		remove_from_tech_sharing_group = mizhmoria_research
	}
	if = {
		limit = { is_in_tech_sharing_group = kyiv_conf_research }
		remove_from_tech_sharing_group = kyiv_conf_research
	}
	if = {
		limit = { is_in_tech_sharing_group = commonwealth_research }
		remove_from_tech_sharing_group = commonwealth_research
	}
}
# ends puppet status, removes from faction and all current wars (used for rebellions)
clear_all_relations = {
	if = {
		limit = { is_subject = yes }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}	
	if = {
		limit = { is_faction_leader = yes }
		dismantle_faction = yes
	}
	else_if = {
		limit = { is_in_faction = yes }
		leave_faction = yes
	}
	if = {
		limit = { NOT = { has_variable = keep_wars } }
		separate_peace_all_wars = yes
	}
	if = {
		limit = { num_subjects > 0 }
		every_subject_country = {
			overlord = {
				set_autonomy = {
					target = PREV
					autonomy_state = autonomy_free
				}
			}
		}
	}
	every_other_country = {
		if = {
			limit = { has_guaranteed = ROOT }
			diplomatic_relation = {
				country = ROOT
				relation = guarantee
				active = no
			}
		}
		else_if = {
			limit = { is_guaranteed_by = ROOT }
			ROOT = {
				diplomatic_relation = {
					country = PREV
					relation = guarantee
					active = no
				}
			}
		}
		if = {
			limit = { has_non_aggression_pact_with = ROOT }
			diplomatic_relation = {
				country = ROOT
				relation = non_aggression_pact
				active = no
			}
		}
		if = {
			limit = { has_military_access_to = ROOT }
			ROOT = {
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = no
				}
			}
		}
		if = {
			limit = { gives_military_access_to = ROOT }
			diplomatic_relation = {
				country = ROOT
				relation = military_access
				active = no
			}
		}
		diplomatic_relation = {
			country = PREV
			relation = market_access_rights
			active = no
		}		
		clear_embargo_PREV = yes
	}
	if = {
		limit = { var:target = { is_ally_with = ENT } }
		CAN_remove_from_iedc = yes
	}	
	else_if = {
		limit = { var:target = { is_ally_with = GER } }
		GER_remove_from_mitteleuropa = yes
		MIE_remove_from_intermarium = yes
	}
	remove_from_all_tech_sharing_groups = yes
}

# ends puppet status, removes from faction and clears all relations except wars (used for rebellions)
clear_all_relations_except_wars = {
	set_temp_variable = { keep_wars = 1 }
	clear_all_relations = yes
}

# clears all relations with a specific country and its allies, does not end wars
# requires temp variable target = TAG
clear_all_relations_with_TARGET = {
	if = {
		limit = { var:target = { is_ally_with = ENT } }
		CAN_remove_from_iedc = yes
		if = {
			limit = { is_in_tech_sharing_group = entente_research }
			remove_from_tech_sharing_group = entente_research
		}
	}
	else_if = {
		limit = { var:target = { is_ally_with = GER } }
		GER_remove_from_mitteleuropa = yes
		MIE_remove_from_intermarium = yes
		if = {
			limit = { is_in_tech_sharing_group = german_research }
			remove_from_tech_sharing_group = german_research
		}
	}
	else_if = {
		limit = { var:target = { is_ally_with = INT } }
		if = {
			limit = { is_in_tech_sharing_group = phalanstere_research }
			remove_from_tech_sharing_group = phalanstere_research
		}
	}
	else_if = {
		limit = { var:target = { is_ally_with = AUS } }
		if = {
			limit = { is_in_tech_sharing_group = austrian_research }
			remove_from_tech_sharing_group = austrian_research
		}
	}
	if = {
		limit = { has_subject = var:target }
		set_autonomy = {
			target = var:target
			autonomy_state = autonomy_free
		}
		var:target = { leave_faction = yes }
	}
	else_if = {
		limit = { is_subject_of = var:target }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
		leave_faction = yes
	}
	else_if = {
		limit = { is_in_faction_with = var:target }
		leave_faction = yes
	}
	
	effect_tooltip = {
		every_other_country = {
			limit = {
				is_ally_with = var:target
				has_guaranteed = PREV
			}
			diplomatic_relation = {
				country = PREV
				relation = guarantee
				active = no
			}
		}
		every_other_country = {
			limit = {
				is_ally_with = var:target
				has_non_aggression_pact_with = PREV
			}
			diplomatic_relation = {
				country = PREV
				relation = non_aggression_pact
				active = no
			}
		}
		every_other_country = {
			limit = {
				is_ally_with = var:target
				has_military_access_to = PREV
			}
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
		every_other_country = {
			limit = {
				is_ally_with = var:target
				is_guaranteed_by = PREV
			}
			PREV = {
				diplomatic_relation = {
					country = PREV
					relation = guarantee
					active = no
				}
			}
		}
		every_other_country = {
			limit = {
				is_ally_with = var:target
				gives_military_access_to = PREV
			}
			PREV = {
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = no
				}
			}
		}
		every_other_country = {
			limit = {
				is_ally_with = var:target
				gives_military_access_to = PREV
			}
			PREV = {
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = no
				}
			}
		}
		if = {
			limit = { has_dlc_bba = yes }
			every_other_country = {
				limit = {
					is_ally_with = var:target
					is_embargoing = PREV
				}
				diplomatic_relation = {
					country = ROOT
					relation = embargo
					active = no
				}
			}
			every_other_country = {
				limit = {
					is_ally_with = var:target
					is_embargoed_by = PREV
				}
				PREV = {
					diplomatic_relation = {
						country = PREV
						relation = embargo
						active = no
					}
				}
			}
		}
		else = {
			every_other_country = {
				limit = {
					is_ally_with = var:target
					has_country_flag = embargoed_@PREV
				}
				remove_opinion_modifier = {
					modifier = embargo
					target = PREV
				}
			}
			every_other_country = {
				limit = {
					is_ally_with = var:target
					PREV = { has_country_flag = embargoed_@PREV }
				}
				PREV = {
					remove_opinion_modifier = {
						modifier = embargo
						target = PREV
					}
				}
			}
		}
	}
	hidden_effect = {
		every_other_country = {
			limit = { is_ally_with = var:target }
			diplomatic_relation = {
				country = PREV
				relation = guarantee
				active = no
			}
			diplomatic_relation = {
				country = PREV
				relation = non_aggression_pact
				active = no
			}
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
			diplomatic_relation = {
				country = PREV
				relation = market_access_rights
				active = no
			}
			PREV = {
				diplomatic_relation = {
					country = PREV
					relation = guarantee
					active = no
				}
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = no
				}
			}
			clear_embargo_PREV = yes
		}
	}
}
# clears all relations with PREV (won't remove from faction if not a faction leader, nor stop wars if not a valid target)
clear_relations_with_PREV = {
	if = {
		limit = { has_subject = PREV }
		set_autonomy = {
			target = PREV
			autonomy_state = autonomy_free
		}
	}
	else_if = {
		limit = { is_subject_of = PREV }
		PREV = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = {
			is_in_faction_with = PREV
			OR = {
				is_faction_leader = yes
				PREV = { is_faction_leader = yes }
			}
		}
		leave_faction = yes
	}
	if = {
		limit = {
			has_war_with = PREV
			is_valid_peace_target = yes
			PREV = { is_valid_peace_target = yes }
		}
		PREV = { save_event_target_as = white_peace_receiver }
		white_peace_with_TARGET = yes
	}
	if = {
		limit = { has_guaranteed = PREV }
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	else_if = {
		limit = { is_guaranteed_by = PREV }
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = guarantee
				active = no
			}
		}
	}
	if = {
		limit = { has_non_aggression_pact_with = PREV }
		diplomatic_relation = {
			country = PREV
			relation = non_aggression_pact
			active = no
		}
	}
	if = {
		limit = { has_military_access_to = PREV }
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
	if = {
		limit = { gives_military_access_to = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
}
# clears all relations with FROM (won't remove from faction if not a faction leader, nor stop wars if not a valid target)
clear_relations_with_FROM = {
	if = {
		limit = { has_subject = FROM }
		set_autonomy = {
			target = FROM
			autonomy_state = autonomy_free
		}
	}
	else_if = {
		limit = { is_subject_of = FROM }
		FROM = {
			set_autonomy = {
				target = FROM
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = {
			is_in_faction_with = FROM
			OR = {
				is_faction_leader = yes
				FROM = { is_faction_leader = yes }
			}
		}
		leave_faction = yes
	}
	if = {
		limit = {
			has_war_with = FROM
			is_valid_peace_target = yes
			FROM = { is_valid_peace_target = yes }
		}
		FROM = { save_event_target_as = white_peace_receiver }
		white_peace_with_TARGET = yes
	}
	if = {
		limit = { has_guaranteed = FROM }
		diplomatic_relation = {
			country = FROM
			relation = guarantee
			active = no
		}
	}
	else_if = {
		limit = { is_guaranteed_by = FROM }
		FROM = {
			diplomatic_relation = {
				country = FROM
				relation = guarantee
				active = no
			}
		}
	}
	if = {
		limit = { has_non_aggression_pact_with = FROM }
		diplomatic_relation = {
			country = FROM
			relation = non_aggression_pact
			active = no
		}
	}
	if = {
		limit = { has_military_access_to = FROM }
		FROM = {
			diplomatic_relation = {
				country = FROM
				relation = military_access
				active = no
			}
		}
	}
	if = {
		limit = { gives_military_access_to = FROM }
		diplomatic_relation = {
			country = FROM
			relation = military_access
			active = no
		}
	}
}

# forces a country to surrender (mechanically by lowering their surrender limit to 0%)
force_capitulate = {
	hidden_effect = {
		add_timed_idea = {
			idea = ready_to_surrender
			days = 14
		}
	}
}

# removes all current ministers for the country in scope (including lobe, lama, kcap, boss, naaf) - no tooltips displayed
remove_all_minister_types = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
		remove_ideas_with_trait = leader_of_the_british_exiles
		remove_ideas_with_trait = land_marshal_of_liv_ord
		remove_ideas_with_trait = knight_captain_of_liv_ord
		remove_ideas_with_trait = underworld_boss
		remove_ideas_with_trait = minister_of_native_affairs
		remove_ideas_with_trait = marshal_of_the_palace
		remove_ideas_with_trait = national_philosopher
		remove_ideas_with_trait = vice_president
		remove_ideas_with_trait = taoiseach
		remove_ideas_with_trait = faction_minister
	}
}

# removes all current ministers for the country in scope (including lobe) - no tooltips displayed
remove_all_ministers_and_lobe = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
		remove_ideas_with_trait = vice_president
		remove_ideas_with_trait = taoiseach
		remove_ideas_with_trait = leader_of_the_british_exiles
	}
}

# removes all current ministers for the country in scope - no tooltips displayed
remove_all_ministers = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
		remove_ideas_with_trait = vice_president
		remove_ideas_with_trait = taoiseach
	}
}

# removes all current ministers (other than HoG) for the country in scope - no tooltips displayed
remove_all_ministers_but_hog = {
	hidden_effect = {
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
	}
}

# changes the government of the country in scope to that of ROOT (the country running the event)
copy_government_of_ROOT = {
	set_politics = { ruling_party = var:ROOT.current_party_ideology_group }
	hidden_effect = {
		set_popularities = {
			totalist = ROOT.party_popularity_100@totalist
			syndicalist = ROOT.party_popularity_100@syndicalist
			radical_socialist = ROOT.party_popularity_100@radical_socialist
			social_democrat = ROOT.party_popularity_100@social_democrat
			social_liberal = ROOT.party_popularity_100@social_liberal
			market_liberal = ROOT.party_popularity_100@market_liberal
			social_conservative = ROOT.party_popularity_100@social_conservative
			authoritarian_democrat = ROOT.party_popularity_100@authoritarian_democrat
			paternal_autocrat = ROOT.party_popularity_100@paternal_autocrat
			national_populist = ROOT.party_popularity_100@national_populist
		}
	}
}

# changes the government of the country in scope to that of PREV
copy_government_of_PREV = {
	set_politics = { ruling_party = var:PREV.current_party_ideology_group }
	hidden_effect = {
		set_popularities = {
			totalist = PREV.party_popularity_100@totalist
			syndicalist = PREV.party_popularity_100@syndicalist
			radical_socialist = PREV.party_popularity_100@radical_socialist
			social_democrat = PREV.party_popularity_100@social_democrat
			social_liberal = PREV.party_popularity_100@social_liberal
			market_liberal = PREV.party_popularity_100@market_liberal
			social_conservative = PREV.party_popularity_100@social_conservative
			authoritarian_democrat = PREV.party_popularity_100@authoritarian_democrat
			paternal_autocrat = PREV.party_popularity_100@paternal_autocrat
			national_populist = PREV.party_popularity_100@national_populist
		}
	}
}

# changes the popularites of the country in scope to that of ROOT (the country running the event)
copy_popularities_of_ROOT = {
	hidden_effect = {
		set_popularities = {
			totalist = ROOT.party_popularity_100@totalist
			syndicalist = ROOT.party_popularity_100@syndicalist
			radical_socialist = ROOT.party_popularity_100@radical_socialist
			social_democrat = ROOT.party_popularity_100@social_democrat
			social_liberal = ROOT.party_popularity_100@social_liberal
			market_liberal = ROOT.party_popularity_100@market_liberal
			social_conservative = ROOT.party_popularity_100@social_conservative
			authoritarian_democrat = ROOT.party_popularity_100@authoritarian_democrat
			paternal_autocrat = ROOT.party_popularity_100@paternal_autocrat
			national_populist = ROOT.party_popularity_100@national_populist
		}
	}
}

# changes the popularites of the country in scope to that of PREV (the country running the event)
copy_popularities_of_PREV = {
	hidden_effect = {
		set_popularities = {
			totalist = PREV.party_popularity_100@totalist
			syndicalist = PREV.party_popularity_100@syndicalist
			radical_socialist = PREV.party_popularity_100@radical_socialist
			social_democrat = PREV.party_popularity_100@social_democrat
			social_liberal = PREV.party_popularity_100@social_liberal
			market_liberal = PREV.party_popularity_100@market_liberal
			social_conservative = PREV.party_popularity_100@social_conservative
			authoritarian_democrat = PREV.party_popularity_100@authoritarian_democrat
			paternal_autocrat = PREV.party_popularity_100@paternal_autocrat
			national_populist = PREV.party_popularity_100@national_populist
		}
	}
}

# changes the laws of the country in scope to that of PREV (the country running the event)
copy_laws_of_PREV = {
	hidden_effect = {
		### Economy ###
		if = {
			limit = { PREV = { has_idea = undisturbed_isolation } }
			add_ideas = undisturbed_isolation
		}
		else_if = {
			limit = { PREV = { has_idea = isolation } }
			add_ideas = isolation
		}
		else_if = {
			limit = { PREV = { has_idea = civilian_economy } }
			add_ideas = civilian_economy
		}
		else_if = {
			limit = { PREV = { has_idea = low_economic_mobilisation } }
			add_ideas = low_economic_mobilisation
		}
		else_if = {
			limit = { PREV = { has_idea = partial_economic_mobilisation } }
			add_ideas = partial_economic_mobilisation
		}
		else_if = {
			limit = { PREV = { has_idea = war_economy } }
			add_ideas = war_economy
		}
		else_if = {
			limit = { PREV = { has_idea = tot_economic_mobilisation } }
			add_ideas = tot_economic_mobilisation
		}

		### Trade ###
		if = {
			limit = { PREV = { has_idea = command_economy } }
			add_ideas = command_economy
		}
		else_if = {
			limit = { PREV = { has_idea = uncontrolled_exports } }
			add_ideas = uncontrolled_exports
		}
		else_if = {
			limit = { PREV = { has_idea = free_trade } }
			add_ideas = free_trade
		}
		else_if = {
			limit = { PREV = { has_idea = export_focus } }
			add_ideas = export_focus
		}
		else_if = {
			limit = { PREV = { has_idea = limited_exports } }
			add_ideas = limited_exports
		}
		else_if = {
			limit = { PREV = { has_idea = closed_economy } }
			add_ideas = closed_economy
		}

		### Mobilisation ###
		if = {
			limit = { PREV = { has_idea = disarmed_nation } }
			add_ideas = disarmed_nation
		}
		else_if = {
			limit = { PREV = { has_idea = volunteer_only } }
			add_ideas = volunteer_only
		}
		else_if = {
			limit = { PREV = { has_idea = limited_conscription } }
			add_ideas = limited_conscription
		}
		else_if = {
			limit = { PREV = { has_idea = extensive_conscription } }
			add_ideas = extensive_conscription
		}
		else_if = {
			limit = { PREV = { has_idea = service_by_requirement } }
			add_ideas = service_by_requirement
		}
		else_if = {
			limit = { PREV = { has_idea = all_adults_serve } }
			add_ideas = all_adults_serve
		}
		else_if = {
			limit = { PREV = { has_idea = scraping_the_barrel } }
			add_ideas = scraping_the_barrel
		}
	}
}
# the following effects are excellent for preserving a puppet's government so it doesn't change to the overlord
# use the first command in the scope of the about-to-be-puppeted country right before the puppet command is executed
# and then the second, also in the scope of the puppet, right after
get_current_government_type = {
	clear_variable = original_government_type
	set_variable = { original_government_type = current_party_ideology_group }

	if = {
		limit = { has_elections = yes }
		set_country_flag = original_government_type_had_elections
	}

	clear_array = original_popularities
	add_to_array = { original_popularities = party_popularity_100@totalist }
	add_to_array = { original_popularities = party_popularity_100@syndicalist }
	add_to_array = { original_popularities = party_popularity_100@radical_socialist }
	add_to_array = { original_popularities = party_popularity_100@social_democrat }
	add_to_array = { original_popularities = party_popularity_100@social_liberal }
	add_to_array = { original_popularities = party_popularity_100@market_liberal }
	add_to_array = { original_popularities = party_popularity_100@social_conservative }
	add_to_array = { original_popularities = party_popularity_100@authoritarian_democrat }
	add_to_array = { original_popularities = party_popularity_100@paternal_autocrat }

	set_temp_variable = { sum = 100 }
	for_each_loop = {
		array = original_popularities
		subtract_from_temp_variable = { sum = v }
	}
	add_to_array = { original_popularities = sum } #last value (natpop), calculated directly to avoid rounding errors

	if = {
		limit = { has_coalition = yes }
		for_each_loop = {
			array = coalition_partners
			add_to_array = { original_coalitions = v }
		}
	}
}

restore_previous_government_type = {
	hidden_effect = {
		if = {
			limit = { has_variable = original_government_type } #needed to avoid a CTD
			if = {
				limit = { has_country_flag = original_government_type_had_elections }
				clr_country_flag = original_government_type_had_elections
				set_politics = {
					ruling_party = var:original_government_type
					elections_allowed = yes
				}
			}
			else = {
				set_politics = {
					ruling_party = var:original_government_type
					elections_allowed = no
				}
			}
		}
		clear_variable = original_government_type

		if = {
			limit = { check_variable = { original_popularities^num > 0 } }
			set_popularities = {
				totalist = original_popularities^0
				syndicalist = original_popularities^1
				radical_socialist = original_popularities^2
				social_democrat = original_popularities^3
				social_liberal = original_popularities^4
				market_liberal = original_popularities^5
				social_conservative = original_popularities^6
				authoritarian_democrat = original_popularities^7
				paternal_autocrat = original_popularities^8
				national_populist = original_popularities^9
			}
			clear_array = original_popularities
		}

		if = {
			limit = { check_variable = { original_coalitions^num > 0 } }
			for_each_loop = {
				array = original_coalitions
				set_temp_variable = { coalition_partner_var = v }
				add_to_coalition = yes
			}
			clear_array = original_coalitions
		}
	}
}

# this is used in scripted peace events to ensure that all states
# currently controlled by countries not at war with the state's owner
# have control restored to the owner - this is needed to avoid a peace conference bug
# which would draw the owner into a peace conference and be annexed
restore_control_of_all_non_enemy_states = {
	every_state = {
		limit = {
			NOT = {
				is_controlled_by = owner
				controller = { has_war_with = var:PREV.owner }
			}
		}
		if = {
			limit = {
				controller = { is_in_faction = yes }
			}
			every_country = {
				limit = { is_ally_with = PREV.controller }
				give_military_access = var:v
			}
			set_state_controller_to = owner
		}
		else = {
			if = {
				limit = {
					controller = { is_subject = yes }
				}
				owner = { give_military_access = var:PREV.controller:overlord }
			}
			owner = {
				give_military_access = PREV.controller
				set_state_controller = PREV
			}
		}
	}

	# additional check for any states which are only partially controlled and have non-enemy units in them
	# this will grant military access to the non-enemy and any of its allies
	every_country = {
		limit = {
			OR = {
				is_government_in_exile = yes
				has_capitulated = yes
			}
			any_owned_state = {
				controller = {
					has_war_with = PREV.PREV
					NOT = { has_full_control_of_state = PREV }
				}
			}
		}
		save_event_target_as = original_owner
		every_owned_state = {
			limit = {
				controller = {
					has_war_with = event_target:original_owner
					NOT = { has_full_control_of_state = PREV }
				}
			}
			controller = {
				every_enemy_country = {
					limit = {
						divisions_in_state = { state = PREV.PREV size > 0 }
						NOT = {
							is_ally_with = event_target:original_owner
							has_military_access_to = event_target:original_owner
							has_war_with = event_target:original_owner
						}
					}
					event_target:original_owner = { give_military_access = PREV }
					every_other_country = {
						limit = {
							is_ally_with = PREV
							NOT = {
								is_ally_with = event_target:original_owner
								has_military_access_to = event_target:original_owner
								has_war_with = event_target:original_owner
							}
						}
						event_target:original_owner = { give_military_access = PREV }
					}
				}
			}
		}
	}
}

embargo_ROOT = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@ROOT }
		}
		set_country_flag = embargoed_@ROOT
		ROOT = { set_country_flag = embargoed_@PREV }
		if = {
			limit = { has_dlc_bba = yes }
			if = {
				limit = { NOT = { is_embargoing = ROOT } }
				send_embargo = ROOT
			}
			if = {
				limit = { NOT = { is_embargoed_by = ROOT } }
				ROOT = { send_embargo = PREV }
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargo
				target = ROOT
			}
			reverse_add_opinion_modifier = {
				modifier = embargo
				target = ROOT
			}
		}
	}
}

clear_embargo_ROOT = {
	if = {
		limit = { has_country_flag = embargoed_@ROOT }
		clr_country_flag = embargoed_@ROOT
		if = {
			limit = { is_embargoing = ROOT }
			diplomatic_relation = {
				country = ROOT
				relation = embargo
				active = no
			}
		}
		remove_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
		ROOT = {
			clr_country_flag = embargoed_@PREV
			if = {
				limit = { is_embargoing = PREV }
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
			}
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

embargo_PREV = {
	if = {
		limit = { NOT = { has_country_flag = embargoed_@PREV } }
		set_country_flag = embargoed_@PREV
		PREV = { set_country_flag = embargoed_@PREV }
		if = {
			limit = { has_dlc_bba = yes }
			if = {
				limit = { NOT = { is_embargoing = PREV } }
				diplomatic_relation = {
					country = PREV
					relation = embargo
				}
			}
			if = {
				limit = { NOT = { is_embargoed_by = PREV } }
				PREV = {
					diplomatic_relation = {
						country = PREV
						relation = embargo
					}
				}
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
			reverse_add_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

clear_embargo_PREV = {
	if = {
		limit = { has_country_flag = embargoed_@PREV }
		clr_country_flag = embargoed_@PREV
		if = {
			limit = { is_embargoing = PREV }
			diplomatic_relation = {
				country = PREV
				relation = embargo
				active = no
			}
		}
		remove_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
		PREV = {
			clr_country_flag = embargoed_@PREV
			if = {
				limit = { is_embargoing = PREV }
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
			}
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

embargo_FROM = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@FROM }
		}
		set_country_flag = embargoed_@FROM
		FROM = { set_country_flag = embargoed_@PREV }
		if = {
			limit = { has_dlc_bba = yes }
			if = {
				limit = { NOT = { is_embargoing = FROM } }
				diplomatic_relation = {
					country = FROM
					relation = embargo
				}
			}
			if = {
				limit = { NOT = { is_embargoed_by = FROM } }
				FROM = {
					diplomatic_relation = {
						country = PREV
						relation = embargo
					}
				}
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargo
				target = FROM
			}
			reverse_add_opinion_modifier = {
				modifier = embargo
				target = FROM
			}
		}
	}
}

clear_embargo_FROM = {
	if = {
		limit = { has_country_flag = embargoed_@FROM }
		clr_country_flag = embargoed_@FROM
		if = {
			limit = { is_embargoing = FROM }
			diplomatic_relation = {
				country = FROM
				relation = embargo
				active = no
			}
		}
		remove_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
		FROM = {
			clr_country_flag = embargoed_@PREV
			if = {
				limit = { is_embargoing = PREV }
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
			}
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

remove_all_AI_templates = {
	hidden_effect = {
		if = {
			limit = { has_template = "Cavalry Division" }
			delete_unit_template_and_units = { division_template = "Cavalry Division" }
		}
		if = {
			limit = { has_template = "Police Division" }
			delete_unit_template_and_units = { division_template = "Police Division" }
		}
		if = {
			limit = { has_template = "Anti-Tank Division" }
			delete_unit_template_and_units = { division_template = "Anti-Tank Division" }
		}
		if = {
			limit = { has_template = "Marine Division" }
			delete_unit_template_and_units = { division_template = "Marine Division" }
		}
		if = {
			limit = { has_template = "Mechanized Division" }
			delete_unit_template_and_units = { division_template = "Mechanized Division" }
		}
		if = {
			limit = { has_template = "Heavy Armoured Division" }
			delete_unit_template_and_units = { division_template = "Heavy Armoured Division" }
		}
		if = {
			limit = { has_template = "Medium Armoured Division" }
			delete_unit_template_and_units = { division_template = "Medium Armoured Division" }
		}
		if = {
			limit = { has_template = "Modern Armoured Division" }
			delete_unit_template_and_units = { division_template = "Modern Armoured Division" }
		}
		if = {
			limit = { has_template = "Motorized Division" }
			delete_unit_template_and_units = { division_template = "Motorized Division" }
		}
		if = {
			limit = { has_template = "Mountaineer Division" }
			delete_unit_template_and_units = { division_template = "Mountaineer Division" }
		}
		if = {
			limit = { has_template = "Paratroopers" }
			delete_unit_template_and_units = { division_template = "Paratroopers" }
		}
		if = {
			limit = { has_template = "Armoured Division" }
			delete_unit_template_and_units = { division_template = "Armoured Division" }
		}
	}
}

destroy_all_ships = {
	destroy_ships = {
		type = ship_hull_light
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_panzerschiff
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_coastal_defense_ship
		count = all
	}
	destroy_ships = {
		type = ship_hull_pre_dreadnought
		count = all
	}
	destroy_ships = {
		type = ship_hull_heavy
		count = all
	}
	destroy_ships = {
		type = ship_hull_super_heavy_1
		count = all
	}
	destroy_ships = {
		type = ship_hull_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_bb
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_ca
		count = all
	}
}

# use in a state scope
# has no effect for gigalopoli, enclaves, islands or wastelands
increase_state_category_by_one_level = {
	if = {
		limit = { has_state_category = one }
		set_state_category = two
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = ten
	}
	else_if = {
		limit = { has_state_category = ten }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = twelve
	}
	else_if = {
		limit = { has_state_category = twelve }
		add_extra_state_shared_building_slots = 1
	}
}
increase_state_category_by_two_levels = {
	if = {
		limit = { has_state_category = one }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = ten
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = ten }
		set_state_category = twelve
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = twelve
		add_extra_state_shared_building_slots = 1
	}
	else_if = {
		limit = { has_state_category = twelve }
		add_extra_state_shared_building_slots = 2
	}
}

decrease_state_category_by_one_level = {
	if = {
		limit = { has_state_category = twelve }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = ten
	}
	else_if = {
		limit = { has_state_category = ten }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = two
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = one
	}
}

### adds research slots until five, then gives a temporary research speed bonus
add_research_slot_until_five = {
	if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 365
		}
	}
	else_if = {
		limit = { amount_research_slots > 4 }
		add_timed_idea = {
			idea = generic_research_advances
			days = 365
		}
	}
	else = {
		add_research_slot = 1
	}
}

### adds research slots until six, then gives a temporary research speed bonus
add_research_slot_until_six = {
	if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 365
		}
	}
	else_if = {
		limit = { amount_research_slots > 5 }
		add_timed_idea = {
			idea = generic_research_advances
			days = 365
		}
	}
	else = {
		add_research_slot = 1
	}
}
# used for restoring factories lost when states are transferred to a new owners
# example of use:
#	every_owned_state = {
#		limit = { is_core_of = TAG }
#		save_current_factory_count = yes
#transfer_state_to =  		TAG
#		restore_previous_factory_count = yes
# 	}

save_current_factory_count = {
	if = {
		limit = { industrial_complex > 0 }
		set_variable = { previous_industrial_complex_count = building_level@industrial_complex }
	}
	if = {
		limit = { arms_factory > 0 }
		set_variable = { previous_arms_factory_count = building_level@arms_factory }
	}
	if = {
		limit = { dockyard > 0 }
		set_variable = { previous_dockyard_count = building_level@dockyard }
	}
	if = {
		limit = { synthetic_refinery > 0 }
		set_variable = { previous_synthetic_refinery_count = building_level@synthetic_refinery }
	}
	if = {
		limit = { fuel_silo > 0 }
		set_variable = { previous_fuel_silo_count = building_level@fuel_silo }
	}
	if = {
		limit = { rocket_site > 0 }
		set_variable = { previous_rocket_site_count = building_level@rocket_site }
	}
	if = {
		limit = { nuclear_reactor > 0 }
		set_variable = { previous_nuclear_reactor_count = building_level@nuclear_reactor }
	}
}

restore_previous_factory_count = {
	if = {
		limit = { has_variable = previous_industrial_complex_count }
		subtract_from_variable = { previous_industrial_complex_count = building_level@industrial_complex }
		if = {
			limit = { check_variable = { previous_industrial_complex_count > 0 } }
			add_building_construction = { type = industrial_complex level = previous_industrial_complex_count instant_build = yes }
		}
		clear_variable = previous_industrial_complex_count
	}
	if = {
		limit = { has_variable = previous_arms_factory_count }
		subtract_from_variable = { previous_arms_factory_count = building_level@arms_factory }
		if = {
			limit = { check_variable = { previous_arms_factory_count > 0 } }
			add_building_construction = { type = arms_factory level = previous_arms_factory_count instant_build = yes }
		}
		clear_variable = previous_arms_factory_count
	}
	if = {
		limit = { has_variable = previous_dockyard_count }
		subtract_from_variable = { previous_dockyard_count = building_level@dockyard }
		if = {
			limit = { check_variable = { previous_dockyard_count > 0 } }
			add_building_construction = { type = dockyard level = previous_dockyard_count instant_build = yes }
		}
		clear_variable = previous_dockyard_count
	}
	if = {
		limit = { has_variable = previous_synthetic_refinery_count }
		subtract_from_variable = { previous_synthetic_refinery_count = building_level@synthetic_refinery }
		if = {
			limit = { check_variable = { previous_synthetic_refinery_count > 0 } }
			add_building_construction = { type = synthetic_refinery level = previous_synthetic_refinery_count instant_build = yes }
		}
		clear_variable = previous_synthetic_refinery_count
	}
	if = {
		limit = { has_variable = previous_fuel_silo_count }
		subtract_from_variable = { previous_fuel_silo_count = building_level@fuel_silo }
		if = {
			limit = { check_variable = { previous_fuel_silo_count > 0 } }
			add_building_construction = { type = fuel_silo level = previous_fuel_silo_count instant_build = yes }
		}
		clear_variable = previous_fuel_silo_count
	}
	if = {
		limit = { has_variable = previous_rocket_site_count }
		subtract_from_variable = { previous_rocket_site_count = building_level@rocket_site }
		if = {
			limit = { check_variable = { previous_rocket_site_count > 0 } }
			add_building_construction = { type = rocket_site level = previous_rocket_site_count instant_build = yes }
		}
		clear_variable = previous_rocket_site_count
	}
	if = {
		limit = { has_variable = previous_nuclear_reactor_count }
		subtract_from_variable = { previous_nuclear_reactor_count = building_level@nuclear_reactor }
		if = {
			limit = { check_variable = { previous_nuclear_reactor_count > 0 } }
			add_building_construction = { type = nuclear_reactor level = previous_nuclear_reactor_count instant_build = yes }
		}
		clear_variable = previous_nuclear_reactor_count
	}
}
Faction_mergable_invite = {
	if = {
		limit = {
			FROM = {
				is_faction_leader = yes
			}
		}
		every_country = {
			limit = {
				is_in_faction_with = FROM
				is_subject = no
			}
			PREV = {
				add_to_faction = PREV
			}
		}
	}
	add_to_faction = FROM
}

# used for transferring states that are partially occupied by an enemy without breaking frontlines
# use in state scope
# requires a temp_variable target
transfer_state_during_war = {
	if = {
		limit = { is_fully_controlled_by = owner }
		transfer_state_to = var:target
	}
	else = {
		set_state_owner_to = var:target
		set_state_province_controller = {
			controller = owner
			limit = { NOT = { has_war_with = PREV.owner } }
		}
	}
}

# used for transferring control of states between allies without breaking frontlines
# use in state scope
# requires a temp_variable target
transfer_control_during_war = {
	if = {
		limit = { is_fully_controlled_by = controller }
		set_state_controller = var:target
	}
	else = {
		set_state_province_controller = {
			controller = var:target
			limit = { is_ally_with = PREV.controller }
		}
	}
}

#Gives a random agency upgrade or grants a free agency if one has not yet been established
gain_random_agency_upgrade = {
	custom_effect_tooltip = free_agency_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_economy_civilian
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_economy_civilian
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_army_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_army_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_naval_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_naval_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_airforce_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_airforce_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_passive_defense
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_passive_defense
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_anti_partisan
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_anti_partisan
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_blueprint_stealing
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_blueprint_stealing
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_portable_radios
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_portable_radios
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_invisible_ink
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_invisible_ink
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_plastic_explosives
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_plastic_explosives
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_suicide_pills
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_training_centers
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_training_centers
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_commando_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_commando_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_interrogation_techniques
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_interrogation_techniques
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_diplo_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_diplo_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_psycho_warfare
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_psycho_warfare
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_decryption_boost }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_crypto_strength }
						}
					}
				}
			}
		}
	}
}

# scope is the country being puppeted
# PREV should be the overlord
puppet_country_without_changing_government = {
	get_current_government_type = yes
	PREV = { puppet = PREV }
	restore_previous_government_type = yes
}

# scope is the country being puppeted
# FROM is the the overlord
puppet_country_without_changing_government_FROM = {
	get_current_government_type = yes
	FROM = { puppet = PREV }
	restore_previous_government_type = yes
}

china_encryption_matching_attack = {
	if = {
		limit = {
			FROM = {
				decryption_progress = {
					target = ROOT
					value > 0.5
				}
			}
		}
		FROM = {
			country_event = {
				id = lep.203
				days = 7
			}
			if = {
				limit = { is_subject = yes }
				overlord = {
					country_event = {
						id = lep.204
						days = 7
					}
				}
			}
		}
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					NOT = { has_tech = basic_encryption }
					FROM = { has_tech = basic_decryption }
				}
				AND = {
					NOT = { has_tech = improved_encryption }
					FROM = { has_tech = improved_decryption }
				}
				AND = {
					NOT = { has_tech = advanced_encryption }
					FROM = { has_tech = advanced_decryption }
				}
			}
		}
		FROM = {
			country_event = {
				id = lep.203
				days = 7
			}
			if = {
				limit = { is_subject = yes }
				overlord = {
					country_event = {
						id = lep.204
						days = 7
					}
				}
			}
		}
	}
	else = {
		FROM = {
			country_event = {
				id = lep.203
				days = 13
			}
			if = {
				limit = {
					is_subject = yes
				}
				overlord = {
					country_event = {
						id = lep.204
						days = 13
					}
				}
			}
		}
	}
}

#this needs to be called *before* every start_civil_war effect
civil_war_set_flag_to_restore_elections = {
	if = {
		limit = { has_elections = yes }
		set_country_flag = had_elections
	}
}
# scope is the country being freed
remove_puppet_and_leave_faction = {
	if = {
		limit = { is_in_faction = yes }
		leave_faction = yes
	}
	if = {
		limit = { is_subject = yes }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
}
incoming_war_notification_effect = {
	hidden_effect = { country_event = kr.political.30 } #warning event
}

demote_if_marshal = {
	if = {
		limit = { is_field_marshal = yes }
		demote_leader = yes
	}
	if = {
		limit = { has_trait = recently_promoted }
		remove_unit_leader_trait = recently_promoted
	}
}
promote_to_marshal = {
	if = {
		limit = { is_field_marshal = no }
		promote_leader = yes
		if = {
			limit = { has_trait = recently_promoted }
			remove_unit_leader_trait = recently_promoted
		}
	}
}

add_potential_special_forces_tree = {
	custom_effect_tooltip = add_potential_special_forces_tree_tt
	if = {
		limit = { NOT = { has_variable = sf_trees } }
		set_variable = { sf_trees = 2 }
	}
	else = {
		add_to_variable = { sf_trees = 1 }
	}
}

remove_potential_special_forces_tree = {
	if = {
		limit = { NOT = { has_variable = sf_trees } }
		set_variable = { sf_trees = 0 }
	}
	else = {
		subtract_from_variable = { sf_trees = 1 }
	}
}

remove_core_and_add_claim = {
	remove_state_core = PREV
	add_state_claim = PREV
}