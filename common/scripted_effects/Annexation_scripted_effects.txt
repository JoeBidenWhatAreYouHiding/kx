# from released country's scope
syndicalist_socdem_government_change = {
	if = {
		limit = {
			ROOT = {
				has_government = social_democrat
				has_country_flag = soc_dems_are_socialists
			}
		}
		hidden_effect = {
			set_politics = {
				ruling_party = radical_socialist
				elections_allowed = no
			}
			add_popularity = {
				ideology = radical_socialist
				popularity = 0.4
			}
		}
	}
}

occupy_tiny_country = {
	add_political_power = -10
	add_stability = -0.01
	add_war_support = -0.01
	recheck_annexations = yes
}

occupy_small_country = {
	add_political_power = -25
	add_stability = -0.025
	add_war_support = -0.025
	recheck_annexations = yes
}

occupy_medium_country = {
	add_political_power = -50
	add_stability = -0.05
	add_war_support = -0.05
	recheck_annexations = yes
}

occupy_large_country = {
	add_political_power = -100
	add_stability = -0.1
	add_war_support = -0.1
	recheck_annexations = yes
}

occupy_huge_country = {
	add_political_power = -150
	add_stability = -0.15
	add_war_support = -0.15
	recheck_annexations = yes
}

occupy_massive_country = {
	add_political_power = -200
	add_stability = -0.2
	add_war_support = -0.2
	recheck_annexations = yes
}

# state scope
retain_state = {
	set_state_flag = { flag = retain_state_@PREV days = 2 value = 1 }
}

# state scope
transfer_state_without_overriding_occupation = {
	if = {
		limit = { is_fully_controlled_by = owner }
		transfer_state_to = var:tag_to_release
	}
	else = {
		set_state_owner_to = var:tag_to_release
		set_state_province_controller = {
			controller = owner
			limit = { NOT = { has_war_with = var:tag_to_release } }
		}
	}
}

# state scope
transfer_state_and_add_core = {
	remove_claim_and_add_core_of_target = yes
	transfer_state_without_overriding_occupation = yes
	ROOT = { recheck_annexations = yes }
}

# state scope
transfer_state_and_add_claim = {
	add_claim_of_target = yes
	transfer_state_without_overriding_occupation = yes
	ROOT = { recheck_annexations = yes }
}

# state scope
transfer_state_and_add_claim_or_core = {
	if = {
		limit = { has_state_flag = was_core_of_@var:tag_to_release }
		transfer_state_and_add_core = yes
		clr_state_flag = was_core_of_@var:tag_to_release
	}
	else = {
		transfer_state_and_add_claim = yes
	}
}

# state scope
remove_claim_and_add_core_of_ROOT = {
	if = {
		limit = { is_claimed_by = ROOT }
		remove_claim_by = ROOT
	}
	if = {
		limit = { NOT = { is_core_of = ROOT } }
		add_core_of = ROOT
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
remove_claim_and_add_core_of_target = {
	if = {
		limit = { is_claimed_by = var:tag_to_release }
		remove_claim_by = var:tag_to_release
	}
	if = {
		limit = { NOT = { is_core_of = var:tag_to_release } }
		add_core_of = var:tag_to_release
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
remove_claim_and_core_of_target = {
	if = {
		limit = { is_core_of = var:tag_to_release }
		remove_core_of = var:tag_to_release
	}
	if = {
		limit = { is_claimed_by = var:tag_to_release }
		remove_claim_by = var:tag_to_release
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_claim_of_ROOT = {
	if = {
		limit = {
			NOT = {
				is_claimed_by = ROOT
				is_core_of = ROOT
			}
		}
		add_claim_by = ROOT
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_claim_of_target = {
	if = {
		limit = {
			NOT = {
				is_claimed_by = var:tag_to_release
				is_core_of = var:tag_to_release
			}
		}
		add_claim_by = var:tag_to_release
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
remove_claim_and_add_claim_of_target = {
	if = {
		limit = {
			NOT = {
				is_claimed_by = var:tag_to_release
				is_core_of = var:tag_to_release
			}
		}
		add_claim_by = var:tag_to_release
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
transfer_if_owned = {
	if = {
		limit = { is_valid_annexation_state = yes }
		transfer_state_without_overriding_occupation = yes
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_claim_of_target_and_transfer_if_owned = {
	add_claim_of_target = yes
	if = {
		limit = { is_valid_annexation_state = yes }
		transfer_state_without_overriding_occupation = yes
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_core_of_target_and_transfer_if_owned = {
	remove_claim_and_add_core_of_target = yes
	if = {
		limit = { is_valid_annexation_state = yes }
		transfer_state_without_overriding_occupation = yes
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_core_and_transfer_if_owned_else_add_claim = {
	if = {
		limit = { is_valid_annexation_state = yes }
		remove_claim_and_add_core_of_target = yes
		transfer_state_without_overriding_occupation = yes
	}
	else = {
		add_claim_of_target = yes
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_core_if_owned_else_add_claim = {
	if = {
		limit = {
			OR = {
				is_valid_annexation_state = yes
				is_owned_by = var:tag_to_release
			}
		}
		remove_claim_and_add_core_of_target = yes
	}
	else = {
		add_claim_of_target = yes
	}
	ROOT = { recheck_annexations = yes }
}

# state scope
add_core_or_claim_of_target_and_transfer_if_owned = {
	if = {
		limit = { has_state_flag = was_core_of_@var:tag_to_release }
		add_core_of_target_and_transfer_if_owned = yes
		clr_state_flag = was_core_of_@var:tag_to_release
	}
	else = {
		add_claim_of_target_and_transfer_if_owned = yes
	}
}

# global scope
remove_all_cores_and_claims_of_tags = {
	every_state = {
		limit = {
			any_of = {
				array = core_removal_array
				OR = {
					is_core_of = var:v
					is_claimed_by = var:v
				}
			}
		}
		for_each_loop = {
			array = core_removal_array
			remove_core_of = var:v
			remove_claim_by = var:v
		}
	}
}

# global scope
transfer_territory_from_core_regions = {
	if = {
		limit = { has_war = yes }
		every_owned_state = {
			limit = {
				any_of = {
					array = target_cores_to_release
					is_core_of = var:v
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			set_state_owner_to = var:tag_to_release
			set_state_province_controller = {
				controller = owner
				limit = { NOT = { has_war_with = PREV.owner } }
			}
		}
	}
	else = {
		every_owned_state = {
			limit = {
				any_of = {
					array = target_cores_to_release
					is_core_of = var:v
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			transfer_state_to = var:tag_to_release
		}
	}
	recheck_annexations = yes
}

# global scope
transfer_territory_from_core_regions_and_add_claims = {
	if = {
		limit = { has_war = yes }
		every_owned_state = {
			limit = {
				any_of = {
					array = target_cores_to_release
					is_core_of = var:v
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			add_claim_by = var:tag_to_release
			set_state_owner_to = var:tag_to_release
			set_state_province_controller = {
				controller = owner
				limit = { NOT = { has_war_with = PREV.owner } }
			}
		}
	}
	else = {
		every_owned_state = {
			limit = {
				any_of = {
					array = target_cores_to_release
					is_core_of = var:v
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			var:tag_to_release = {
				add_state_claim = PREV
				transfer_state = PREV
			}
		}
	}
	recheck_annexations = yes
}

# global scope
transfer_territory_from_core_regions_and_add_cores = {
	if = {
		limit = { has_war = yes }
		every_owned_state = {
			limit = {
				any_of = {
					array = target_cores_to_release
					is_core_of = var:v
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			add_core_of = var:tag_to_release
			set_state_owner_to = var:tag_to_release
			set_state_province_controller = {
				controller = owner
				limit = { NOT = { has_war_with = PREV.owner } }
			}
		}
	}
	else = {
		every_owned_state = {
			limit = {
				any_of = {
					array = target_cores_to_release
					is_core_of = var:v
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			var:tag_to_release = {
				add_state_core = PREV
				transfer_state = PREV
			}
		}
	}
	recheck_annexations = yes
}

# global scope
release_targeted_tag_from_core_regions = {
	transfer_territory_from_core_regions = yes
	puppet_released_tag = yes
}

# global scope
release_targeted_tag_from_core_regions_and_add_cores = {
	transfer_territory_from_core_regions_and_add_cores = yes
	puppet_released_tag = yes
}

# global scope
release_targeted_tag_with_claims = {
	if = {
		limit = { has_war = yes }
		every_owned_state = {
			limit = {
				OR = {
					is_core_of = var:tag_to_release
					is_claimed_by = var:tag_to_release
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			set_state_owner_to = var:tag_to_release
			set_state_province_controller = {
				controller = owner
				limit = { NOT = { has_war_with = PREV.owner } }
			}
		}
	}
	else = {
		every_owned_state = {
			limit = {
				OR = {
					is_core_of = var:tag_to_release
					is_claimed_by = var:tag_to_release
				}
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			transfer_state_to = var:tag_to_release
		}
	}
	puppet_released_tag = yes
}

# global scope
release_targeted_tag = {
	if = {
		limit = { has_war = yes }
		every_owned_state = {
			limit = {
				is_core_of = var:tag_to_release
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			set_state_owner_to = var:tag_to_release
			set_state_province_controller = {
				controller = owner
				limit = { NOT = { has_war_with = PREV.owner } }
			}
		}
	}
	else = {
		every_owned_state = {
			limit = {
				is_core_of = var:tag_to_release
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			transfer_state_to = var:tag_to_release
		}
	}
	puppet_released_tag = yes
}

# global scope
release_targeted_tag_nocosmetic = {
	if = {
		limit = { has_war = yes }
		every_owned_state = {
			limit = {
				is_core_of = var:tag_to_release
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			set_state_owner_to = var:tag_to_release
			set_state_province_controller = {
				controller = owner
				limit = { NOT = { has_war_with = PREV.owner } }
			}
		}
	}
	else = {
		every_owned_state = {
			limit = {
				is_core_of = var:tag_to_release
				is_claim_or_core_of_ROOT = no
				NOT = { has_state_flag = retain_state_@PREV }
			}
			transfer_state_to = var:tag_to_release
		}
	}
	puppet_released_tag_nocosmetic = yes
}

# global scope
release_targeted_tag_during_war = {
	every_owned_state = {
		limit = {
			is_core_of = var:tag_to_release
			is_claim_or_core_of_ROOT = no
		}
		if = {
			limit = {
				is_fully_controlled_by = controller
				controller = { is_ally_with = ROOT }
			}
			var:tag_to_release = { transfer_state = PREV }
		}
		else = {
			var:tag_to_release = { set_state_owner = PREV }
		}
	}
	puppet_released_tag = yes
}

# state scope
transfer_to_ROOT = {
	if = {
		limit = {
			is_fully_controlled_by = controller
			controller = { is_ally_with = ROOT }
		}
		ROOT = { transfer_state = PREV }
	}
	else = {
		ROOT = { set_state_owner = PREV }
	}
}

# global scope
puppet_released_tag = {
	hidden_effect = {
		var:tag_to_release = {
			if = {
				limit = { has_country_flag = was_puppeted }
			}
		}
	}
	puppet = var:tag_to_release
	var:tag_to_release = {
		drop_cosmetic_tag = yes
		syndicalist_socdem_government_change = yes
		mark_focus_tree_layout_dirty = yes
		remove_all_minister_types = yes
		hidden_effect = {
			set_puppet_minister = yes
			transfer_technology_without_doctrines = yes
			remove_ideas = ready_to_surrender
			if = {
				limit = { ROOT = { has_elected_government = no } }
				set_politics = {
					ruling_party = var:current_party_ideology_group
					elections_allowed = no
				}
			}
			else = {
				meta_effect = {
					text = {
						set_politics = {
							ruling_party = var:current_party_ideology_group
							last_election = "[CURRENT_DATE]"
							elections_allowed = yes
						}
					}
					CURRENT_DATE = "[?global.date.GetDateStringNoHour]"
				}
			}
		}
		custom_effect_tooltip = general_minister_change_tt
	}
	recheck_annexations = yes
}

# global scope
puppet_released_tag = {
	hidden_effect = {
		var:tag_to_release = {
			if = {
				limit = { has_country_flag = was_puppeted }
			}
		}
	}
	puppet = var:tag_to_release
	var:tag_to_release = {
		drop_cosmetic_tag = yes
		syndicalist_socdem_government_change = yes
		mark_focus_tree_layout_dirty = yes
		remove_all_minister_types = yes
		hidden_effect = {
			set_puppet_minister = yes
			transfer_technology_without_doctrines = yes
			remove_ideas = ready_to_surrender
			if = {
				limit = { has_elected_government = no }
				set_politics = {
					ruling_party = var:current_party_ideology_group
					elections_allowed = no
				}
			}
			else = {
				set_politics = {
					ruling_party = var:current_party_ideology_group
					elections_allowed = yes
				}
			}
		}
		custom_effect_tooltip = general_minister_change_tt
	}
	recheck_annexations = yes
}

# global scope
puppet_released_tag_nocosmetic = {
	puppet = var:tag_to_release
	var:tag_to_release = {
		syndicalist_socdem_government_change = yes
		mark_focus_tree_layout_dirty = yes
		remove_all_minister_types = yes
		hidden_effect = {
			set_puppet_minister = yes
			transfer_technology_without_doctrines = yes
			remove_ideas = ready_to_surrender
			if = {
				limit = { has_elected_government = no }
				set_politics = {
					ruling_party = var:current_party_ideology_group
					elections_allowed = no
				}
			}
			else = {
				set_politics = {
					ruling_party = var:current_party_ideology_group
					elections_allowed = yes
				}
			}
		}
		custom_effect_tooltip = general_minister_change_tt
	}
	recheck_annexations = yes
}

transfer_state_during_war_target_tag_to_release = {
	if = {
		limit = { owner = { has_war = no } }
		transfer_state_to = var:tag_to_release
	}
	else = {
		set_state_owner_to = var:tag_to_release
		set_state_province_controller = {
			controller = owner
			limit = { NOT = { has_war_with = PREV.owner } }
		}
	}
}

setup_PIR_cores = {
	hidden_effect = {
		PIR = {
			add_state_core = 502
			add_state_core = 503
			add_state_core = 894
			add_state_core = 1041
		}
	}
}

setup_AMA_cores = {
	hidden_effect = {
		AMA = {
			add_state_core = 495
			add_state_core = 855
			add_state_core = 898
			add_state_core = 900
			add_state_core = 1030
			add_state_core = 1031
			add_state_core = 1033
			add_state_core = 1040
		}
	}
}

setup_GRP_cores = {
	hidden_effect = { 
		GRP = {
			add_state_core = 498
			add_state_core = 497
			add_state_core = 896
		}
	}
}

setup_GOY_cores = {
	hidden_effect = {
		GOY = {
			add_state_core = 280
			add_state_core = 504
			add_state_core = 505
			add_state_core = 1043
		}
	}
}

setup_RJM_cores = {
	hidden_effect = {
		RJM = {
			add_state_core = 496
			add_state_core = 500
			add_state_core = 895
		}
	}
}


setup_brazilian_splinters = {
	hidden_effect = {
		setup_PIR_cores = yes
		BAH = { add_state_core = 499 }
		SPO = { add_state_core = 501 }
		setup_AMA_cores = yes
		setup_GRP_cores = yes
		setup_GOY_cores = yes
		setup_RJM_cores = yes
		BRA = {
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 1612 #Setembrino de Carvalho
						has_id = 1623 #José Leite de Castro
						has_id = 1630 #Nelson de Mello
						has_id = 1615 #Mascarenhas de Morais
						has_id = 1616 #Sezefredo Passos
						has_id = 1614 #Otavio Valga Neves
					}
				}
				set_nationality = PIR
			}
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 1613 #Isidoro Dias Lopes
						has_id = 1620 #Euclides Figueiredo
						has_id = 1626 #Bertoldo Klinger
						has_id = 1631 #Júlio Marcondes Salgado
					}
				}
				set_nationality = SPO
			}
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 1618 #Newton Cavalcanti
						has_id = 1621 #Castelo Branco
						has_id = 1622 #Góis Monteiro
						has_id = 1624 #Tertuliano Potiguara
					}
				}
				set_nationality = GRP
			}
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 1611 #Rondon
						has_id = 1617 #Euclides Zenóbio da Costa
						has_id = 1632 #Ramiro Noronha
					}
				}
				set_nationality = GOY
			}
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 1625 #Newton Estillac Leal
						has_id = 1628 #Araken de Oliveira
						has_id = 1619 #Horta Barbosa
						has_id = 1629 #Olímpio Mourão Filho
					}
				}
				set_nationality = RJM
			}
		}
	}
}

remove_portuguese_monarchy = {
		POR = {
			if = {
				limit = {
					OR = {
						has_country_leader = {
							name = "Duarte II"
							ruling_only = yes
						}
						has_country_leader = {
							name = "Maria III"
							ruling_only = yes
						}
						has_country_leader = {
							name = "Maria Ana"
							ruling_only = yes
						}
						has_country_leader = {
							name = "Maria Adelaide"
							ruling_only = yes
						}
					}
				}
				#kill_ideology_leader = authoritarian_democrat
				#kill_ideology_leader = paternal_autocrat
				#kill_ideology_leader = national_populist
			}
		}
}

setup_puppet_lithuania = {
	if = {
		limit = {
			is_german_tag = yes
			has_socialist_government = no
		}
		LIT = {
			meta_effect = {
				text = {
					create_country_leader = {
						name = "Mindaugas III"
						desc = "POLITICS_MINDAUGAS_III_DESC"
						picture = "gfx/leaders/LIT/Portrait_LIT_Mindaugas_III.png"
						expire = "1965.1.1"
						ideology = [OVERLORD_IDEOLOGY]
					}
				}
				OVERLORD_IDEOLOGY = "[ROOT.GetRulingIdeologySubtype]"
			}
			set_country_flag = was_puppeted
		}
	}
	else_if = {
		limit = {
			is_russian_tag_that_can_integrate = yes
			RUS_russian_monarch = yes
			has_socialist_government = no
		}
		LIT = {
			meta_effect = {
				text = {
					create_country_leader = {
						name = "Kazimieras II"
						desc = "POLITICS_KAZIMIERAS_II_DESC"
						picture = "gfx/leaders/LIT/Portrait_LIT_Kazimieras_II_Tiskevicius.png"
						expire = "1965.1.1"
						ideology = [OVERLORD_IDEOLOGY]
					}
				}
				OVERLORD_IDEOLOGY = "[ROOT.GetRulingIdeologySubtype]"
			}
			set_country_flag = was_puppeted
		}
	}
	else = {
		LIT = { set_cosmetic_tag = LIT_republican }
	}
}

setup_puppet_baltic_union = {
	hidden_effect = {
		BAT = {
			set_politics = {
				ruling_party = radical_socialist
				elections_allowed = no
			}
			set_popularities = {
				totalist = 15
				radical_socialist = 45
				syndicalist = 30
				social_democrat = 5
				social_liberal = 1
				market_liberal = 0
				social_conservative = 1
				authoritarian_democrat = 1
				paternal_autocrat = 1
				national_populist = 1
			}
			create_country_leader = {
				name = "Justas Paleckis"
				picture = "gfx/leaders/LIT/Portrait_LIT_Justas_Paleckis.png"
				expire = "1965.1.1"
				ideology = radical_socialist_subtype
			}
			set_party_name = {
				ideology = radical_socialist
				long_name = BAT_radical_socialist_union_long
				name = BAT_radical_socialist_union
			}
			set_party_name = {
				ideology = syndicalist
				long_name = BAT_syndicalist_union_long
				name = BAT_syndicalist_union
			}
			set_party_name = {
				ideology = totalist
				long_name = BAT_totalist_union_long
				name = BAT_totalist_union
			}
			division_template = {
				name = "Raudonosios Armijos divizija"
				division_names_group = LIT_INF_01
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
				}

				support = {
					artillery = { x = 0 y = 0 }
				}
			}
			remove_ideas = {
				BAT_emigration
				BAT_emigration_2
				BAT_emigration_3
				BAT_landeswehr
				BAT_landeswehr_professional_1
				BAT_landeswehr_professional_2
				BAT_landeswehr_professional_3
				BAT_landeswehr_manpower_1
				BAT_landeswehr_manpower_2
				BAT_landeswehr_manpower_3
				BAT_byzantine_government
				BAT_byzantine_government_2
				BAT_byzantine_government_3
				BAT_byzantine_government_4
			}
			1091 = {
				create_unit = {
					division = "division_template = \"Raudonosios Armijos divizija\" start_experience_factor = 0.3 start_equipment_factor = 1"
					owner = BAT
					count = 3
				}
			}
			create_corps_commander = {
				name = "Jēkabs Peterss"
				portrait_path = "gfx/leaders/LAT/Portrait_LAT_Jekabs_Peterss.png"
				traits = { politically_connected }
				skill = 2
				attack_skill = 2
				defense_skill = 1
				planning_skill = 2
				logistics_skill = 2
			}
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 555001 #Heinrich von Behr
						has_id = 555002
						has_id = 555003 #Hans von Manteuffel-Szoege
						has_id = 555004 #Wessel von Freytagh-Loringhoven
						has_id = 555005 #Rüdiger von der Goltz
						has_id = 555006 #Otto Goldfeld
					}
				}
				set_nationality = NSW
			}
			load_focus_tree = Baltic_Union_focus
		}
		LIT = {
			every_unit_leader = {
				limit = {
					OR = {
						has_id = 76614 #Vincas Vitkauskas
						has_id = 556000 #Kazys Ladiga
						has_id = 556001 #Povilas Labanauskas
					}
				}
				set_nationality = BAT
			}
		}
	}
}

setup_romanian_puppet_leaders = {
	hidden_effect = {
		if = {
			limit = {
				has_socialist_government = no
				NOT = {
					has_country_leader = { name = "Ion Mihalache" ruling_only = no }
					has_country_leader = { name = "Dinu Bratianu" ruling_only = no }
				}
				ROOT = {
					OR = {
						is_american_tag = yes
						AND = {
							is_russian_tag_that_can_integrate = yes
							has_elected_government = yes
						}
						tag = UPC
					}
				}
			}
			create_country_leader = {
				name = "Ion Mihalache"
				picture = "gfx/leaders/ROM/Portrait_ROM_Ion_Mihalache.png"
				expire = "1965.1.1"
				ideology = social_democrat_subtype
			}
			create_country_leader = {
				name = "Ion Mihalache"
				picture = "gfx/leaders/ROM/Portrait_ROM_Ion_Mihalache.png"
				expire = "1965.1.1"
				ideology = social_liberal_subtype
			}
			create_country_leader = {
				name = "Dinu Bratianu"
				picture = "gfx/leaders/ROM/Portrait_ROM_Dinu_Bratianu.png"
				expire = "1965.1.1"
				ideology = market_liberal_subtype
			}
			create_country_leader = {
				name = "Dinu Bratianu"
				picture = "gfx/leaders/ROM/Portrait_ROM_Dinu_Bratianu.png"
				expire = "1965.1.1"
				ideology = social_conservative_subtype
			}
		}
		if = {
			limit = {
				has_country_leader = { name = "Carol II" ruling_only = yes }
			}
			create_country_leader = {
				name = "Michael I"
				desc = "POLITICS_MICHAEL_I_DESC"
				picture = "gfx/leaders/ROM/Portrait_ROM_Michael_I.png"
				expire = "1965.1.1"
				ideology = paternal_autocrat_subtype
			}
			create_country_leader = {
				name = "Alexandru Cantacuzino"
				desc = "POLITICS_CANTACUZINO_DESC"
				picture = "gfx/leaders/ROM/Portrait_ROM_Alexandru_Cantacuzino.png"
				expire = "1965.1.1"
				ideology = national_populist_subtype
				traits = { ROM_green_prince }
			}
		}
		if = {
			limit = {
				has_government = national_populist
				has_country_leader = { name = "Michael I" ruling_only = yes }
			}
			create_country_leader = {
				name = "Alexandru Cantacuzino"
				desc = "POLITICS_CANTACUZINO_DESC"
				picture = "gfx/leaders/ROM/Portrait_ROM_Alexandru_Cantacuzino.png"
				expire = "1965.1.1"
				ideology = national_populist_subtype
				traits = { ROM_green_prince }
			}
		}
	}
}

release_chinese_government = {
	every_owned_state = {
		limit = {
			is_controlled_chinese_region = yes
			if = {
				limit = {
					ROOT = { owns_state = 743 }
				}
				is_possible_legation_cities_state = no
			}
			is_not_claim_or_core_of_ROOT = yes
			if = {
				limit = {
					ROOT = { tag = JAP }
				}
				NOT = { has_variable = ambition_area_@ROOT }
			}
		}
		var:tag_to_release = {
			add_state_core = PREV
			transfer_state = PREV
		}
	}
	puppet_released_tag = yes
	hidden_effect = {
		var:tag_to_release = {
			if = {
				limit = {
					NOT = { has_cosmetic_tag = FNG_ROC }
				}
				drop_cosmetic_tag = yes
			}
		}
	}
}

release_chinese_government_in_manchuria = {
	every_owned_state = {
		limit = {
			is_manchuria = yes
			is_not_claim_or_core_of_ROOT = yes
			if = {
				limit = {
					ROOT = { tag = JAP }
				}
				NOT = { has_variable = ambition_area_@ROOT }
			}
		}
		var:tag_to_release = {
			add_state_core = PREV
			transfer_state = PREV
		}
	}
	puppet_released_tag = yes
	hidden_effect = {
		var:tag_to_release = {
			if = {
				limit = {
					NOT = { has_cosmetic_tag = FNG_ROC }
				}
				drop_cosmetic_tag = yes
			}
		}
	}
}

setup_puppet_mexico = {
	MEX = {
		if = {
			limit = { 
				has_government = totalist 
				OVERLORD = {
					NOT = {
						OR = {
							has_country_leader_ideology = authcom_subtype
							has_country_leader_ideology = authcom_subtype
							has_country_leader_ideology = popcom_subtype
							has_country_leader_ideology = jacobinism_subtype
						}
					}
				}
			}
			complete_national_focus = MEX_establish_maximato
			create_country_leader = {# Plutarco Calles
				name = "Plutarco Calles"
				desc = "POLITICS_PLUTARCO_CALLES_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Plutarco_Calles.png"
				expire = "1965.1.1"
				ideology = maximato_subtype
				traits = { jefe_maximo }
			}
		}
		else_if = {
			limit = { 
				OVERLORD = {
					AND = {
						has_government = totalist 
						OR = {
							has_country_leader_ideology = authcom_subtype
							has_country_leader_ideology = popcom_subtype
							has_country_leader_ideology = jacobinism_subtype
						}
					}
				}
			}
			complete_national_focus = MEX_PCM_the_lenin_of_the_west
			create_country_leader = {# Vicente Toledano
				name = "Vicente Toledano"
				desc = "POLITICS_VINCENTE_TOLEDANO_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Vincente_Toledano.png"
				expire = "1965.1.1"
				ideology = authcom_subtype
				traits = {}
			}
			set_party_name = {
				name = MEX_communist_totalist_party
				long_name = MEX_communist_totalist_party_long
				ideology = totalist
			}
		}
		else_if = {
			limit = { 
				OVERLORD = {
					has_socialist_government = yes 
					NOT = {
						has_government = totalist
					}
				}
			}
			complete_national_focus = MEX_republic_survives
		}
		else_if = {
			limit = { 
				OVERLORD = {
					has_democratic_government = yes 
				}
			}
			complete_national_focus = MEX_constitutional_convention
		}
		else_if = {
			limit = { 
				OVERLORD = {
					has_country_leader_ideology = junta_subtype 
				}
				NOT = {
					has_global_flag = MEX_GARZA_DEAD
				}
			}
			complete_national_focus = MEX_JUNTA_president_garza
			complete_national_focus = MEX_JUNTA_military_junta
			create_country_leader = {# Pablo Gonzalez Garza
				name = "Pablo Gonzalez Garza"
				desc = "POLITICS_PABLO_GONZALEZ_GARZA_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Pablo_Garza_Civilian.png"
				expire = "1965.1.1"
				ideology = junta_subtype
				traits = {}
			}
			set_party_name = {
				ideology = paternal_autocrat
				long_name = MEX_paternal_autocrat_party_long
				name = MEX_paternal_autocrat_party
			}
		}
		else_if = {
			limit = { 
				OVERLORD = {
					has_country_leader_ideology = junta_subtype 
				}
				has_global_flag = MEX_GARZA_DEAD
			}
			complete_national_focus = MEX_juan_barragan
			create_country_leader = {# Juan Barragán Rodríguez
				name = "Juan Barragán Rodríguez"
				desc = "POLITICS_JUAN_BARRAGAN_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Juan_Barragan_Rodriguez.png"
				expire = "1965.1.1"
				ideology = junta_subtype
				traits = {}
			}
			set_party_name = {
				ideology = paternal_autocrat
				long_name = MEX_paternal_autocrat_party_long
				name = MEX_paternal_autocrat_party
			}
		}
		else_if = {
			limit = { 
				OVERLORD = {
					NOT = {
						has_country_leader_ideology = junta_subtype
					}
				}
			}
			complete_national_focus = MEX_felix_diaz
			create_country_leader = {# Emergency Council
				name = "Félix Díaz Prieto"
				desc = "POLITICS_FELIX_DIAZ_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Felix_Diaz_Prieto.png"
				expire = "1965.1.1"
				ideology = caudillo_populism_subtype
				traits = {}
			}
			set_party_name = {
				ideology = paternal_autocrat
				long_name = MEX_paternal_autocrat_party_long
				name = MEX_paternal_autocrat_party
			}
		}
		else_if = {
			limit = { 
				OVERLORD = {
					AND = {
						has_government = national_populist 
						has_country_leader_ideology = integralism_subtype
					}
				}
			}
			create_country_leader = {# José Vasconcelos
				name = "José Vasconcelos"
				desc = "POLITICS_VASCONCELOS_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Jose_Vasconcelos.png"
				expire = "1965.1.1"
				ideology = integralism_subtype
				traits = {}
			}
			set_party_name = {
				ideology = national_populist
				name = MEX_integralist_national_populist_party
				long_name = MEX_integralist_national_populist_party_long
			}
			complete_national_focus = MEX_REP_integralist_republic
		}
		else_if = {
			limit = { 
				OVERLORD = {
					AND = {
						has_government = national_populist 
						has_country_leader_ideology = fundementalism_subtype
					}
				}
			}
			create_country_leader = {# Jose Antonio Urquiza
			name = "Jose Antonio Urquiza"
				desc = "POLITICS_JOSE_URQUIZA_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Urquiza.png"
				expire = "1965.1.1"
				ideology = right_syndicalism_subtype
				traits = {}
			}
			set_party_name = {
				ideology = national_populist
				name = MEX_synarchist_national_populist_party
				long_name = MEX_synarchist_national_populist_party_long
			}
			complete_national_focus = MEX_REP_synarchist_republic
		}
		else_if = {
			limit = { 
				OVERLORD = {
					AND = {
						has_government = national_populist 
						has_country_leader_ideology = townerism_subtype
					}
				}
			}
			create_country_leader = {# Nicolás Rodríguez Carrasco
				name = "Nicolás Rodríguez Carrasco"
				desc = "POLITICS_CARRASCO_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Nicolas_Rodriguez_Carrazco_Militar.png"
				expire = "1965.1.1"
				ideology = national_populist_subtype
				traits = {}
			}
			set_party_name = {
				ideology = national_populist
				name = MEX_golshirt_national_populist_party
				long_name = MEX_golshirt_national_populist_party_long
			}
			complete_national_focus = MEX_GOL_new_guard_victorious
			complete_national_focus = MEX_GOL_old_or_new
		}
		else_if = {
			limit = { 
				OVERLORD = {
					has_government = national_populist 
					NOT = {
						OR = {
							has_country_leader_ideology = fundementalism_subtype
							has_country_leader_ideology = integralism_subtype
							has_country_leader_ideology = townerism_subtype
						}
					}
				}
			}
			create_country_leader = {# Roque Garza
				name = "Roque Garza"
				desc = "POLITICS_ROQUE_GARZA_DESC"
				picture = "gfx/leaders/MEX/Portrait_Mexico_Roque_Garza.png"
				expire = "1965.1.1"
				ideology = national_populist_subtype
				traits = {}
			}
			set_party_name = {
				ideology = national_populist
				name = MEX_golshirt_national_populist_party
				long_name = MEX_golshirt_national_populist_party_long
			}
			complete_national_focus = MEX_GOL_old_guard_victorious
			complete_national_focus = MEX_GOL_old_or_new
		}
	}
	if = {
		limit = {
			country_exists = YUC
			NOT = {
				YUC = { has_country_flag = YUC_indepedence_war_over }
			}
		}
		YUC = { country_event = mexico.66 }
	}
}


determine_chinese_ally = {
	hidden_effect = {
		if = {
			limit = {
				OR = {
					tag = GER
					tag = GEA
					tag = GEX
				}
				QIE = {
					exists = yes
					is_subject = no
					NOT = {
						has_country_flag = wu_intervenes_proANQ
						has_country_flag = QIE_manchu_restoration
						has_country_flag = wu_no_intervene
					}
				}
			}
			QIE = {
				save_event_target_as = china_ally_target
			}
		}
		else_if = {
			limit = {
				OR = {
					tag = GER
					tag = GEA
					tag = GEX
				}
				LEP = {
					exists = yes
					is_subject = no
				}
			}
			LEP = {
				save_event_target_as = china_ally_target
			}
		}
		else_if = {
			limit = {
				has_socialist_government = yes
				CHI = {
					exists = yes
					is_subject = no
					OR = {
						has_socialist_government = yes
						has_government = social_democrat
					}
				}
			}
			CHI = {
				save_event_target_as = china_ally_target
			}
		}
		else_if = {
			limit = {
				has_elected_government = yes
				GXC = {
					exists = yes
					is_subject = no
					is_ruled_by_federalists = yes
				}
			}
			GXC = {
				save_event_target_as = china_ally_target
			}
		}
		else_if = {
			limit = {
				tag = JAP
				FNG_JAP_hostile = no
				FNG = {
					exists = yes
					is_subject = no
				}
			}
			FNG = {
				save_event_target_as = china_ally_target
			}
		}
		else = {
			random_country = {
				limit = {
					OR = {
						tag = CHI
						tag = FNG
						tag = QIE
						tag = GXC
					}
					is_ally_of_ROOT = yes
				}
				save_event_target_as = china_ally_target
			}
		}
	}
}

setup_puppet_leader_TIB = {
	#Setup Ma Biao
	if = {
		limit = {
			tag = XSM
		}
		TIB = {
			set_party_name = {
				ideology = paternal_autocrat
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = paternal_autocrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = paternal_autocrat
				popularity = 0.5
			}
			create_country_leader = {
				name = "Ma Biao"
				desc = "POLITICS_XSM_MA_BIAO_ARMY_DESC"
				picture = "gfx/leaders/XSM/Portrait_XSM_Ma_Biao.png"
				expire = "1965.1.1"
				ideology = paternal_autocrat_subtype
			}
			set_country_flag = was_puppeted
		}
	}
	#Setup Abdullah Bughra
	else_if = {
		limit = {
			tag = ETS
		}
		TIB = {
			set_party_name = {
				ideology = national_populist
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = national_populist
				elections_allowed = no
			}
			add_popularity = {
				ideology = national_populist
				popularity = 0.5
			}
			create_country_leader = {
				name = "Abdullah Bughra"
				picture = "gfx/leaders/ETS/Portrait_ETS_Abdullah_Bughra.png"
				expire = "1965.1.1"
				ideology = national_populist_subtype
			}
			set_country_flag = was_puppeted
		}
	}
	#Setup He Guoguang
	else_if = {
		limit = {
			NOT = {
				tag = XSM
			}
			is_ruled_by_pro_zhili = yes
		}
		TIB = {
			set_party_name = {
				ideology = authoritarian_democrat
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = authoritarian_democrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = authoritarian_democrat
				popularity = 0.5
			}
			create_country_leader = {
				name = "He Guoguang"
				desc = "POLITICS_SZC_HE_GUOGUANG_DESC"
				picture = "gfx/leaders/SZC/Portrait_SZC_He_Guoguang.png"
				expire = "1965.1.1"
				ideology = authoritarian_democrat_subtype
			}
			set_country_flag = was_puppeted
			event_target:SZC_He_Guoguang = {
				set_nationality = TIB
				promote_leader = yes
			}
		}
	}
	#Setup Wen Tsungyao
	else_if = {
		limit = {
			NOT = {
				tag = XSM
			}
			is_ruled_by_pro_manchu = yes
		}
		TIB = {
			set_party_name = {
				ideology = authoritarian_democrat
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = authoritarian_democrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = authoritarian_democrat
				popularity = 0.5
			}
			create_country_leader = {
				name = "Wen Tsungyao"
				picture = "gfx/leaders/QIE/Portrait_QIE_Wen_Tsungyao.png"
				expire = "1965.1.1"
				ideology = authoritarian_democrat_subtype
			}
			set_country_flag = was_puppeted
		}
	}
	#Setup Huang Musong
	else_if = {
		limit = {
			NOT = {
				tag = XSM
			}
			is_ruled_by_federalists = yes
		}
		TIB = {
			set_party_name = {
				ideology = paternal_autocrat
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = paternal_autocrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = paternal_autocrat
				popularity = 0.5
			}
			create_country_leader = {
				name = "Huang Musong"
				picture = "gfx/leaders/TIB/Portrait_TIB_Huang_Musong.png"
				expire = "1965.1.1"
				ideology = paternal_autocrat_subtype
			}
			set_country_flag = was_puppeted
		}
	}
	#Setup Tibetan KMT
	else_if = {
		limit = {
			NOT = {
				tag = XSM
			}
			is_ruled_by_kmt = yes
		}
		TIB = {
			set_politics = {
				ruling_party = social_democrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = social_democrat
				popularity = 0.5
			}
		}
	}
}

setup_puppet_leader_MON = {
	#Setup Li Shouxin
	if = {
		limit = {
			OR = {
				tag = QIE
				tag = FNG
			}
		}
		MON = {
			set_party_name = {
				ideology = paternal_autocrat
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = paternal_autocrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = paternal_autocrat
				popularity = 0.5
			}
			create_country_leader = {
				name = "Li Shouxin"
				picture = "gfx/leaders/MON/Portrait_MON_Li_Shouxin.png"
				expire = "1965.1.1"
				ideology = paternal_autocrat_subtype
			}
			set_country_flag = was_puppeted
		}
	}
	#Setup Jodbajab
	else_if = {
		limit = {
			is_chinese_tag = yes
			NOT = {
				tag = QIE
				tag = FNG
			}
			OR = {
				tag = XSM
				is_ruled_by_kmt = no
			}
		}
		MON = {
			set_party_name = {
				ideology = paternal_autocrat
				long_name = XSM_syndicalist_party_long
				name = XSM_syndicalist_party
			}
			set_politics = {
				ruling_party = paternal_autocrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = paternal_autocrat
				popularity = 0.5
			}
			create_country_leader = {
				name = "Jodbajab"
				picture = "gfx/leaders/MON/Portrait_MON_Jodbajab.png"
				expire = "1965.1.1"
				ideology = paternal_autocrat_subtype
			}
			set_country_flag = was_puppeted
		}
	}
	#Setup MAN
	else_if = {
		limit = {
			is_chinese_tag = yes
			NOT = {
				tag = QIE
				tag = FNG
				tag = XSM
			}
			is_ruled_by_kmt = yes
		}
		MON = {
			set_politics = {
				ruling_party = social_democrat
				elections_allowed = no
			}
			add_popularity = {
				ideology = social_democrat
				popularity = 0.5
			}
		}
	}
	else_if = {
		limit = {
			is_russian_tag_that_can_integrate = yes
			has_socialist_government = no
			NOT = { has_government = social_democrat }
		}
		MON = {
			set_country_flag = MON_soyombo_in_power_flag
			set_politics = {
				ruling_party = paternal_autocrat
				elections_allowed = no
			}
			set_party_name = {
				ideology = paternal_autocrat
				long_name = MON_RUS_party_long
				name = MON_RUS_party
			}
			set_cosmetic_tag = MON_RUS
			create_country_leader = {
				name = "Boris Rezukhin"
				desc = "POLITICS_REZUKHIN_LEADER_DESC"
				picture = "gfx/leaders/MON/Portrait_MON_Boris_Rezukhin.png"
				expire = "1965.1.1"
				ideology = junta_subtype
			}
			remove_all_ministers = yes
			add_ideas = {
				MON_Boris_Rezukhin_hog_pau
				MON_Ferdynand_Ossendowski_for_pau
				MON_Rinchen_Sengge_eco_ade
				MON_Leonid_Sipaylov_sec_pau
			}
		}
	}
}

setup_puppet_leader_XSM = {
	#Setup Tashi Döndrub
	if = {
		limit = {
			has_socialist_government = no
		}
		XSM = {
			hidden_effect = {
				set_party_name = {
					ideology = paternal_autocrat
					long_name = XSM_syndicalist_party_long
					name = XSM_syndicalist_party
				}
				set_party_name = {
					ideology = authoritarian_democrat
					long_name = XSM_syndicalist_party_long
					name = XSM_syndicalist_party
				}
				set_party_name = {
					ideology = social_conservative
					long_name = XSM_syndicalist_party_long
					name = XSM_syndicalist_party
				}
				set_party_name = {
					ideology = national_populist
					long_name = XSM_syndicalist_party_long
					name = XSM_syndicalist_party
				}
			}
			meta_effect = {
				text = {
					create_country_leader = {
						name = "Tashi Döndrub"
						desc = "POLITICS_TAISHI_DONDRUBN_DESC"
						picture = "gfx/leaders/TIB/Portrait_TIB_Tashi_Dondrub.png"
						expire = "1965.1.1"
						ideology = [OVERLORD_IDEOLOGY]
					}
				}
				OVERLORD_IDEOLOGY = "[ROOT.GetRulingIdeologySubtype]"
			}
			hidden_effect = {
				TIB = {
					every_unit_leader = {
						limit = { has_id = 9993 }
						promote_leader = yes
						set_nationality = XSM
					}
				}
			}
			set_country_flag = was_puppeted
		}
	}
}

transfer_iraq = {
	every_owned_state = {
		limit = {
			is_claim_or_core_of_ROOT = no
			OR = {
				AND = {
					region = 239 #Mesopotamia
					NOT = { state = 812 }
				}
				AND = {
					state = 677 #Aleppo
					NOT = {
						SYR = { is_ally_with = ROOT }
						554 = { is_valid_annexation_state = yes } #Syria
					}
				}
				AND = {
					ASY = {
						NOT = { is_in_faction_with = FROM is_subject_of = FROM }
					}
					state = 812
				}
			}
			if = {
				limit = { state = 819 } #Sulaymaniyah
				ROOT = {
					NOT = {
						tag = TUR
						tag = OTT
						tag = PER
					}
				}
				TUR = { ROOT_can_grant_land = no }
				OTT = { ROOT_can_grant_land = no }
				PER = { ROOT_can_grant_land = no }
				350 = { is_valid_annexation_state = no } #Diyarbakir
				352 = { is_valid_annexation_state = no } #Van
				417 = { is_valid_annexation_state = no } #Western Azerbaijan
				421 = { is_valid_annexation_state = no } #Kurdistan
			}
		}
		if = {
			limit = { var:tag_to_release = { tag = OTT } }
			remove_claim_and_add_core_of_target = yes
		}
		else_if = {
			limit = {
				NOT = {
					is_core_of = var:tag_to_release
					is_claimed_by = var:tag_to_release
				}
			}
			add_claim_by = var:tag_to_release
		}
		transfer_state_to = var:tag_to_release
	}
}

transfer_sinai_if_annexation_unavailable = {
	if = {
		limit = {
			453 = { is_valid_annexation_state = yes } #Sinai
			EGY = { ROOT_can_grant_land = no }
			446 = { is_valid_annexation_state = no } #Cairo
		}
		var:tag_to_release = {
			add_state_claim = 453
			transfer_state = 453
		}
	}
}
