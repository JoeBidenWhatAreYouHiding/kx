

d_ausd1 = {
	BOTDE_minority_pulse_test = yes
}

d_awrbopr = {
	add_power_balance_value = {
		id = AUS_socialist_republic_bop
		value = 0.3
		tooltip_side = AUS_socialist_republic_socdem
	}
}

d_awrbopl = {
	add_power_balance_value = {
		id = AUS_socialist_republic_bop
		value = -0.3
		tooltip_side = AUS_socialist_republic_syndie
	}
}

d_awrrev = {
	add_to_variable = {
		var = AUS.revolution_value
		value = 1
	}
}

d_awrrevneg = {
	add_to_variable = {
		var = AUS.revolution_value
		value = -1
	}
}

d_auscol5 = {
	add_to_variable = {
		var = AUS.subject_revolt_progress
		value = 0.05
	}
}

AUS_debug_effect = {
	every_country = {
		limit = {
			AUS_is_constituent = yes
		}
		#load_focus_tree
	}
}



AUS_debug_effect2 = {
	if = {
		limit = {
			country_exists = BOS
		}
		add_political_power = 1
		else = {
			add_political_power = 2
		}
	}
}

AUS_debug_effect3 = {
	every_owned_state = {
		clr_state_flag = rev_point
	}
}

AUS_3_fed = {
	custom_effect_tooltip = govt_raise_3
	add_to_variable = {
		var = global.government_percentage
		value = 0.03
	}
}

AUS_5_fed = {
	custom_effect_tooltip = govt_raise_5
	add_to_variable = {
		var = global.government_percentage
		value = 0.05
	}
}

AUS_5_fed_minus = {
	custom_effect_tooltip = govt_minus_5
	add_to_variable = {
		var = global.government_percentage
		value = -0.05
	}
}

AUS_8_fed_minus = {
	custom_effect_tooltip = govt_minus_8
	add_to_variable = {
		var = global.government_percentage
		value = -0.08
	}
}

AUS_warning_check = {
	clear_array = ROOT.austria_warning_subject_array
	for_each_loop = {
		array = global.AUS_all_possible_array
		var:v = {
			if = {
				limit = {
					has_variable = subject_revolt_progress
					check_variable = {
						var = THIS.subject_revolt_progress
						value = 0.75
						compare = greater_than_or_equals
					}
					NOT = {
						is_in_array = { ROOT.austria_warning_subject_array = THIS }
						has_war_with = AUS
					}
				}
				add_to_array = { ROOT.austria_warning_subject_array = v }
			}
		}
	}
}

AUS_do_revolt_rate_rise = {
	if = {
		limit = {
			has_war = no
		}
		set_variable = { var = extra_value_war_exhaust value = 0 }
	}
	clamp_variable = {
		var = AUS.subject_revolt_progress
		max = 1
		min = 0
	}
	set_temp_variable = { revolt_rate_rising = stability }
	subtract_from_temp_variable = { revolt_rate_rising = 1 }
	multiply_temp_variable  = { revolt_rate_rising = -1 }
	multiply_temp_variable  = { revolt_rate_rising = 0.01 }
	multiply_temp_variable  = { revolt_rate_rising = 3 }
	set_temp_variable = { revolt_rate_party_pop_thing = party_popularity@ruling_party }
	divide_temp_variable = { revolt_rate_party_pop_thing = 100 }
	subtract_from_temp_variable = { revolt_rate_rising = revolt_rate_party_pop_thing }
	add_to_temp_variable = { CONST_revolt_rate_rising = AUS.extra_value }
	add_to_temp_variable = { CONST_revolt_rate_rising = global.extra_value_war_exhaust }
	add_to_temp_variable = { CONST_revolt_rate_rising = global.extra_collapse_federalizing }
	add_to_variable = {
		var = AUS.subject_revolt_progress
		value = revolt_rate_rising
	}
	if = {
		limit = {
			has_global_flag = AUS_ausgleich_over
		}
		subtract_from_variable = {
			var = AUS.subject_revolt_progress
			value = 0.002
		}
	}
	if = {
		limit = {
			OR = {
				has_completed_focus = AUS_root_out_class_hatred
				has_completed_focus = AUS_to_these_united_states
				has_completed_focus = AUS_test_of_time
				has_completed_focus = AUS_charity_and_unity
			}
		}
		subtract_from_variable = {
			var = AUS.subject_revolt_progress
			value = 0.002
		}
	}
	AUS_warning_check = yes
}

CONST_do_additional_revolt_progress = {
	set_temp_variable = { CONST_revolt_rate_rising = num_of_factories }
	set_temp_variable = { CONST_revolt_rate_rising_battalion_ROOT = num_battalions }
	set_temp_variable = { CONST_revolt_rate_rising_battalion_AUS = AUS.num_battalions }
	set_temp_variable = { CONST_revolt_rate_rising_stability = stability }
	set_temp_variable = { CONST_revolt_rate_rising_AUS = AUS.num_of_factories }
	
	divide_temp_variable = { CONST_revolt_rate_rising = 120 }
	divide_temp_variable = { CONST_revolt_rate_rising_battalion_ROOT = 10000 }
	divide_temp_variable = { CONST_revolt_rate_rising_battalion_AUS = 50000 }
	multiply_temp_variable = { CONST_revolt_rate_rising_stability = 5 }
	add_to_temp_variable = { CONST_revolt_rate_rising = CONST_revolt_rate_rising_battalion_ROOT }
	
	subtract_from_temp_variable = { CONST_revolt_rate_rising = CONST_revolt_rate_rising_battalion_AUS }
	multiply_temp_variable = { CONST_revolt_rate_rising = CONST_revolt_rate_rising_stability }
	divide_temp_variable = { CONST_revolt_rate_rising = 20 }
	divide_temp_variable = { CONST_revolt_rate_rising_AUS = 5000 }
	subtract_from_temp_variable = { CONST_revolt_rate_rising = CONST_revolt_rate_rising_battalion_AUS }
	add_to_temp_variable = { CONST_revolt_rate_rising = ROOT.extra_value }
	add_to_temp_variable = { CONST_revolt_rate_rising = global.extra_value_war_exhaust }
	add_to_temp_variable = { CONST_revolt_rate_rising = global.extra_collapse_federalizing }
	add_to_variable = { ROOT.subject_revolt_progress = CONST_revolt_rate_rising }
	
	if = {
		limit = {
			has_global_flag = AUS_ausgleich_over
		}
		subtract_from_variable = { ROOT.subject_revolt_progress = 0.01 }
	}
	AUS_warning_check = yes
}

AUS_do_revolt_rate_rise_counterintel = {
	set_temp_variable = { AUS_intel_subtract = modifier@intelligence_agency_defense }
	divide_temp_variable = { AUS_intel_subtract = 750 }
	subtract_from_variable = {
		var = ROOT.subject_revolt_progress
		value = AUS_intel_subtract
	}
}

AUS_do_revolt_rate_rise_operative_mission = {
	if = {
		limit = {
			any_operative_leader = {
				operative_leader_mission = counter_intelligence
			}
			NOT = {
				is_preparing_operation = {
					target = any_country
				}
				is_running_operation  = {
					target = any_country
				}
			}
		}
		add_to_variable = {
			var = ROOT.subject_revolt_progress
			value = -0.003
		}
	}
}

AUS_do_revolt_rate_rise_operative_mission_diplo_pressure = {
	if = {
		limit = {
			AUS = {
				any_operative_leader = {
					operative_leader_mission = diplomatic_pressure
				}
				NOT = {
					is_preparing_operation = {
						target = any_country
					}
					is_running_operation  = {
						target = any_country
					}
				}
			}
		}
		add_to_variable = {
			var = ROOT.subject_revolt_progress
			value = -0.003
		}
	}
}

AUS_elect_CS_1940 = {
	if = {
		limit = {
			has_country_flag = AUS_ender_1940
		}
		#create_country_leader = {
		#	name = "Otto Ender"
		#	desc = "POLITICS_ENDER_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Otto_Ender.png"
		#	expire = "1965.1.1"
		#	ideology = christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Otto_Ender_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_miklas_1940
		}
		#create_country_leader = {
		#	name = "Wilhelm Miklas"
		#	desc = "POLITICS_MIKLAS_DESC"
		#	picture = "gfx/leaders/AUS/Portrait_AUS_Wilhelm_Miklas.png"
		#	expire = "1965.1.1"
		#	ideology = christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Wilhelm_Miklas_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_buresch_1940
		}
		#create_country_leader = {
		#	name = "Karl Buresch"
		#	desc = "POLITICS_BURESCH_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Karl_Buresch.png"
		#	expire = "1965.1.1"
		#	ideology = christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Karl_Buresch_hog_ade
	}
	else_if = {
		limit = {
			has_country_flag = AUS_macek_1940
		}
		#create_country_leader = {
		#	name = "Vladko Maček"
		#	desc = "POLITICS_MACEK_DESC"
		#	picture = "gfx/leaders/CRO/CRO_vladko_macek_KX.png"
		#	expire = "1965.1.1"
		#	ideology = christian_democracy_subtype
		#}
		custom_effect_tooltip = AUS_no_more_illyrian_revolt
		set_global_flag = AUS_no_more_CRO_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = CRO_Vladko_Macek_hog_sli
	}
	else_if = {
		limit = {
			has_country_flag = AUS_bethlen_1940
		}
		#create_country_leader = {
		#	name = "István Bethlen"
		#	desc = "POLITICS_BETHLEN_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Istvan_Bethlen.png"
		#	expire = "1965.1.1"
		#	ideology = christian_democracy_subtype
		#}
		custom_effect_tooltip = AUS_disable_hungarian_revolt
		set_global_flag = AUS_no_more_HUN_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = HUN_Istvan_Bethlen_hog_ade
	}
	else = {
		#create_country_leader = {
		#	name = "Otto Ender"
		#	desc = "POLITICS_ENDER_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Otto_Ender.png"
		#	expire = "1965.1.1"
		#	ideology = christian_democracy_subtype
		#}
		set_country_flag = AUS_ender_1940
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Otto_Ender_hog_sco
	}
}

AUS_elect_CS_1940_authdem = {
	if = {
		limit = {
			has_country_flag = AUS_miklas_1940
		}
		#create_country_leader = {
		#	name = "Wilhelm Miklas"
		#	desc = "POLITICS_MIKLAS_DESC"
		#	picture = "gfx/leaders/AUS/Portrait_AUS_Wilhelm_Miklas.png"
		#	expire = "1965.1.1"
		#	ideology = autdem_christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Wilhelm_Miklas_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_buresch_1940
		}
		#create_country_leader = {
		#	name = "Karl Buresch"
		#	desc = "POLITICS_BURESCH_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Karl_Buresch.png"
		#	expire = "1965.1.1"
		#	ideology = autdem_christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Karl_Buresch_hog_ade
	}
	else_if = {
		limit = {
			has_country_flag = AUS_dollfuss_1940
		}
		#create_country_leader = {
		#	name = "Engelbert Dollfuss"
		#	desc = "POLITICS_DOLLFUSS_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Engelbert_Dollfuss.png"
		#	expire = "1965.1.1"
		#	ideology = autdem_christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Engelbert_Dollfuss_hog_ade
	}
	else_if = {
		limit = {
			has_country_flag = AUS_macek_1940
		}
		#create_country_leader = {
		#	name = "Vladko Maček"
		#	desc = "POLITICS_MACEK_DESC"
		#	picture = "gfx/leaders/CRO/CRO_vladko_macek_KX.png"
		#	expire = "1965.1.1"
		#	ideology = authoritarian_democrat_subtype
		#}
		custom_effect_tooltip = AUS_no_more_illyrian_revolt
		set_global_flag = AUS_no_more_CRO_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = CRO_Vladko_Macek_hog_sli
	}
	else_if = {
		limit = {
			has_country_flag = AUS_bethlen_1940
		}
		#create_country_leader = {
		#	name = "István Bethlen"
		#	desc = "POLITICS_BETHLEN_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Istvan_Bethlen.png"
		#	expire = "1965.1.1"
		#	ideology = authoritarian_democrat_subtype
		#}
		custom_effect_tooltip = AUS_disable_hungarian_revolt
		set_global_flag = AUS_no_more_HUN_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = HUN_Istvan_Bethlen_hog_ade
	}
	else_if = {
		limit = {
			has_country_flag = AUS_raab_1940
		}
		#create_country_leader = {
		#	name = "Julius Raab"
		#	desc = "POLITICS_RAAB_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Julius_Raab.png"
		#	expire = "1965.1.1"
		#	ideology = autdem_christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Julius_Raab_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_figl_1940
		}
		#create_country_leader = {
		#	name = "Leopold Figl"
		#	desc = "POLITICS_FIGL_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Leopold_Figl.png"
		#	expire = "1965.1.1"
		#	ideology = autdem_christian_democracy_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Leopold_Figl_hog_sco
	}
	else = {
		#create_country_leader = {
		#	name = "Karl Buresch"
		#	desc = "POLITICS_BURESCH_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Karl_Buresch.png"
		#	expire = "1965.1.1"
		#	ideology = autdem_christian_democracy_subtype
		#}
		set_country_flag = AUS_buresch_1940
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Karl_Buresch_hog_ade
	}
}

AUS_elect_VF_1940 = {
	if = {
		limit = {
			has_country_flag = AUS_dollfuss_1940
		}
		#create_country_leader = {
		#	name = "Engelbert Dollfuss"
		#	desc = "POLITICS_DOLLFUSS_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Engelbert_Dollfuss.png"
		#	expire = "1965.1.1"
		#	ideology = austropopulism_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Engelbert_Dollfuss_hog_pau
		set_country_leader_ideology = austropopulism_subtype
	}
	else_if = {
		limit = {
			has_country_flag = AUS_figl_1940
		}
		#create_country_leader = {
		#	name = "Leopold Figl"
		#	desc = "POLITICS_FIGL_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Leopold_Figl.png"
		#	expire = "1965.1.1"
		#	ideology = pataut_christian_democracy_subtype
		#}
		set_country_leader_ideology = pataut_christian_democracy_subtype
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Leopold_Figl_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_raab_1940
		}
		#create_country_leader = {
		#	name = "Julius Raab"
		#	desc = "POLITICS_RAAB_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Julius_Raab.png"
		#	expire = "1965.1.1"
		#	ideology = pataut_christian_democracy_subtype
		#}
		set_country_leader_ideology = pataut_christian_democracy_subtype
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Julius_Raab_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_tildy_1940
		}
		#create_country_leader = {
		#	name = "Zoltán Tildy"
		#	desc = "POLITICS_TILDY_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Zoltan_Tildy.png"
		#	expire = "1965.1.1"
		#	ideology = pataut_christian_democracy_subtype
		#}
		set_country_leader_ideology = pataut_christian_democracy_subtype
		custom_effect_tooltip = AUS_disable_hungarian_revolt
		set_global_flag = AUS_no_more_HUN_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = HUN_Zoltan_Tildy_hog_sco
	}
	else_if = {
		limit = {
			has_country_flag = AUS_tarnowski_1940
		}
		#create_country_leader = {
		#	name = "Hieronim Tarnowski"
		#	desc = "POLITICS_TARNOWSKI_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Hieronim_Tarnowski.png"
		#	expire = "1965.1.1"
		#	ideology = austropopulism_subtype
		#}
		set_country_leader_ideology = austropopulism_subtype
		custom_effect_tooltip = AUS_no_more_galician_revolt
		set_global_flag = AUS_no_more_GAL_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = GAL_Hieronim_Tarnowski_hog_sco
	}
	else = {
		#create_country_leader = {
		#	name = "Engelbert Dollfuss"
		#	desc = "POLITICS_DOLLFUSS_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Engelbert_Dollfuss.png"
		#	expire = "1965.1.1"
		#	ideology = austropopulism_subtype
		#}
		set_country_leader_ideology = austropopulism_subtype
		set_country_flag = AUS_dollfuss_1940
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Engelbert_Dollfuss_hog_pau
	}
}

AUS_elect_SDAPO_1940 = {
	if = {
		limit = {
			has_country_flag = AUS_bauer_1940
		}
		#create_country_leader = {
		#	name = "Otto Bauer"
		#	desc = "POLITICS_BAUER_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Otto_Bauer.png"
		#	expire = "1965.1.1"
		#	ideology = radsoc_austromarxism_subtype
		#}
		set_country_leader_ideology = radsoc_austromarxism_subtype
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Otto_Bauer_hog_rso
	}
	if = {
		limit = {
			has_country_flag = AUS_scharf_1940
		}
		#create_country_leader = {
		#	name = "Adolf Scharf"
		#	desc = "POLITICS_SCHARF_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Adolf_Scharf.png"
		#	expire = "1965.1.1"
		#	ideology = austromarxism_subtype
		#}
		set_country_leader_ideology = austromarxism_subtype
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Adolf_Schaerf_hog_sde
	}
	else_if = {
		limit = {
			has_country_flag = AUS_seitz_1940
		}
		#create_country_leader = {
		#	name = "Karl Seitz"
		#	desc = "POLITICS_SEITZ_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Karl_Seitz.png"
		#	expire = "1965.1.1"
		#	ideology = austromarxism_subtype
		#}
		set_country_leader_ideology = austromarxism_subtype
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Karl_Seitz_hog_sde
	}
	else_if = {
		limit = {
			has_country_flag = AUS_broz_1940
		}
		#create_country_leader = {
		#	name = "Josip Broz"
		#	desc = "POLITICS_BROZ_AUS_DESC"
		#	picture = "gfx/leaders/CRO/CRO_tito.png"
		#	expire = "1965.1.1"
		#	ideology = austromarxism_subtype
		#}
		set_country_leader_ideology = austromarxism_subtype
		custom_effect_tooltip = AUS_no_more_illyrian_revolt
		set_global_flag = AUS_no_more_CRO_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = CRO_Josip_Broz_hog_sde
	}
	else_if = {
		limit = {
			has_country_flag = AUS_hampl_1940
		}
		#create_country_leader = {
		#	name = "Antonín Hampl"
		#	desc = "POLITICS_HAMPL_DESC"
		#	picture = "gfx/leaders/CZE/CZE_Antonin_Hampl.png"
		#	expire = "1965.1.1"
		#	ideology = social_democrat_subtype
		#}
		set_country_leader_ideology = social_democrat_subtype
		custom_effect_tooltip = AUS_no_more_bohemian_revolt
		set_global_flag = AUS_no_more_CZE_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = CZE_Antonin_Hampl_hog_sde
	}
	else = {
		set_country_flag = AUS_renner_1940
		#create_country_leader = {
		#	name = "Karl Renner"
		#	desc = "POLITICS_RENNER_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Karl_Renner.png"
		#	expire = "1965.1.1"
		#	ideology = austromarxism_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Karl_Renner_hog_sde
	}
}

AUS_elect_DBP_1940 = {
	if = {
		limit = {
			has_country_flag = AUS_masaryk_1940
		}
		#create_country_leader = {
		#	name = "Jan Masaryk"
		#	desc = "POLITICS_JAN_MASARYK_DESC"
		#	picture = "gfx/leaders/CZE/CZE_Jan_Masaryk.png"
		#	expire = "1965.1.1"
		#	ideology = national_socialism_subtype
		#}
		custom_effect_tooltip = AUS_no_more_bohemian_revolt
		set_global_flag = AUS_no_more_CZE_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Jan_Garrigue_Masaryk_hog_mli
	}
	else_if = {
		limit = {
			has_country_flag = AUS_krzyzanowski_1940
		}
		#create_country_leader = {
		#	name = "Adam Krzyzanowski"
		#	desc = "POLITICS_KRZYZANOWSKI_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Adam_Krzyzanowski.png"
		#	expire = "1965.1.1"
		#	ideology = social_liberal_subtype
		#}
		custom_effect_tooltip = AUS_disable_galician_revolt
		set_global_flag = AUS_no_more_GAL_revolt
		remove_ideas_with_trait = head_of_government
		add_ideas = GAL_Adam_Krzyzanowski_hog_mli
	}
	else = {
		set_country_flag = AUS_kalergi_1940
		#create_country_leader = {
		#	name = "Richard von Coudenhove-Kalergi"
		#	desc = "POLITICS_KALERGI_DESC"
		#	picture = "gfx/leaders/AUS/AUS_Richard_Kalergi.png"
		#	expire = "1965.1.1"
		#	ideology = paneuropeanism_subtype
		#}
		remove_ideas_with_trait = head_of_government
		add_ideas = AUS_Richard_von_Coudenhove-Kalergi_hog_sli
	}
}

AUS_raise_austro_german_tensions = {
	custom_effect_tooltip = AUS_tro_german_tensions_rise
	add_to_variable = { global.austro_german_tensions = 1 }
	if = {
		limit = {
			check_variable = { global.austro_german_tensions > 2 }
		}
		AUS = {
			country_event = {
				id = bdeausfor.52
				days = 14
				random = 144
			}
		}
		GER = {
			country_event = {
				id = bdeausfor.52
				days = 14
				random = 144
			}
		}
	}
}

AUS_lower_austro_german_tensions = {
	add_to_variable = { global.austro_german_tensions = -1 }
}

AUS_add_one_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}

AUS_add_two_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
AUS_add_three_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
AUS_add_five_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
AUS_add_ten_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_subtract_one_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.01 }
		BOTDE_add_collapse = yes
	}
}
AUS_subtract_two_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.02 }
		BOTDE_add_collapse = yes
	}
}
AUS_subtract_three_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}
AUS_subtract_five_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.05 }
		BOTDE_add_collapse = yes
	}
}
AUS_subtract_eight_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.08 }
		BOTDE_add_collapse = yes
	}
}
AUS_subtract_ten_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.1 }
		BOTDE_add_collapse = yes
	}
}
AUS_subtract_twenty_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = -0.2 }
		BOTDE_add_collapse = yes
	}
}
AUS_add_100_collapse = {
	AUS = { 
		set_temp_variable = { revolt_progress_change = 1 }
		BOTDE_add_collapse = yes
	}
}

FROM_add_one_collapse = {
	FROM = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
FROM_add_two_collapse = {
	FROM = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
FROM_add_three_collapse = {
	FROM = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
FROM_add_five_collapse = {
	FROM = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
FROM_add_ten_collapse = {
	FROM = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}

ROOT_add_one_collapse = {
	ROOT = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
ROOT_add_two_collapse = {
	ROOT = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
ROOT_add_three_collapse = {
	ROOT = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
ROOT_add_five_collapse = {
	ROOT = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
ROOT_add_ten_collapse = {
	ROOT = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}

ROOT_subtract_three_collapse = {
	ROOT = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}



THIS_add_one_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
THIS_add_two_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
THIS_add_three_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
THIS_add_five_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
THIS_add_eight_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = 0.08 }
		BOTDE_add_collapse = yes
	}
}
THIS_add_ten_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}

THIS_subtract_three_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}

THIS_subtract_five_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.05 }
		BOTDE_add_collapse = yes
	}
}

THIS_subtract_eight_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.08 }
		BOTDE_add_collapse = yes
	}
}

THIS_subtract_ten_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.10 }
		BOTDE_add_collapse = yes
	}
}

THIS_subtract_fifteen_collapse = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.15 }
		BOTDE_add_collapse = yes
	}
}











HUN_subtract_one_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = -0.01 }
		BOTDE_add_collapse = yes
	}
}
HUN_subtract_two_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = -0.02 }
		BOTDE_add_collapse = yes
	}
}
HUN_subtract_three_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}
HUN_subtract_five_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = -0.05 }
		BOTDE_add_collapse = yes
	}
}
HUN_subtract_ten_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = -0.10 }
		BOTDE_add_collapse = yes
	}
}
HUN_subtract_fifteen_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = -0.15 }
		BOTDE_add_collapse = yes
	}
}

CRO_subtract_one_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = -0.01 }
		BOTDE_add_collapse = yes
	}
}
CRO_subtract_two_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = -0.02 }
		BOTDE_add_collapse = yes
	}
}
CRO_subtract_three_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}
CRO_subtract_five_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = -0.05 }
		BOTDE_add_collapse = yes
	}
}
CRO_subtract_ten_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = -0.10 }
		BOTDE_add_collapse = yes
	}
}

CZE_subtract_one_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = -0.01 }
		BOTDE_add_collapse = yes
	}
}
CZE_subtract_two_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = -0.02 }
		BOTDE_add_collapse = yes
	}
}
CZE_subtract_three_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}
CZE_subtract_five_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = -0.05 }
		BOTDE_add_collapse = yes
	}
}
CZE_subtract_ten_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = -0.10 }
		BOTDE_add_collapse = yes
	}
}

GAL_subtract_one_collapse = {	
	GAL = { 
		set_temp_variable = { revolt_progress_change = -0.01 }
		BOTDE_add_collapse = yes
	}
}
GAL_subtract_two_collapse = {	
	GAL = { 
		set_temp_variable = { revolt_progress_change = -0.02 }
		BOTDE_add_collapse = yes
	}
}
GAL_subtract_three_collapse = {	
	GAL = { 
		set_temp_variable = { revolt_progress_change = -0.03 }
		BOTDE_add_collapse = yes
	}
}
GAL_subtract_five_collapse = {	
	GAL = { 
		set_temp_variable = { revolt_progress_change = -0.05 }
		BOTDE_add_collapse = yes
	}
}
GAL_subtract_ten_collapse = {	
	GAL = { 
		set_temp_variable = { revolt_progress_change = -0.10 }
		BOTDE_add_collapse = yes
	}
}
GAL_subtract_fifteen_collapse = {	
	GAL = { 
		set_temp_variable = { revolt_progress_change = -0.15 }
		BOTDE_add_collapse = yes
	}
}

ALL_subtract_three_collapse = {
	custom_effect_tooltip = collapse_all_three_minus
	hidden_effect = {
		HUN_subtract_three_collapse = yes
		CZE_subtract_three_collapse = yes
		CRO_subtract_three_collapse = yes
		GAL_subtract_three_collapse = yes
	}
}
ALL_add_one_collapse = {
	custom_effect_tooltip = collapse_all_one_plus
	hidden_effect = {
		HUN_add_one_collapse = yes
		CZE_add_one_collapse = yes
		CRO_add_one_collapse = yes
		GAL_add_one_collapse = yes
	}
}
ALL_add_two_collapse = {
	custom_effect_tooltip = collapse_all_two_plus
	hidden_effect = {
		HUN_add_two_collapse = yes
		CZE_add_two_collapse = yes
		CRO_add_two_collapse = yes
		GAL_add_two_collapse = yes
	}
}
ALL_add_three_collapse = {
	custom_effect_tooltip = collapse_all_three_plus
	hidden_effect = {
		HUN_add_three_collapse = yes
		CZE_add_three_collapse = yes
		CRO_add_three_collapse = yes
		GAL_add_three_collapse = yes
	}
}
ALL_subtract_five_collapse = {
	custom_effect_tooltip = collapse_all_five_minus
	hidden_effect = {
		HUN_subtract_five_collapse = yes
		CZE_subtract_five_collapse = yes
		CRO_subtract_five_collapse = yes
		GAL_subtract_five_collapse = yes
	}
}
ALL_add_five_collapse = {
	custom_effect_tooltip = collapse_all_five_plus
	hidden_effect = {
		HUN_add_five_collapse = yes
		CZE_add_five_collapse = yes
		CRO_add_five_collapse = yes
		GAL_add_five_collapse = yes
	}
}
ALL_add_ten_collapse = {
	custom_effect_tooltip = collapse_all_ten_plus
	hidden_effect = {
		HUN_add_ten_collapse = yes
		CZE_add_ten_collapse = yes
		CRO_add_ten_collapse = yes
		GAL_add_ten_collapse = yes
	}
}
ALL_subtract_ten_collapse = {
	custom_effect_tooltip = collapse_all_ten_minus
	hidden_effect = {
		HUN_subtract_ten_collapse = yes
		CZE_subtract_ten_collapse = yes
		CRO_subtract_ten_collapse = yes
		GAL_subtract_ten_collapse = yes
	}
}




#### Add constituent revolt ####

#requires temp variable revolt_progress_change
#is scoped to country i.e 
# HUN = { 
#	set_temp_variable = { revolt_progress_change = 0.01 }
#	BOTDE_change_collapse = yes
#}

BOTDE_add_collapse = {
	if = {
		limit = { tag = AUS }
		custom_effect_tooltip = BOTDE_collapse_AUS_tt
	}
	else = {
		custom_effect_tooltip = BOTDE_collapse_THIS_tt
	}
	add_to_variable = { THIS.subject_revolt_progress = revolt_progress_change }
	clamp_variable = {
		var = THIS.subject_revolt_progress
		min = 0
		max = 1
	}
	BOTDE_check_for_constituent_revolt = yes
}

BOTDE_check_for_constituent_revolt = {
	if = {
		limit = {
			OR = {
				check_variable = { THIS.subject_revolt_progress = 1 }
				check_variable = { THIS.subject_revolt_progress > 1 }
			}
		}
		if = {
			limit = { tag = HUN }
			country_event = revolt.1
		}
		else_if = {
			limit = { tag = CRO }
			country_event = revolt.2
		}
		else_if = {
			limit = { tag = CZE }
			country_event = revolt.3
		}
		else_if = {
			limit = { tag = GAL }
			country_event = revolt.4
		}
	}
}

HUN_add_one_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
HUN_add_two_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
HUN_add_three_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
HUN_add_five_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
HUN_add_ten_collapse = {
	HUN = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}

CRO_add_one_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
CRO_add_two_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
CRO_add_three_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
CRO_add_five_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
CRO_add_ten_collapse = {
	CRO = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}

CZE_add_one_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
CZE_add_two_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
CZE_add_three_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
CZE_add_five_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
CZE_add_ten_collapse = {
	CZE = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}

GAL_add_one_collapse = {
	GAL = { 
		set_temp_variable = { revolt_progress_change = 0.01 }
		BOTDE_add_collapse = yes
	}
}
GAL_add_two_collapse = {
	GAL = { 
		set_temp_variable = { revolt_progress_change = 0.02 }
		BOTDE_add_collapse = yes
	}
}
GAL_add_three_collapse = {
	GAL = { 
		set_temp_variable = { revolt_progress_change = 0.03 }
		BOTDE_add_collapse = yes
	}
}
GAL_add_five_collapse = {
	GAL = { 
		set_temp_variable = { revolt_progress_change = 0.05 }
		BOTDE_add_collapse = yes
	}
}
GAL_add_eight_collapse = {
	GAL = { 
		set_temp_variable = { revolt_progress_change = 0.08 }
		BOTDE_add_collapse = yes
	}
}
GAL_add_ten_collapse = {
	GAL = { 
		set_temp_variable = { revolt_progress_change = 0.10 }
		BOTDE_add_collapse = yes
	}
}



AUS_raise_govt_percentage_1 = {
	custom_effect_tooltip = govt_raise_1
	add_to_variable = { global.government_percentage = 0.01 }
	clamp_variable = { var = global.government_percentage min = 0 max = 1 }
	set_temp_variable = { constituent_federalizing_temp = global.government_percentage }
	divide_temp_variable = { constituent_federalizing_temp = 2 }
	
	set_variable = { global.constituent_federalizing = constituent_federalizing_temp }	
	divide_temp_variable = { constituent_federalizing_temp = 30 }
	
	set_variable = { global.extra_collapse_federalizing = constituent_federalizing_temp }
}

AUS_raise_govt_percentage_3 = {
	custom_effect_tooltip = govt_raise_3
	add_to_variable = {
		var = AUS.government_percentage
		value = 0.03
	}
	clamp_variable = {
		var = AUS.government_percentage
		min = 0
		max = 1
	}
}

AUS_raise_govt_percentage_5 = {
	custom_effect_tooltip = govt_raise_5
	add_to_variable = {
		var = AUS.government_percentage
		value = 0.05
	}
	clamp_variable = {
		var = AUS.government_percentage
		min = 0
		max = 1
	}
}

AUS_raise_govt_percentage_15 = {
	custom_effect_tooltip = govt_raise_15
	add_to_variable = {
		var = AUS.government_percentage
		value = 0.15
	}
	clamp_variable = {
		var = AUS.government_percentage
		min = 0
		max = 1
	}
}

AUS_minority_subtract_ten = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.10 }
		BOTDE_add_collapse = yes
	}
}

AUS_minority_subtract_twenty = {
	THIS = { 
		set_temp_variable = { revolt_progress_change = -0.20 }
		BOTDE_add_collapse = yes
	}
}




AUS_do_cultural_festivity_thing = {
	if = {
		limit = {
			FROM = {
				state = 1123
			}
		}
		SVK = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1140
			}
		}
		WSU = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1116
			}
		}
		TRS = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 80
			}
		}
		BUK = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1114
			}
		}
		BAN = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 104
			}
		}
		BOS = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1142
			}
		}
		SKS = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 783
			}
		}
		VNC = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1103
			}
		}
		SLO = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1119
			}
		}
		CPU = {
			set_temp_variable = { revolt_progress_change = -0.15 }
			BOTDE_add_collapse = yes
		}
	}
}

CONST_do_cultural_festivity_thing = {
	if = {
		limit = {
			FROM = {
				state = 1123
			}
		}
		SVK = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1140
			}
		}
		WSU = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1116
			}
		}
		TRS = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 80
			}
		}
		BUK = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1114
			}
		}
		BAN = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 104
			}
		}
		BOS = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1142
			}
		}
		SKS = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 783
			}
		}
		VNC = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1103
			}
		}
		SLO = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
	else_if = {
		limit = {
			FROM = {
				state = 1119
			}
		}
		CPU = {
			set_temp_variable = { revolt_progress_change = -0.075 }
			BOTDE_add_collapse = yes
		}
	}
}

AUS_raise_vienna_tenseness = {
	custom_effect_tooltip = BOTDE_vienna_tenseness_raised
	add_to_variable = { AUS.paramiliary_tenseness = 1 }
}

AUS_change_paramilitary_schutzbund = {
	custom_effect_tooltip = BOTDE_schutzbund_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = AUS_schutzbund_presence
		}
		add_to_variable = { AUS.schutzbund_presence = 1 }
		clr_state_flag = AUS_sturmscharen
		clr_state_flag = AUS_heimwehr
		set_state_flag = AUS_schutzbund
		clr_state_flag = AUS_frontfighters
		clr_state_flag = AUS_ordo_novi_templi
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_frontfighters_presence
				}
			}
			subtract_from_variable = { AUS.frontfighters_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_frontfighters_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ostmarkische_sturmscharen_presence
				}
			}
			subtract_from_variable = { AUS.sturmscharen_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ostmarkische_sturmscharen_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_heimwehr_presence
				}
			}
			subtract_from_variable = { AUS.heimwehr_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_heimwehr_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ordo_novi_templi_presence
				}
			}
			subtract_from_variable = { AUS.ordo_novi_templi_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ordo_novi_templi_presence }
		}
	}
}

AUS_change_paramilitary_heimwehr = {
	custom_effect_tooltip = BOTDE_heimwehr_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = AUS_heimwehr_presence
		}
		add_to_variable = { AUS.heimwehr_presence = 1 }
		clr_state_flag = AUS_sturmscharen
		set_state_flag = AUS_heimwehr
		clr_state_flag = AUS_schutzbund
		clr_state_flag = AUS_frontfighters
		clr_state_flag = AUS_ordo_novi_templi
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_schutzbund_presence
				}
			}
			subtract_from_variable = { AUS.schutzbund_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_schutzbund_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ostmarkische_sturmscharen_presence
				}
			}
			subtract_from_variable = { AUS.sturmscharen_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ostmarkische_sturmscharen_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_frontfighters_presence
				}
			}
			subtract_from_variable = { AUS.frontfighters_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_frontfighters_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ordo_novi_templi_presence
				}
			}
			subtract_from_variable = { AUS.ordo_novi_templi_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ordo_novi_templi_presence }
		}
	}
}

AUS_change_paramilitary_ont = {
	custom_effect_tooltip = BOTDE_ont_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = AUS_ordo_novi_templi_presence
		}
		add_to_variable = { AUS.ordo_novi_templi_presence = 1 }
		clr_state_flag = AUS_sturmscharen
		clr_state_flag = AUS_heimwehr
		clr_state_flag = AUS_schutzbund
		clr_state_flag = AUS_frontfighters
		set_state_flag = AUS_ordo_novi_templi
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_schutzbund_presence
				}
			}
			subtract_from_variable = { AUS.schutzbund_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_schutzbund_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ostmarkische_sturmscharen_presence
				}
			}
			subtract_from_variable = { AUS.sturmscharen_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ostmarkische_sturmscharen_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_heimwehr_presence
				}
			}
			subtract_from_variable = { AUS.heimwehr_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_heimwehr_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_frontfighters_presence
				}
			}
			subtract_from_variable = { AUS.frontfighters_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_frontfighters_presence } 
		}
	}
}

AUS_change_paramilitary_sturmscharen = {
	custom_effect_tooltip = BOTDE_sturmscharen_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = AUS_ostmarkische_sturmscharen_presence
		}
		add_to_variable = { AUS.sturmscharen_presence = 1 }
		set_state_flag = AUS_sturmscharen
		clr_state_flag = AUS_heimwehr
		clr_state_flag = AUS_schutzbund
		clr_state_flag = AUS_frontfighters
		clr_state_flag = AUS_ordo_novi_templi
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_schutzbund_presence
				}
			}
			subtract_from_variable = { AUS.schutzbund_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_schutzbund_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_frontfighters_presence
				}
			}
			subtract_from_variable = { AUS.frontfighters_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_frontfighters_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_heimwehr_presence
				}
			}
			subtract_from_variable = { AUS.heimwehr_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_heimwehr_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ordo_novi_templi_presence
				}
			}
			subtract_from_variable = { AUS.ordo_novi_templi_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ordo_novi_templi_presence }
		}
	}
}

AUS_change_paramilitary_frontfighters = {
	custom_effect_tooltip = BOTDE_frontfighters_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = AUS_frontfighters_presence
		}
		add_to_variable = { AUS.frontfighters_presence = 1 }
		clr_state_flag = AUS_sturmscharen
		clr_state_flag = AUS_heimwehr
		clr_state_flag = AUS_schutzbund
		set_state_flag = AUS_frontfighters
		clr_state_flag = AUS_ordo_novi_templi
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_schutzbund_presence
				}
			}
			subtract_from_variable = { AUS.schutzbund_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_schutzbund_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ostmarkische_sturmscharen_presence
				}
			}
			subtract_from_variable = { AUS.sturmscharen_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ostmarkische_sturmscharen_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_heimwehr_presence
				}
			}
			subtract_from_variable = { AUS.heimwehr_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_heimwehr_presence } 
		}
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = AUS_ordo_novi_templi_presence
				}
			}
			subtract_from_variable = { AUS.ordo_novi_templi_presence = 1 }
			remove_dynamic_modifier = { modifier = AUS_ordo_novi_templi_presence }
		}
	}
}

AUS_paramilitary_result = {
	if = {
		limit = {
			has_country_flag = AUS_belligerent_1_victory_flag
		}
		if = {
			limit = {
				OR = {
					AUS_heimwehr_v_schutzbund = yes
					AUS_heimwehr_v_frontfighters = yes
					AUS_heimwehr_v_sturmscharen = yes
					AUS_heimwehr_v_ont = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_heimwehr = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_schutzbund_v_heimwehr = yes
					AUS_schutzbund_v_frontfighters = yes
					AUS_schutzbund_v_sturmscharen = yes
					AUS_schutzbund_v_ont = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_schutzbund = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_frontfighters_v_heimwehr = yes
					AUS_frontfighters_v_schutzbund = yes
					AUS_frontfighters_v_sturmscharen = yes
					AUS_frontfighters_v_ont = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_frontfighters = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_sturmscharen_v_heimwehr = yes
					AUS_sturmscharen_v_frontfighters = yes
					AUS_sturmscharen_v_schutzbund = yes
					AUS_sturmscharen_v_ont = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_sturmscharen = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_ont_v_heimwehr = yes
					AUS_ont_v_frontfighters = yes
					AUS_ont_v_sturmscharen = yes
					AUS_ont_v_schutzbund = yes 
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_ont = yes
			}
		}
	}
	if = {
		limit = {
			has_country_flag = AUS_belligerent_2_victory_flag
		}
		if = {
			limit = {
				OR = {
					AUS_schutzbund_v_heimwehr = yes
					AUS_frontfighters_v_heimwehr = yes
					AUS_sturmscharen_v_heimwehr = yes
					AUS_ont_v_heimwehr = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_heimwehr = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_heimwehr_v_schutzbund = yes
					AUS_frontfighters_v_schutzbund = yes
					AUS_sturmscharen_v_schutzbund = yes
					AUS_ont_v_schutzbund = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_schutzbund = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_schutzbund_v_frontfighters = yes
					AUS_heimwehr_v_frontfighters = yes
					AUS_sturmscharen_v_frontfighters = yes
					AUS_ont_v_frontfighters = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_frontfighters = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_schutzbund_v_sturmscharen = yes
					AUS_frontfighters_v_sturmscharen = yes
					AUS_heimwehr_v_sturmscharen = yes
					AUS_ont_v_sturmscharen = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_sturmscharen = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					AUS_schutzbund_v_ont = yes
					AUS_frontfighters_v_ont = yes
					AUS_sturmscharen_v_ont = yes
					AUS_heimwehr_v_ont = yes
				}
			}
			every_owned_state = {
				limit = {
					has_state_flag = BOTDE_paramilitary_target_state
				}
				AUS_change_paramilitary_ont = yes
			}
		}
	}
}

THIS_add_minority_paramilitary = {
	if = {
		limit = {
			is_core_of = SLO
		}
		custom_effect_tooltip = BOTDE_slovene_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = AUS_slovene_home_guard_presence
			}
			add_to_variable = { SLO.paramilitary_value = 1 }
			set_state_flag = AUS_slovene_home_guard
		}
	}
	else_if = {
		limit = {
			is_core_of = WSU
		}
		custom_effect_tooltip = BOTDE_ukrainian_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = GAL_UVO_presence
			}
			add_to_variable = { WSU.paramilitary_value = 1 }
			set_state_flag = GAL_UVO
		}
	}
	else_if = {
		limit = {
			is_core_of = BOS
		}
		custom_effect_tooltip = BOTDE_bosniak_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = CRO_green_cadres_presence
			}
			add_to_variable = { BOS.paramilitary_value = 1 }
			set_state_flag = BOS_green_cadres
		}
	}
	else_if = {
		limit = {
			is_core_of = PGU
		}
		custom_effect_tooltip = BOTDE_deutschbohmen_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = CZE_DBH_presence
			}
			add_to_variable = { PGU.paramilitary_value = 1 }
			set_state_flag = CZE_DBH
		}
	}
	else_if = {
		limit = {
			is_core_of = CPU
		}
		custom_effect_tooltip = BOTDE_ruthenian_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = HUN_carpathian_sich_presence
			}
			add_to_variable = { CPU.paramilitary_value = 1 }
			set_state_flag = HUN_carpathian_sich
		}
	}
	else_if = {
		limit = {
			is_core_of = TRS
		}
		custom_effect_tooltip = BOTDE_transylvania_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = HUN_cross_brotherhood_presence
			}
			add_to_variable = { TRS.paramilitary_value = 1 }
			set_state_flag = HUN_cross_brotherhood
		}
	}
	else_if = {
		limit = {
			is_core_of = SVK
		}
		custom_effect_tooltip = BOTDE_slovak_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = HUN_tatra_army_presence
			}
			add_to_variable = { SVK.paramilitary_value = 1 }
			set_state_flag = HUN_tatra_army
		}
	}
	else_if = {
		limit = {
			is_core_of = SKS
		}
		custom_effect_tooltip = BOTDE_serbian_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = CRO_chetnik_presence
			}
			add_to_variable = { SKS.paramilitary_value = 1 }
			set_state_flag = CRO_chetniks
		}
	}
	else_if = {
		limit = {
			is_core_of = BUK
			NOT = {
				is_core_of = WSU
			}
		}
		custom_effect_tooltip = BOTDE_bukovina_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = GAL_lancieri_presence
			}
			add_to_variable = { BUK.paramilitary_value = 1 }
			set_state_flag = GAL_lancieri
		}
	}
	else_if = {
		limit = {
			is_core_of = BAN
			NOT = {
				is_core_of = TRS
			}
		}
		custom_effect_tooltip = BOTDE_banatian_paramilitary_takes_here
		hidden_effect = {
			add_dynamic_modifier = {
				modifier = HUN_indrazneti_presence
			}
			add_to_variable = { BAN.paramilitary_value = 1 }
			set_state_flag = HUN_indrazneti
		}
	}
}

AUS_change_minority_paramilitary_slovene = {
	custom_effect_tooltip = BOTDE_slovene_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = AUS_slovene_home_guard_presence
		}
		add_to_variable = { SLO.paramilitary_value = 1 }
		set_state_flag = AUS_slovene_home_guard
	}
}

AUS_change_minority_paramilitary_ukrainian = {
	custom_effect_tooltip = BOTDE_ukrainian_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = GAL_UVO_presence
		}
		add_to_variable = { WSU.paramilitary_value = 1 }
		set_state_flag = GAL_UVO
	}
}

AUS_change_minority_paramilitary_serbian = {
	custom_effect_tooltip = BOTDE_serbian_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = CRO_chetnik_presence
		}
		add_to_variable = { SKS.paramilitary_value = 1 }
		set_state_flag = CRO_chetniks
	}
}

AUS_change_minority_paramilitary_bosniak = {
	custom_effect_tooltip = BOTDE_bosniak_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = CRO_green_cadres_presence
		}
		add_to_variable = { BOS.paramilitary_value = 1 }
		set_state_flag = BOS_green_cadres
	}
}

AUS_change_minority_paramilitary_deutschbohmen = {
	custom_effect_tooltip = BOTDE_deutschbohmen_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = CZE_DBH_presence
		}
		add_to_variable = { PGU.paramilitary_value = 1 }
		set_state_flag = CZE_DBH
	}
}

AUS_change_minority_paramilitary_ruthenian = {
	custom_effect_tooltip = BOTDE_ruthenian_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = HUN_carpathian_sich_presence
		}
		add_to_variable = { CPU.paramilitary_value = 1 }
		set_state_flag = HUN_carpathian_sich
	}
}

AUS_change_minority_paramilitary_transylvanian = {
	custom_effect_tooltip = BOTDE_transylvania_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = HUN_cross_brotherhood_presence
		}
		add_to_variable = { TRS.paramilitary_value = 1 }
		set_state_flag = HUN_cross_brotherhood
	}
}

AUS_change_minority_paramilitary_banatian = {
	custom_effect_tooltip = BOTDE_banatian_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = HUN_indrazneti_presence
		}
		add_to_variable = { BAN.paramilitary_value = 1 }
		set_state_flag = HUN_indrazneti
	}
}

AUS_change_minority_paramilitary_bukovinian = {
	custom_effect_tooltip = BOTDE_bukovina_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = GAL_lancieri_presence
		}
		add_to_variable = { BUK.paramilitary_value = 1 }
		set_state_flag = GAL_lancieri
	}
}

AUS_change_minority_paramilitary_slovak = {
	custom_effect_tooltip = BOTDE_slovak_paramilitary_takes_here
	hidden_effect = {
		add_dynamic_modifier = {
			modifier = HUN_tatra_army_presence
		}
		add_to_variable = { SVK.paramilitary_value = 1 }
		set_state_flag = HUN_tatra_army
	}
}

AUS_remove_minority_paramilitary = {
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = AUS_slovene_home_guard_presence
			}
		}
		subtract_from_variable = { SLO.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = AUS_slovene_home_guard_presence }
		clr_state_flag = AUS_slovene_home_guard
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = GAL_UVO_presence
			}
		}
		subtract_from_variable = { WSU.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = GAL_UVO_presence }
		clr_state_flag = GAL_UVO
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = CRO_chetnik_presence
			}
		}
		subtract_from_variable = { SKS.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = CRO_chetnik_presence }
		clr_state_flag = CRO_chetniks
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = CRO_green_cadres_presence
			}
		}
		subtract_from_variable = { BOS.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = CRO_green_cadres_presence }
		clr_state_flag = CRO_green_cadres
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = CZE_DBH_presence
			}
		}
		subtract_from_variable = { PGU.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = CZE_DBH_presence }
		clr_state_flag = CZE_DBH
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = HUN_carpathian_sich_presence
			}
		}
		subtract_from_variable = { CPU.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = HUN_carpathian_sich_presence }
		clr_state_flag = HUN_carpathian_sich
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = HUN_tatra_army_presence
			}
		}
		subtract_from_variable = { SVK.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = HUN_tatra_army_presence }
		clr_state_flag = HUN_tatra_army
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = HUN_cross_brotherhood_presence
			}
		}
		subtract_from_variable = { TRS.paramilitary_value = 1 }
		remove_dynamic_modifier = { modifier = HUN_cross_brotherhood_presence }
		clr_state_flag = HUN_cross_brotherhood
	}
}
	
minority_paramilitary_gain_unrest = {
	if = {
		limit = {
			FROM = {
				is_core_of = SVK
			}
		}
		AUS_raise_slovaks = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = TRS
			}
		}
		AUS_raise_transylvanians = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = SLO
			}
		}
		AUS_raise_slovenes = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = BOS
			}
		}
		AUS_raise_bosnians = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = PGU
			}
		}
		AUS_raise_deutschbohmen = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = CPU
			}
		}
		AUS_raise_ruthenians = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = WSU
			}
		}
		AUS_raise_ukrainians = yes
	}
	
	if = {
		limit = {
			FROM = {
				is_core_of = SKS
			}
		}
		AUS_raise_serbians = yes
	}
}
	
AUS_remove_paramilitaries = {
	clr_state_flag = AUS_sturmscharen
	clr_state_flag = AUS_heimwehr
	clr_state_flag = AUS_schutzbund
	clr_state_flag = AUS_frontfighters
	clr_state_flag = AUS_ordo_novi_templi
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = AUS_schutzbund_presence
			}
		}
		subtract_from_variable = { AUS.schutzbund_presence = 1 }
		remove_dynamic_modifier = { modifier = AUS_schutzbund_presence } 
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = AUS_ostmarkische_sturmscharen_presence
			}
		}
		subtract_from_variable = { AUS.sturmscharen_presence = 1 }
		remove_dynamic_modifier = { modifier = AUS_ostmarkische_sturmscharen_presence } 
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = AUS_heimwehr_presence
			}
		}
		subtract_from_variable = { AUS.heimwehr_presence = 1 }
		remove_dynamic_modifier = { modifier = AUS_heimwehr_presence } 
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = AUS_ordo_novi_templi_presence
			}
		}
		subtract_from_variable = { AUS.ordo_novi_templi_presence = 1 }
		remove_dynamic_modifier = { modifier = AUS_ordo_novi_templi_presence }
	}
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = AUS_frontfighters_presence
			}
		}
		subtract_from_variable = { AUS.frontfighters_presence = 1 }
		remove_dynamic_modifier = { modifier = AUS_frontfighters_presence }
	}
}


AUS_add_to_DWV = {
	custom_effect_tooltip = THIS_JOINS_DWV
	add_to_array = {
		array = AUS.DWV_members
		value = THIS
	}
	add_to_variable = { global.DWV_members_var = 1 }
	if = {
		limit = {
			has_global_flag = DWV_upgrade_5
		}
		add_ideas = AUS_DWV_5
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_4
		}
		add_ideas = AUS_DWV_4
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_
		}
		add_ideas = AUS_DWV_3
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_2
		}
		add_ideas = AUS_DWV_2
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_1
		}
		add_ideas = AUS_DWV_1
	}
	else = {
		add_ideas = AUS_DWV
	}
}

AUS_remove_from_DWV = {
	custom_effect_tooltip = THIS_LEAVES_DWV
	remove_from_array = {
		array = AUS.DWV_members
		value = THIS
	}
	add_to_variable = { global.DWV_members_var = -1 }
	if = {
		limit = {
			has_global_flag = DWV_upgrade_5
		}
		remove_ideas = AUS_DWV_5
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_4
		}
		remove_ideas = AUS_DWV_4
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_3
		}
		remove_ideas = AUS_DWV_3
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_2
		}
		remove_ideas = AUS_DWV_2
	}
	else_if = {
		limit = {
			has_global_flag = DWV_upgrade_1
		}
		remove_ideas = AUS_DWV_1
	}
	else = {
		remove_ideas = AUS_DWV
	}
}

EUU_add_to_EU = {
	custom_effect_tooltip = THIS_JOINS_EU
	add_to_array = {
		array = EUU.EUU_EU_members
		value = THIS
	}
	add_to_variable = {
		var = global.european_union_members
		value = 1
	}
	add_dynamic_modifier = {
		modifier = EUU_allocations
	}
}

EUU_remove_from_EU = {
	remove_from_array = {
		array = EUU.EUU_EU_members
		value = ROOT
	}
	subtract_from_variable = {
		var = global.european_union_members
		value = 1
	}
	set_variable = {
		var = THIS.extra_pp_allocation
		value = 0
	}
	remove_dynamic_modifier = {
		modifier = EUU_allocations
	}
}

EUU_find_half_calculation = {
	set_variable = {
		var = global.european_countries
		value = 0
	}
	every_country = {
		if = {
			limit = {
				capital_scope = {
					is_on_continent = europe
				}
				NOT = {
					tag = RUS
					tag = TUR
				}
			}
			add_to_variable = {
				var = global.european_countries
				value = 1
			}
		}
	}
	#Find half of that number
	set_temp_variable = { half_life = global.european_countries }
	divide_temp_variable = { half_life = 2 }
	set_variable = {
		var = global.half_of_euro_countries
		value = half_life
	}
}

EUU_find_third_calculation = {
	set_variable = {
		var = global.european_countries
		value = 0
	}
	every_country = {
		if = {
			limit = {
				capital_scope = {
					is_on_continent = europe
				}
				NOT = {
					tag = RUS
					tag = TUR
					tag = NSW
				}
			}
			add_to_variable = {
				var = global.european_countries
				value = 1
			}
		}
	}
	#Find half of that number
	set_temp_variable = { half_life_3 = global.european_countries }
	divide_temp_variable = { half_life_3 = 3 }
	set_variable = {
		var = global.third_of_euro_countries
		value = half_life_3
	}
}

EUU_get_pressure_gain = {
	set_variable = {
		var = global.EU_pressure_gain
		value = 0
	}
	set_variable = {
		var = global.EU_pressure_gain_monthly
		value = 0
	}
	every_country = {
		limit = {
			EUU_EU_member = yes
		}
		set_temp_variable = {
			var = local_pressure
			value = political_power_daily
		}
		set_temp_variable = { extra_pp_allocation = THIS.extra_pp_allocation }
		multiply_temp_variable = { extra_pp_allocation = 3 }
		add_to_variable = {
			var = global.EU_pressure_gain
			value = local_pressure
		}
		add_to_variable = {
			var = global.EU_pressure_gain
			value = extra_pp_allocation
		}
	}
	set_temp_variable = { weekly = global.EU_pressure_gain }
	multiply_temp_variable = { weekly = 7 }
	add_to_variable = {
		var = global.EU_pressure_gain_weekly
		value = weekly
	}
	set_temp_variable = { monthly = global.EU_pressure_gain }
	multiply_temp_variable = { monthly = 30 }
	add_to_variable = {
		var = global.EU_pressure_gain_monthly
		value = monthly
	}
}


EUU_calculate_army_factories = {
	set_variable = {
		var = global.EU_total_divisions_var
		value = 0
	}
	set_variable = {
		var = global.EU_total_battalions_var
		value = 0
	}
	set_variable = {
		var = global.EU_total_factories_var
		value = 0
	}
	set_variable = {
		var = global.EU_total_dockyards
		value = 0
	}
	set_variable = {
		var = global.EU_total_mils
		value = 0
	}
	set_variable = {
		var = global.EU_total_civs
		value = 0
	}
	every_country = {
		limit = {
			EUU_EU_member = yes
		}
		add_to_variable = {
			var = global.EU_total_divisions_var
			value = num_divisions
		}
		add_to_variable = {
			var = global.EU_total_battalions_var
			value = num_battalions
		}
		add_to_variable = {
			var = global.EU_total_factories_var
			value = num_of_factories
		}
		add_to_variable = {
			var = global.EU_total_dockyards
			value = num_of_naval_factories
		}
		add_to_variable = {
			var = global.EU_total_mils
			value = num_of_military_factories
		}
		add_to_variable = {
			var = global.EU_total_civs
			value = num_of_civilian_factories
		}
		
	}
}

EUU_add_pressure_from_gain = {
	add_to_variable = {
		var = global.EU_pressure_value
		value = global.EU_pressure_gain
	}
}

EUU_add_pressure_from_gain_week = {
	set_temp_variable = { weekly = global.EU_pressure_gain }
	multiply_temp_variable = { weekly = 7 }
	if = {
		limit = {
			has_global_flag = EUU_federalized
		}
		multiply_temp_variable = { weekly = 5 }
	}
	add_to_variable = {
		var = global.EU_pressure_value
		value = weekly
	}
}


EUU_add_20_pressure_to_FROM = {
	custom_effect_tooltip = EUU_add_20_pressure
	add_to_variable = {
		var = FROM.EU_pressure
		value = 20
	}
	add_to_variable = {
		var = global.EU_pressure_value
		value = -20
	}
}

EUU_add_100_pressure_to_FROM = {
	custom_effect_tooltip = EUU_add_100_pressure
	add_to_variable = {
		var = FROM.EU_pressure
		value = 100
	}
	add_to_variable = {
		var = global.EU_pressure_value
		value = -100
	}
}

EUU_add_1000_pressure_to_FROM = {
	custom_effect_tooltip = EUU_add_1000_pressure
	add_to_variable = {
		var = FROM.EU_pressure
		value = 1000
	}
	add_to_variable = {
		var = global.EU_pressure_value
		value = -1000
	}
}

EUU_calculate_necessary_pressure = {
	set_temp_variable = { pressure_factories = num_of_factories	}
	set_temp_variable = { pressure_population = max_manpower_k }
	set_temp_variable = { pressure_army = num_battalions }
	set_temp_variable = { pressure_total = 0 }
	
	multiply_temp_variable = { pressure_factories = 10 }
	divide_temp_variable = { pressure_population = 15 }
	multiply_temp_variable = { pressure_army = 4 }
	
	add_to_temp_variable = { pressure_total = pressure_factories }
	add_to_temp_variable = { pressure_total = pressure_population }
	add_to_temp_variable = { pressure_total = pressure_army }
	
	
	capital_scope = {
		owner = {
			set_variable = {
				var = necessary_EU_pressure
				value = pressure_total
			}
		}
	}
}

EU_add_one_civ_to_total = {
	add_to_variable = { global.EUU_civ_allocation_total = 1 }
}

EU_remove_one_civ_to_total = {
	subtract_from_variable = { global.EUU_civ_allocation_total = 1 }
}

EU_faction_do_economic_integration = {
	set_temp_variable = { total_integration_civs_count = global.EUU_civ_allocation_total }
	set_temp_variable = { necessary_integration = global.european_union_members }
	set_temp_variable = { necessary_integration_total_factories = global.EU_total_factories_var }
	multiply_temp_variable = { necessary_integration = 200 }
	multiply_temp_variable = { necessary_integration_total_factories = 2 }
	add_to_temp_variable = { necessary_integration = necessary_integration_total_factories }
	
	
	
	multiply_temp_variable = { total_integration_civs_count = 1.5 }
	add_to_variable = {
		var = global.EU_economic_integration_flat
		value = total_integration_civs_count
	}
	set_temp_variable = { economic_percent_temp = global.EU_economic_integration_flat }
	multiply_temp_variable = { economic_percent_temp = 100 }
	divide_temp_variable = { economic_percent_temp = necessary_integration }
	divide_temp_variable = { economic_percent_temp = 10 }
	
	#Find percentage
	set_variable = {
		var = global.EU_economic_integration_percentage
		value = economic_percent_temp
	}
}

EU_faction_do_military_integration = {
	set_temp_variable = { total_integration_batts = global.EU_total_battalions_var }
	set_temp_variable = { army_xp_pooled = global.EU_army_xp_pool }
	multiply_temp_variable = { total_integration_batts = 10 }
	
	set_temp_variable = { army_percent_temp = army_xp_pooled }
	multiply_temp_variable = { army_percent_temp = 100 }
	divide_temp_variable = { army_percent_temp = total_integration_batts }
	divide_temp_variable = { army_percent_temp = 10 }
	
	#Find percentage
	set_variable = {
		var = global.EU_army_integration_percentage
		value = army_percent_temp
	}
}

EU_turn_DWV_into_EU = {
	every_country = {
		limit = {
			AUS_DWV_member = yes
			NOT = {
				has_country_flag = EU_FOUNDER
			}
		}
		country_event = {
			id = bdeeu.1
			days = 3
		}
	}
}



AUS_lower_slovenes = {
	SLO = { 
		set_temp_variable = { revolt_progress_change = -0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_lower_italians = {
	VNC = { 
		set_temp_variable = { revolt_progress_change = -0.1 }
		BOTDE_add_collapse = yes
	}
}





AUS_raise_slovenes_1 = {
	SLO = { 
		set_temp_variable = { revolt_progress_change = 0.15 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_slovenes_40 = {
	SLO = { 
		set_temp_variable = { revolt_progress_change = 0.40 }
		BOTDE_add_collapse = yes
	}
}
AUS_raise_italians_40 = {
	VNC = { 
		set_temp_variable = { revolt_progress_change = 0.40 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_italians_1 = {
	VNC = { 
		set_temp_variable = { revolt_progress_change = 0.15 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_ruthenians_2 = {
	CPU = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_deutschbohmen_2 = {
	PGU = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_slovenes_2 = {
	SLO = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_italians_2 = {
	VNC = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_transylvanians_2 = {
	TRS = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_ukrainians_2 = {
	WSU = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_serbians_2 = {
	SKS = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_ruthenians = {
	CPU = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_deutschbohmen = {
	PGU = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_slovenes = {
	SLO = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_italians = {
	VNC = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_transylvanians = {
	TRS = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_ukrainians = {
	WSU = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_serbians = {
	SKS = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_slovaks = {
	SVK = { 
		set_temp_variable = { revolt_progress_change = 0.1 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_slovaks_2 = {
	SVK = { 
		set_temp_variable = { revolt_progress_change = 0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_raise_bosnians = {
	BOS = { 
		set_temp_variable = { revolt_progress_change = 0.15 }
		BOTDE_add_collapse = yes
	}
}

AUS_subtract_bosnians_20 = {
	BOS = { 
		set_temp_variable = { revolt_progress_change = -0.2 }
		BOTDE_add_collapse = yes
	}
}

AUS_subtract_germboh_20 = {
	PGU = { 
		set_temp_variable = { revolt_progress_change = -0.2 }
		BOTDE_add_collapse = yes
	}
}



AUS_lower_all_minorities = {
	custom_effect_tooltip = collapse_all_one_minus
	hidden_effect = {
		SLO = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		VNC = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		SVK = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		TRS = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		BAN = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		BOS = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		SKS = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		MNT = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		BUK = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		WSU = { 
			set_temp_variable = { revolt_progress_change = -0.1 }
			BOTDE_add_collapse = yes
		}
		add_to_variable = { GAL.polish_unrest = -0.1 }
		clamp_variable = { var = GAL.polish_unrest min = 0 max = 1 }
	}
}



AUS_raise_all_minorities = {
	custom_effect_tooltip = collapse_all_one
	hidden_effect = {
		SLO = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		VNC = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		SVK = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		TRS = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		BAN = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		BOS = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		SKS = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		MNT = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		BUK = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		WSU = { 
			set_temp_variable = { revolt_progress_change = 0.15 }
			BOTDE_add_collapse = yes
		}
		add_to_variable = { GAL.polish_unrest = 0.15 }
		clamp_variable = { var = GAL.polish_unrest min = 0 max = 1 }
	}
}

AUS_reduce_military_penalty = {
	if = {
		limit = {
			has_idea = AUS_obsolete_military
		}
		swap_ideas = {
			remove_idea = AUS_obsolete_military
			add_idea = AUS_obsolete_military_2
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_obsolete_military_2
		}
		swap_ideas = {
			remove_idea = AUS_obsolete_military_2
			add_idea = AUS_obsolete_military_3
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_obsolete_military_3
		}
		swap_ideas = {
			remove_idea = AUS_obsolete_military_3
			add_idea = AUS_obsolete_military_4
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_obsolete_military_4
		}
		swap_ideas = {
			remove_idea = AUS_obsolete_military_4
			add_idea = AUS_obsolete_military_5
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_obsolete_military_4
		}
		swap_ideas = {
			remove_idea = AUS_obsolete_military_4
			add_idea = AUS_obsolete_military_5
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_obsolete_military_5
		}
		remove_ideas = AUS_obsolete_military_5
	}
}

AUS_reduce_collapse_idea = {
	if = {
		limit = {
			has_idea = AUS_legacy_of_collapse
		}
		swap_ideas = {
			remove_idea = AUS_legacy_of_collapse
			add_idea = AUS_legacy_of_collapse_2
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_legacy_of_collapse_2
		}
		swap_ideas = {
			remove_idea = AUS_legacy_of_collapse_2
			add_idea = AUS_legacy_of_collapse_3
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_legacy_of_collapse_3
		}
		swap_ideas = {
			remove_idea = AUS_legacy_of_collapse_3
			add_idea = AUS_legacy_of_collapse_4
		}
	}
	else_if = {
		limit = {
			has_idea = AUS_legacy_of_collapse_4
		}
		remove_ideas = AUS_legacy_of_collapse_4
		else = {
			custom_effect_tooltip = AUS_reduces_collapse
		}
	}
}


AUS_the_state_modifiers = {
	#hidden_effect = {
		every_owned_state = {
			limit = {
				OR = {
					is_core_of = HUN
					is_core_of = CRO
					is_core_of = CZE
					is_core_of = GAL
				}
			}
			add_dynamic_modifier = {
				modifier = AUS_recently_federalized_state
			}
		}
	#}
}

AUS_gleich_add_hungarian_grievance = {
	custom_effect_tooltip = AUS_gliech_hungarian_grievance
	add_to_variable = {
		var = HUN.ausgleich_grievances
		value = 1
	}
	hidden_effect = {
		if = {
			limit = {
				check_variable = {
					var = HUN.ausgleich_grievances
					value = 2
					compare = greater_than_or_equals
				}
			}
			AUS = {
				country_event = {
					id = bdeausgleich.55
					days = 2
					random = 120
				}
			}
			HUN = {
				country_event = {
					id = bdeausgleich.56
					days = 2
					random = 120
				}
			}
		}
		if = {
			limit = {
				check_variable = {
					var = HUN.ausgleich_grievances
					value = 3
					compare = greater_than_or_equals
				}
			}
			GER = {
				country_event = {
					id = bdeausgleich.57
					days = 2
					random = 120
				}
			}
		}
	}
}

AUS_gleich_add_illyrian_grievance = {
	custom_effect_tooltip = AUS_gliech_illyrian_grievance
	add_to_variable = {
		var = CRO.ausgleich_grievances
		value = 1
	}
}

AUS_gleich_add_bohemian_grievance = {
	custom_effect_tooltip = AUS_gliech_bohemian_grievance
	add_to_variable = {
		var = CZE.ausgleich_grievances
		value = 1
	}
}

AUS_gleich_add_galician_grievance = {
	custom_effect_tooltip = AUS_gliech_galician_grievance
	add_to_variable = {
		var = GAL.ausgleich_grievances
		value = 1
	}
}



AUS_gleich_remove_hungarian_grievance = {
	custom_effect_tooltip = AUS_gliech_hungarian_grievance
	add_to_variable = {
		var = HUN.ausgleich_grievances
		value = -1
	}
}

AUS_gleich_remove_illyrian_grievance = {
	custom_effect_tooltip = AUS_gliech_illyrian_grievance
	add_to_variable = {
		var = CRO.ausgleich_grievances
		value = -1
	}
}

AUS_gleich_remove_bohemian_grievance = {
	custom_effect_tooltip = AUS_gliech_bohemian_grievance
	add_to_variable = {
		var = CZE.ausgleich_grievances
		value = -1
	}
}

AUS_gleich_remove_galician_grievance = {
	custom_effect_tooltip = AUS_gliech_galician_grievance
	add_to_variable = {
		var = GAL.ausgleich_grievances
		value = -1
	}
}




AUS_gleich_add_hungarian_grievances = {
	custom_effect_tooltip = AUS_gliech_hungarian_grievances
	add_to_variable = {
		var = HUN.ausgleich_grievances
		value = 2
	}
}

AUS_gleich_add_illyrian_grievances = {
	custom_effect_tooltip = AUS_gliech_illyrian_grievances
	add_to_variable = {
		var = CRO.ausgleich_grievances
		value = 2
	}
}

AUS_gleich_add_bohemian_grievances = {
	custom_effect_tooltip = AUS_gliech_bohemian_grievances
	add_to_variable = {
		var = CZE.ausgleich_grievances
		value = 2
	}
}

AUS_gleich_add_galician_grievances = {
	custom_effect_tooltip = AUS_gliech_galician_grievances
	add_to_variable = {
		var = GAL.ausgleich_grievances
		value = 2
	}
}

AUS_gleich_add_turn_taker = { # 1 = AUS. 2 = HUN. 3 = CRO. 4 = CZE. 5 = GAL. 6 = MNT. 7 = FIU. 8 = VNC.
	if = {
		limit = {
			NOT = {
				has_global_flag = BOTDE_small_nations_ausgleich
			}
			check_variable = { ausgleich_turn = 5 }
		}
		set_variable = { ausgleich_turn = 0 }
		else = {
			if = {
				limit = {
					has_global_flag = BOTDE_small_nations_ausgleich
					check_variable = { ausgleich_turn = 8 }
				}
				set_variable = { ausgleich_turn = 0 }
			}
		}
	}
	add_to_variable = { ausgleich_turn = 1 }
	if = {
		limit = {
			NOT = {
				has_global_flag = BOTDE_small_nations_ausgleich
			}
		}
	}
}

CZE_do_revolt = {
	clear_all_relations = yes
	AUS = {
		country_event = revolt.7 #Notification
		every_owned_state = {
			limit = { is_core_of = CZE }
			transfer_state_to = CZE
		}
	}
	CZE = { 
		if = {
			limit = { AUS_DWV_member = yes }
			AUS_remove_from_DWV =  yes
		}
	}
	if = {
		limit = {
			CZE = {
				check_variable = { THIS.industrial_stuff_local > 0 }
			}
		}
		subtract_from_variable = { THIS.industrial_stuff_local = 1 }
	}
	hidden_effect = {
		set_global_flag = { flag = CZE_recent_revolt days = 720 value = 1 }
	}
}

CRO_do_revolt = {
	clear_all_relations = yes
	AUS = {
		country_event = revolt.6 #Notification
		every_owned_state = {
			limit = {
				is_core_of = CRO
			}
			transfer_state_to = CRO
		}
	}
	if = {
		limit = {
			CRO = {
				check_variable = {
					var = THIS.industrial_stuff_local
					value = 1
					compare = greater_than_or_equals
				}
			}
		}
		subtract_from_variable = {
			var = THIS.industrial_stuff_local
			value = 1
		}
	}
	if = {
		limit = {
			CRO = {
				AUS_DWV_member = yes
			}
		}
		AUS_remove_from_DWV =  yes
	}	
	hidden_effect = {
		set_global_flag = { flag = CRO_recent_revolt days = 720 value = 1 }
	}
}

HUN_do_revolt = {
	set_politics = {
		ruling_party = social_conservative
		elections_allowed = no
	}	
	add_popularity = {
		ideology = social_conservative
		popularity = 0.2
	}
	remove_ideas_with_trait = head_of_government
	add_ideas = HUN_Zoltan_Tildy_hog_sco
	clear_all_relations = yes
	AUS = {
		country_event = revolt.5 #Notification
		every_owned_state = {
			limit = {
				is_core_of = HUN
				NOT = {
					state = 784
				}
			}
			transfer_state_to = HUN
		}
	}
	if = {
		limit = {
			HUN = {
				check_variable = {
					var = THIS.industrial_stuff_local
					value = 1
					compare = greater_than_or_equals
				}
			}
		}
		subtract_from_variable = {
			var = THIS.industrial_stuff_local
			value = 1
		}
	}
	if = {
		limit = {
			HUN = {
				AUS_DWV_member = yes
			}
		}
		AUS_remove_from_DWV =  yes
	}
	hidden_effect = {
		set_global_flag = { flag = HUN_recent_revolt days = 720 value = 1 }
	}
}

GAL_do_revolt = {
	clear_all_relations = yes
	AUS = {
		country_event =  revolt.8 #Notification		
		every_owned_state = {
			limit = {
				is_core_of = GAL
			}
			transfer_state_to = GAL
		}
	}
	if = {
		limit = {
			GAL = {
				check_variable = {
					var = THIS.industrial_stuff_local
					value = 1
					compare = greater_than_or_equals
				}
			}
		}
		subtract_from_variable = {
			var = THIS.industrial_stuff_local
			value = 1
		}
	}
	if = {
		limit = {
			GAL = {
				AUS_DWV_member = yes
			}
		}
		AUS_remove_from_DWV =  yes
	}
	hidden_effect = {
		set_global_flag = { flag = GAL_recent_revolt days = 720 value = 1 }
	}
}

AUS_blow_the_fuck_up_and_make_the_yugoslav_wars_look_like_a_joke = {
	add_stability = -0.5
	add_political_power = -500
	load_focus_tree = austria_small_focus
	hidden_effect = {
		#Finding out who will appear
		if = {
			limit = {
				check_variable = {
					var = heimwehr_presence
					value = 2
					compare = greater_than_or_equals
				}
			}
			add_to_variable = {
				var = TYR.collapse_appearance_value
				value = 1
			}
		}
		
		
		if = {
			limit = {
				NOT = {
					country_exists = AWR
					has_government = totalist
					has_government = syndicalist
					has_government = radical_socialist
					has_government = social_democrat
				}
				tag = AUS
			}
			country_event = {
				id = constituents.14 #Austrian Natpops go insane
				days = 5
				random = 24
			}
		}
		
		if = {
			limit = {
				NOT = {
					country_exists = TYR
				}
				check_variable = {
					var = TYR.collapse_appearance_value
					value = 3
					compare = greater_than_or_equals
				}
				tag = AUS
			}
			country_event = {
				id = constituents.6 #Tyrol declares independence
				days = 6
				random = 24
			}
		}
		
		if = {
			limit = {
				NOT = {
					check_variable = {
						var = TYR.collapse_appearance_value
						value = 4
						compare = greater_than_or_equals
					}
				}
			}
			VNC = {
				set_country_flag = VNC_revolt_schuschniggs_stay
			}
		}
		
		if = {
			limit = {
				OR = {
					NOT = { country_exists = SLO }
					SLO = { is_subject_of = AUS }
				}
				OR = {
					owns_state = 102
					owns_state = 1104
					owns_state = 1101
					owns_state = 1103
				}
			}
			country_event = {
				id = constituents.7 #Slovenia Secession
				days = 3
				random = 12
			}
		}
		if = {
			limit = {
				OR = {
					NOT = {
						country_exists = VNC
					}
					VNC = {
						is_subject_of = AUS
					}
				}
				OR = {
					owns_state = 160
					owns_state = 759
				}
			}
			country_event = {
				id = constituents.52 #Venice Secession
				days = 3
				random = 12
			}
		}
		#if = {
		#	limit = {
		#		NOT = {
		#			has_country_flag = AUS_collapse_HUN_stays
		#		}
		#	}
		#	HUN = {
		#		country_event = constituents.2
		#		leave_faction = yes
		#	}
		#}
		#else_if = {
		#	limit = {
		#		owns_state = 43
		#		NOT = {
		#			country_exists = HUN
		#		}
		#	}
		#	country_event = constituents.47 #Hungarian Revolution! Triggers all Hungarian collapse states.
		#}
		#else_if = {
		#	limit = {
		#		has_country_flag = AUS_collapse_HUN_stays
		#	}
		#	country_event = {
		#		id = bdeausint.58
		#		days = 3
		#	}
		#	HUN = {
		#		country_event = {
		#			id = bdeausint.58
		#			days = 3
		#		}
		#	}
		#}
		if = {
			limit = {
				HUN = {
					is_in_faction_with = AUS
				}
			}
			HUN = {
				country_event = constituents.2
				leave_faction = yes
			}
			else_if = {
				limit = {
					owns_state = 34
					NOT = {
						country_exists = HUN
					}
				}
				country_event = constituents.47 #Illyrian Revolution! Triggers all Illyrian collapse states.
			}
		}
		if = {
			limit = {
				CRO = {
					is_in_faction_with = AUS
				}
			}
			CRO = {
				country_event = constituents.3
				leave_faction = yes
			}
			else_if = {
				limit = {
					owns_state = 109
					NOT = {
						country_exists = CRO
					}
				}
				country_event = constituents.48 #Illyrian Revolution! Triggers all Illyrian collapse states.
			}
		}
		if = {
			limit = {
				CZE = {
					is_in_faction_with = AUS
				}
			}
			end_puppet = CZE
			CZE = {
				country_event = constituents.4
				leave_faction = yes
			}
			else_if = {
				limit = {
					owns_state = 1129
					NOT = {
						country_exists = CZE
					}
				}
				country_event = constituents.49 #Bohemian Revolution! Triggers just Bohemia rising up.
			}
		}
		
		if = {
			limit = {
				GAL = {
					is_in_faction_with = AUS
				}
			}
			end_puppet = GAL
			GAL = {
				country_event = constituents.5
				leave_faction = yes
			}
			else_if = {
				limit = {
					owns_state = 91
					NOT = {
						country_exists = GAL
					}
				}
				country_event = constituents.50 #Galician Revolution! Triggers all Galician collapse states.
			}
		}
		# hashed out for now since no leaders 
		#if = {
		#	limit = {
		#		OR = {
		#			NOT = {
		#				country_exists = HNZ
		#			}
		#			HNZ = {
		#				is_subject_of = HUN
		#			}
		#			
		#		}
		#		owns_state = 784
		#	}
		#	country_event = {
		#		id = constituents.36 #Heizenland Secession
		#		days = 5
		#		random = 24
		#	}
		#}
		
		HUN = {
			AUS = {
				end_puppet = HUN
			}
			leave_faction = yes
			add_ideas = AUS_fighting_for_the_people
		}
		CZE = {
			AUS = {
				end_puppet = CZE
			}
			leave_faction = yes
			add_ideas = AUS_fighting_for_the_people
		}
		CRO = {
			AUS = {
				end_puppet = CRO
			}
			leave_faction = yes
			add_ideas = AUS_fighting_for_the_people
		}
		GAL = {
			AUS = {
				end_puppet = GAL
			}
			leave_faction = yes
			add_ideas = AUS_fighting_for_the_people
		}
		
		every_country = {
			limit = {
				NOT = {
					tag = AUS
					tag = HUN
					tag = CRO
					tag = CZE
					tag = GAL
				}
				is_in_faction_with = AUS
			}
			leave_faction = yes
		}
		
		every_country = {
			limit = {
				NOT = {
					tag = AUS
					tag = HUN
					tag = CRO
					tag = CZE
					tag = GAL
				}
				is_subject_of = AUS
			}
			AUS = {
				end_puppet = PREV
			}
		}
		
		if = {
			limit = {
				has_global_flag = FIU_horthy_in_illyria
			}
			country_event = constituents.300
		}
		
		SWI = {
			country_event = constituents.100 #Austria collapses, shall we take land?
		}
		
		ITA = {
			country_event = constituents.101 #Austria collapses, shall we take land?
		}
		
		GER = {
			country_event = constituents.102 #The Austrian Empire collapses!
		}
		
		country_event = {
			id = bdeausfor.130
			days = 20
			random = 120
		}
		
		every_country = {
			limit = {
				is_in_array = { global.AUS_all_possible_array = THIS }
			}
			country_event = {
				id = constituents.56 #Event that tells all minorities at war they can peace out
				days = 150
				random = 72
			}
		}
		
		every_country = {
			limit = {
				is_in_array = { global.AUS_all_possible_array = THIS }
				NOT = {
					tag = AUS
				}
			}
			country_event = {
				id = constituents.62 #Stabilized Danube System
				days = 210
				random = 72
			}
		}
		
		set_global_flag = AUS_collapsed
		add_ideas = AUS_legacy_of_collapse
		remove_ideas = AUS_national_instability
		remove_ideas = AUS_national_instability_2
		remove_ideas = AUS_national_instability_3
		remove_ideas = AUS_obsolete_military
		remove_ideas = AUS_obsolete_military_2
		remove_ideas = AUS_obsolete_military_3
		remove_ideas = AUS_obsolete_military_4
		remove_ideas = AUS_obsolete_military_5
		remove_ideas = AUS_divided_society_BOTDE
		add_ideas = AUS_postcollapse_army_idea
		
		hidden_effect = {
			every_country = {
				news_event = {
					id = colnews.1
					days = 1
				}
			}
			country_event = {
				id = bdeausflavor.51
				days = 30
				random_days = 90
			}
			#country_event = {
			#	id = bdeausflavor.55
			#	days = 5
			#	random_days = 3
			#}
			UKR = {
				if = {
					limit = { has_idea = UKR_brotfrieden_idea_AUS }
					remove_ideas = UKR_brotfrieden_idea_AUS
				}
				else_if = {
					limit = { has_idea = UKR_brotfrieden_idea }
					swap_ideas = {
						remove_idea = UKR_brotfrieden_idea
						add_idea = UKR_brotfrieden_idea_GER
					}
				}
			}
		}
		#AUS_fuck_this_ideology_they_unpopular_now_lmaofuckoff = yes
		dismantle_faction = yes
	}
}

do_minority_revolt_setup = {
	if = {
		limit = {
			REV = {
				is_puppet = yes
				overlord = {
					AUS_is_constituent = yes
				}
			}
		}
		OVERLORD = {
			THIS_add_five_collapse = yes
			end_puppet = PREV
			PREV = {
				declare_war_on = {
					target = PREV
					type = annex_everything
				}
			}
		}
		clear_global_event_target = BOTDE_imminent_minority_revolt_owner
		RVO = { clr_country_flag = BOTDE_imminent_minority_revolt_owner }
	}
	else = {
		do_minority_revolt_basic = yes
	}
	
	if = {
		limit = {
			NOT = {
				has_global_flag = no_4_months
			}
		}
		custom_effect_tooltip = 4_months_to_win
	}
	if = {
		limit = {
			REV = {
				AUS_DWV_member = yes
			}
		}
		AUS_remove_from_DWV =  yes
	}
	#hidden_effect = {
	#	country_event = {
	#		id = revolt.200
	#		days = 720
	#	}
	#	#Put in a diff scripted effect
	#	SLO = {
	#		load_oob = SLO_collapse_oob 
	#	}
	#	set_global_flag = recent_slovene_revolt
	#}
}

do_minority_revolt_basic = {
	clr_global_flag = no_4_months
	every_core_state = {
		limit = {
			is_owned_by = RVO
			
			#Exceptions
			NOT = {
				is_szekler = yes
				has_state_flag = solid_state
				AND = {
					state = 875
					REV = {
						tag = BAN
					}
				}
			}
		}
		REV = {
			transfer_state = PREV
		}
	}
	
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_event_target = BOTDE_backer_revolt_tag	
				}
			}
			REV = {
				set_country_flag = BOTDE_in_revolt
				country_event = {
					id = revolt_peace.0
					days = 124
				}
			}
		}
	}
	
	declare_war_on = {
		target = RVO
		type = annex_everything
	}
	REV = {
		clr_country_flag = BOTDE_imminent_minority_revolt
		REV_spawn_units = yes
	}
	RVO = {
		THIS_add_five_collapse = yes
		clr_country_flag = BOTDE_imminent_minority_revolt_owner
	}
	clear_global_event_target = BOTDE_imminent_minority_revolt_owner
}

REV_spawn_units = {
	if = {
		limit = {
			THIS = {
				tag = SLO
			}
		}
		if = {
			limit = {
				has_template = "Pehotne Divizije"
			}
			else = {
				division_template = {
					name = "Pehotne Divizije"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milica"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milica\" division_template = \"Milica\" start_experience_factor = 0.5" 
					owner = SLO
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pehotne Divizije\" division_template = \"Pehotne Divizije\" start_experience_factor = 0.3" 
							owner = SLO
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pehotne Divizije\" division_template = \"Pehotne Divizije\" start_experience_factor = 0.2" 
				owner = SLO
				count = 2
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = BOS
		}
		if = {
			limit = {
				has_template = "Pešadijska divizija"
			}
			else = {
				division_template = {
					name = "Pešadijska divizija"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milicija"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milicija\" division_template = \"Milicija\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pešadijska divizija\" division_template = \"Pešadijska divizija\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pešadijska divizija\" division_template = \"Pešadijska divizija\" start_experience_factor = 0.2" 
				owner = PREV
				count = 2
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = PGU
		}
		if = {
			limit = {
				has_template = "Infanteriedivision"
			}
			else = {
				division_template = {
					name = "Infanteriedivision"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Miliz"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Miliz\" division_template = \"Miliz\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.2" 
				owner = PREV
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = SKS
		}
		if = {
			limit = {
				has_template = "Pešadijske divizija"
			}
			else = {
				division_template = {
					name = "Pešadijske divizija"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milicija"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milicija\" division_template = \"Milicija\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pešadijskee divizija\" division_template = \"Pešadijskee divizija\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pešadijske divizija\" division_template = \"Pešadijske divizija\" start_experience_factor = 0.2" 
				owner = PREV
				count = 1
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = MNT
		}
		if = {
			limit = {
				has_template = "Pešadijske divizija"
			}
			else = {
				division_template = {
					name = "Pešadijske divizija"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milicija"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milicija\" division_template = \"Milicija\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pešadijske divizija\" division_template = \"Pešadijske divizija\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pešadijske divizija\" division_template = \"Pešadijske divizija\" start_experience_factor = 0.2" 
				owner = PREV
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	if = {
		limit = {
			tag = VNC
		}
		if = {
			limit = {
				has_template = "Divisone Fanteria"
			}
			else = {
				division_template = {
					name = "Divisone Fanteria"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milizia"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milizia\" division_template = \"Milizia\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Divisone Fanteria\" division_template = \"Divisone Fanteria\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Divisone Fanteria\" division_template = \"Divisone Fanteria\" start_experience_factor = 0.2" 
				owner = PREV
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = TRS
		}
		if = {
			limit = {
				has_template = "Divizie Infanterie"
			}
			else = {
				division_template = {
					name = "Divizie Infanterie"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Miliţie"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Miliţie\" division_template = \"Miliţie\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Divizie Infanterie\" division_template = \"Divizie Infanterie\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Divizie Infanterie\" division_template = \"Divizie Infanterie\" start_experience_factor = 0.2" 
				owner = PREV
				count = 6
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = BAN
		}
		if = {
			limit = {
				has_template = "Divizie Infanterie"
			}
			else = {
				division_template = {
					name = "Divizie Infanterie"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Miliţie"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Miliţie\" division_template = \"Miliţie\" start_experience_factor = 0.4" 
					owner = BAN
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Divizie Infanterie\" division_template = \"Divizie Infanterie\" start_experience_factor = 0.3" 
							owner = BAN
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Divizie Infanterie\" division_template = \"Divizie Infanterie\" start_experience_factor = 0.2" 
				owner = BAN
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = BUK
		}
		if = {
			limit = {
				has_template = "Divizie Infanterie"
			}
			else = {
				division_template = {
					name = "Divizie Infanterie"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Miliţie"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = BUK.num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Miliţie\" division_template = \"Miliţie\" start_experience_factor = 0.4" 
					owner = BUK
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Divizie Infanterie\" division_template = \"Divizie Infanterie\" start_experience_factor = 0.3" 
							owner = BUK
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Divizie Infanterie\" division_template = \"Divizie Infanterie\" start_experience_factor = 0.2" 
				owner = BUK
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = WSU
		}
		if = {
			limit = {
				has_template = "Pikhotna Dyviziya"
			}
			else = {
				division_template = {
					name = "Pikhotna Dyviziya"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Militsiya"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Militsiya\" division_template = \"Militsiya\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pikhotna Dyviziya\" division_template = \"Pikhotna Dyviziya\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pikhotna Dyviziya\" division_template = \"Pikhotna Dyviziya\" start_experience_factor = 0.2" 
				owner = WSU
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = CPU
		}
		if = {
			limit = {
				has_template = "Pikhotna Dyviziya"
			}
			else = {
				division_template = {
					name = "Pikhotna Dyviziya"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Militsiya"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Militsiya\" division_template = \"Militsiya\" start_experience_factor = 0.4" 
					owner = CPU
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pikhotna Dyviziya\" division_template = \"Pikhotna Dyviziya\" start_experience_factor = 0.3" 
							owner = CPU
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pikhotna Dyviziya\" division_template = \"Pikhotna Dyviziya\" start_experience_factor = 0.2" 
				owner = CPU
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = SVK
		}
		if = {
			limit = {
				has_template = "Pešej divízie"
			}
			else = {
				division_template = {
					name = "Pešej divízie"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milície"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milície\" division_template = \"Milície\" start_experience_factor = 0.4" 
					owner = SVK
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Pešej divízie\" division_template = \"Pešej divízie\" start_experience_factor = 0.3" 
							owner = SVK
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Pešej divízie\" division_template = \"Pešej divízie\" start_experience_factor = 0.2" 
				owner = SVK
				count = 4
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = TYR
		}
		if = {
			limit = {
				has_template = "Infanteriedivision"
			}
			else = {
				division_template = {
					name = "Infanteriedivision"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Miliz"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Miliz\" division_template = \"Miliz\" start_experience_factor = 0.4" 
					owner = TYR
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.3" 
							owner = TYR
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.2" 
				owner = TYR
				count = 6
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			tag = KRK
		}
		if = {
			limit = {
				has_template = "Dywizja Piechoty"
			}
			else = {
				division_template = {
					name = "Dywizja Piechoty"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Milicja"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Milicja\" division_template = \"Milicja\" start_experience_factor = 0.4" 
					owner = KRK
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Dywizja Piechoty\" division_template = \"Dywizja Piechoty\" start_experience_factor = 0.3" 
							owner = KRK
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		
		random_owned_state = {
			create_unit = { 
				division = "name = \"Milicja\" division_template = \"Milicja\" start_experience_factor = 1" 
				owner = TYR
				count = 2
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	
	if = {
		limit = {
			NOT = {
				OR = {
					tag = SVK
					tag = CPU
					tag = BOS
					tag = SKS
					tag = SLO
					tag = TRS
					tag = BAN
					tag = BUK
					tag = WSU
					tag = PGU
					tag = TYR
					tag = MNT
					tag = KRK
					tag = VNC
				}
			}
		}
		if = {
			limit = {
				has_template = "Infanteriedivision"
			}
			else = {
				division_template = {
					name = "Infanteriedivision"
					regiments = {
						infantry = { x = 0 y = 0 }
						infantry = { x = 0 y = 1 }
						infantry = { x = 0 y = 2 }
						infantry = { x = 1 y = 0 }
						infantry = { x = 1 y = 1 }
						infantry = { x = 1 y = 2 }
						infantry = { x = 2 y = 0 }
						infantry = { x = 2 y = 1 }
						infantry = { x = 2 y = 2 }
					}
				}
				division_template = {
					name = "Miliz"
					regiments = {
						militia = { x = 0 y = 0 }
						militia = { x = 0 y = 1 }
						militia = { x = 0 y = 2 }
						militia = { x = 1 y = 0 }
						militia = { x = 1 y = 1 }
						militia = { x = 1 y = 2 }
						militia = { x = 2 y = 0 }
						militia = { x = 2 y = 1 }
						militia = { x = 2 y = 2 }
					}
				}
			}
		}
		for_loop_effect = {
			end = num_owned_states
			random_owned_state = {
				create_unit = { 
					division = "name = \"Miliz\" division_template = \"Miliz\" start_experience_factor = 0.4" 
					owner = PREV
					allow_spawning_on_enemy_provs = yes
				}
				random_list = {
					33 = {
						create_unit = { 
							division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.3" 
							owner = PREV
							allow_spawning_on_enemy_provs = yes
						}
					}
					67 = {}
				}
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.2" 
				owner = PREV
				count = 3
				allow_spawning_on_enemy_provs = yes
			}
		}
	}	
}

AUS_do_debt_payment = {
	add_to_variable = {
		var = AUS.AUS_debts
		value = 1
	}
	subtract_from_variable = {
		var = AUS.remaining_payments
		value = 1
	}
	if = {
		limit = {
			check_variable = {
				var = AUS.AUS_debts
				value = 12
				compare = greater_than_or_equals
			}
		}
		country_event = {
			id = bdeaus.3
		}
		GER = {
			country_event = {
				id = bdeaus.4
				days = 3
			}
		}
	}
	
}

do_minority_rise = {
	if = {
		limit = {
			capital_scope = {
				owner = {
					has_country_flag = AUS_evidenzbureau_focus
				}
			}
		}
		else = {
			add_to_variable = {
				var = THIS.subject_revolt_progress
				value = 0.01
			}
		}
	}
}

do_minority_rise_advanced_calc = {
	AUS_average_state_resistance = yes
	set_temp_variable = { additional_value = 0 }
	set_temp_variable = { subtractive_value = 0 }
	set_temp_variable = { nationalist_value = THIS.paramilitary_value } #Paramilitaries
	set_temp_variable = { collapse_value_AUS = AUS.subject_revolt_progress }
	set_temp_variable = { resistance_value = THIS.avg_resistance }
	set_temp_variable = { minority_cores = THIS.num_core_states }
	divide_temp_variable = { minority_cores = 100 }
	divide_temp_variable = { minority_cores = 16 }
	THIS = {
		capital_scope = {
			owner = {
				PREV.PREV = { #Owner of current capital; e.g. Hungary for Slovakia
					set_temp_variable = { collapse_value_owner = THIS.subject_revolt_progress }
				}
			}
		}
	}
	if = {
		limit = {
			AUS = {
				NOT = {
					has_idea = AUS_unsupported_rebels
				}
			}
		}
		add_to_temp_variable = { additional_value = 0.0075 }
	}
	add_to_temp_variable = { subtractive_value = AUS.stability }
	subtract_from_temp_variable = { subtractive_value = 0.5 } #If below 50% stability, get a malus
	divide_temp_variable = { subtractive_value = 30 }
	
	if = {
		limit = {
			AUS = {
				has_war = yes
			}
		}
		add_to_temp_variable = { subtractive_value = 0.02 }
	}
	divide_temp_variable = { nationalist_value = 3 }
	multiply_temp_variable = { collapse_value_owner = 1.75 }
	add_to_temp_variable = { additional_value = collapse_value_AUS }
	add_to_temp_variable = { additional_value = nationalist_value }
	add_to_temp_variable = { additional_value = collapse_value_owner }
	divide_temp_variable = { additional_value = 90 }
	divide_temp_variable = { resistance_value = 1600 }
	add_to_temp_variable = { additional_value = minority_cores }
	add_to_temp_variable = { additional_value = global.extra_value_war_exhaust }
	add_to_temp_variable = { additional_value = THIS.gamer_rage_value }
	add_to_temp_variable = { additional_value = global.extra_collapse_federalizing }
	subtract_from_temp_variable = { additional_value = subtractive_value }
	add_to_variable = {
		var = THIS.subject_revolt_progress
		value = additional_value
	}
	add_to_variable = {
		var = THIS.subject_revolt_progress
		value = resistance_value
	}
	AUS_warning_check = yes
}

AUS_do_schizo_test = {
	var:schizophrenic = {
		set_temp_variable = { collapse = THIS.subject_revolt_progress }
	}
	
	set_temp_variable = { schizo_value = global.schizo_value_var }
	
	set_temp_variable = { calculator = 0 }
	
	add_to_temp_variable = { calculator = collapse }
	add_to_temp_variable = { calculator = schizo_value }

	
	set_variable = {
		var = global.schizocalc
		value = calculator
	}
	
	if = {
		limit = {
			check_variable = {
				var = schizocalc
				value = 0.96
				compare = greater_than_or_equals
			}
		}
		set_country_flag = no_schizo
	}
}



AUS_picker_select_event_type = { #Variables: 1=Basic. 2=Mission. 3=Paramilitary. 4=Strategy Shaker.
	random_list = {
		8 = { #Normal
			set_variable = {
				var =  global.BOTDE_randomevent_AUS_picker
				value = 1
			}
		}
		2 = { #Missions
			set_variable = {
				var =  global.BOTDE_randomevent_AUS_picker
				value = 2
			}
		}
		2 = { #Paramilitaries
			modifier = {
				factor = 0
				has_global_flag = AUS_paramilitaries_pacified
			}
			set_variable = {
				var =  global.BOTDE_randomevent_AUS_picker
				value = 3
			}
		}
		1 = { #Strategy Shaker
			set_variable = {
				var =  global.BOTDE_randomevent_AUS_picker
				value = 4
			}
		}
	}
}

AUS_event_fire_prep_AUS = { #Use event type variable and target (AUS, constituent, minority) to deduce event number
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_randomevent_AUS_picker
				value = 1
				compare = equals
			}
		}
		AUS_picker_actual_event_AUS_basic = yes
		else_if = {
			limit = {
				check_variable = {
					var = global.BOTDE_randomevent_AUS_picker
					value = 2
					compare = equals
				}
			}
			AUS_picker_actual_event_AUS_mission = yes
			else_if = {
				limit = {
					check_variable = {
						var = global.BOTDE_randomevent_AUS_picker
						value = 3
						compare = equals
					}
				}
				AUS_picker_actual_event_AUS_paramilitary = yes
				else_if = {
					limit = {
						check_variable = {
							var = global.BOTDE_randomevent_AUS_picker
							value = 4
							compare = equals
						}
					}
					AUS_picker_actual_event_AUS_shaker = yes
				}
			}
		}
	}
}

AUS_event_fire_prep_constituent = { #Use event type variable and target (AUS, constituent, minority) to deduce event number
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_randomevent_AUS_picker
				value = 1
				compare = equals
			}
		}
		AUS_picker_actual_event_constituent_basic = yes
		else = {
			AUS_picker_actual_event_constituent_paramilitary = yes
		}
	}
}


AUS_picker_actual_event_AUS_basic = { #Use event type variable and target (AUS, constituent, minority) to deduce event number
	
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_eventnumber_basic
				value = 1
				compare = equals
			}
		}
		country_event = {
			id = ethnic.2
		}
		else_if = {
			limit = {
				check_variable = {
					var = global.BOTDE_eventnumber_basic
					value = 2
					compare = equals
				}
			}
			country_event = {
				id = ethnic.3
			}
			else_if = {
				limit = {
					check_variable = {
						var = global.BOTDE_eventnumber_basic
						value = 3
						compare = equals
					}
				}
				country_event = {
					id = ethnic.4
				}
				else_if = {
					limit = {
						check_variable = {
							var = global.BOTDE_eventnumber_basic
							value = 4
							compare = equals
						}
					}
					country_event = {
						id = ethnic.5
					}
					else_if = {
						limit = {
							check_variable = {
								var = global.BOTDE_eventnumber_basic
								value = 5
								compare = equals
							}
						}
						country_event = {
							id = ethnic.6
						}
						else_if = {
							limit = {
								check_variable = {
									var = global.BOTDE_eventnumber_basic
									value = 6
									compare = equals
								}
							}
							country_event = {
								id = ethnic.7
							}
							else_if = {
								limit = {
									check_variable = {
										var = global.BOTDE_eventnumber_basic
										value = 7
										compare = equals
									}
								}
								country_event = {
									id = ethnic.8
								}
								else_if = {
									limit = {
										check_variable = {
											var = global.BOTDE_eventnumber_basic
											value = 8
											compare = equals
										}
									}
									country_event = {
										id = ethnic.9
									}
									else_if = {
										limit = {
											check_variable = {
												var = global.BOTDE_eventnumber_basic
												value = 9
												compare = equals
											}
										}
										country_event = {
											id = ethnic.10
										}
										else_if = {
											limit = {
												check_variable = {
													var = global.BOTDE_eventnumber_basic
													value = 10
													compare = equals
												}
											}
											country_event = {
												id = ethnic.11
											}
											else_if = {
												limit = {
													check_variable = {
														var = global.BOTDE_eventnumber_basic
														value = 11
														compare = equals
													}
												}
												country_event = {
													id = ethnic.12
												}
												else_if = {
													limit = {
														check_variable = {
															var = global.BOTDE_eventnumber_basic
															value = 12
															compare = equals
														}
													}
													country_event = {
														id = ethnic.13
													}
													else_if = {
														limit = {
															check_variable = {
																var = global.BOTDE_eventnumber_basic
																value = 13
																compare = equals
															}
														}
														country_event = {
															id = ethnic.14
														}
														else_if = {
															limit = {
																check_variable = {
																	var = global.BOTDE_eventnumber_basic
																	value = 14
																	compare = equals
																}
															}
															country_event = {
																id = ethnic.15
															}
															else_if = {
																limit = {
																	check_variable = {
																		var = global.BOTDE_eventnumber_basic
																		value = 15
																		compare = equals
																	}
																}
																country_event = {
																	id = ethnic.16
																}
																else_if = {
																	limit = {
																		check_variable = {
																			var = global.BOTDE_eventnumber_basic
																			value = 16
																			compare = equals
																		}
																	}
																	country_event = {
																		id = ethnic.17
																	}
																	else_if = {
																		limit = {
																			check_variable = {
																				var = global.BOTDE_eventnumber_basic
																				value = 17
																				compare = equals
																			}
																		}
																		country_event = {
																			id = ethnic.18
																		}
																		else_if = {
																			limit = {
																				check_variable = {
																					var = global.BOTDE_eventnumber_basic
																					value = 18
																					compare = equals
																				}
																			}
																			country_event = {
																				id = ethnic.19
																			}
																			else_if = {
																				limit = {
																					check_variable = {
																						var = global.BOTDE_eventnumber_basic
																						value = 19
																						compare = equals
																					}
																				}
																				country_event = {
																					id = ethnic.20
																				}
																				else_if = {
																					limit = {
																						check_variable = {
																							var = global.BOTDE_eventnumber_basic
																							value = 20
																							compare = equals
																						}
																					}
																					country_event = {
																						id = ethnic.21
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}	
}

CONST_event_fire = {
	
	if = {
		limit = {
			check_variable = {
				var = THIS.BOTDE_CONST_eventnumber_basic
				value = 1
				compare = equals
			}
		}
		country_event = {
			id = ethnic.42
		}
		else_if = {
			limit = {
				check_variable = {
					var = THIS.BOTDE_CONST_eventnumber_basic
					value = 2
					compare = equals
				}
			}
			country_event = {
				id = ethnic.43
			}
			else_if = {
				limit = {
					check_variable = {
						var = THIS.BOTDE_CONST_eventnumber_basic
						value = 3
						compare = equals
					}
				}
				country_event = {
					id = ethnic.44
				}
				else_if = {
					limit = {
						check_variable = {
							var = THIS.BOTDE_CONST_eventnumber_basic
							value = 4
							compare = equals
						}
					}
					country_event = {
						id = ethnic.45
					}
					else_if = {
						limit = {
							check_variable = {
								var = THIS.BOTDE_CONST_eventnumber_basic
								value = 5
								compare = equals
							}
						}
						country_event = {
							id = ethnic.46
						}
						else_if = {
							limit = {
								check_variable = {
									var = THIS.BOTDE_CONST_eventnumber_basic
									value = 6
									compare = equals
								}
							}
							country_event = {
								id = ethnic.47
							}
							else_if = {
								limit = {
									check_variable = {
										var = THIS.BOTDE_CONST_eventnumber_basic
										value = 7
										compare = equals
									}
								}
								country_event = {
									id = ethnic.48
								}
								else_if = {
									limit = {
										check_variable = {
											var = THIS.BOTDE_CONST_eventnumber_basic
											value = 8
											compare = equals
										}
									}
									country_event = {
										id = ethnic.49
									}
									else_if = {
										limit = {
											check_variable = {
												var = THIS.BOTDE_CONST_eventnumber_basic
												value = 9
												compare = equals
											}
										}
										country_event = {
											id = ethnic.50
										}
										else_if = {
											limit = {
												check_variable = {
													var = THIS.BOTDE_CONST_eventnumber_basic
													value = 10
													compare = equals
												}
											}
											country_event = {
												id = ethnic.51
											}
											else_if = {
												limit = {
													check_variable = {
														var = THIS.BOTDE_CONST_eventnumber_basic
														value = 11
														compare = equals
													}
												}
												country_event = {
													id = ethnic.52
												}
												else_if = {
													limit = {
														check_variable = {
															var = THIS.BOTDE_CONST_eventnumber_basic
															value = 12
															compare = equals
														}
													}
													country_event = {
														id = ethnic.53
													}
													else_if = {
														limit = {
															check_variable = {
																var = THIS.BOTDE_CONST_eventnumber_basic
																value = 13
																compare = equals
															}
														}
														country_event = {
															id = ethnic.54
														}
														else_if = {
															limit = {
																check_variable = {
																	var = THIS.BOTDE_CONST_eventnumber_basic
																	value = 14
																	compare = equals
																}
															}
															country_event = {
																id = ethnic.55
															}
															else_if = {
																limit = {
																	check_variable = {
																		var = THIS.BOTDE_CONST_eventnumber_basic
																		value = 15
																		compare = equals
																	}
																}
																country_event = {
																	id = ethnic.56
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}	
}

CONST_event_fire_minority = {
	
	if = {
		limit = {
			check_variable = {
				var = THIS.BOTDE_CONST_eventnumber_basic
				value = 1
				compare = equals
			}
		}
		country_event = {
			id = ethnic.57
		}
		else_if = {
			limit = {
				check_variable = {
					var = THIS.BOTDE_CONST_eventnumber_basic
					value = 2
					compare = equals
				}
			}
			country_event = {
				id = ethnic.58
			}
			else_if = {
				limit = {
					check_variable = {
						var = THIS.BOTDE_CONST_eventnumber_basic
						value = 3
						compare = equals
					}
				}
				country_event = {
					id = ethnic.59
				}
				else_if = {
					limit = {
						check_variable = {
							var = THIS.BOTDE_CONST_eventnumber_basic
							value = 4
							compare = equals
						}
					}
					country_event = {
						id = ethnic.60
					}
					else_if = {
						limit = {
							check_variable = {
								var = THIS.BOTDE_CONST_eventnumber_basic
								value = 5
								compare = equals
							}
						}
						country_event = {
							id = ethnic.61
						}
					}
				}
			}
		}
	}	
}





AUS_picker_actual_event_AUS_mission = { #Use event type variable and target (AUS, constituent, minority) to deduce event number
	
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_eventnumber_basic
				value = 1
				compare = equals
			}
		}
		country_event = {
			id = ethnic.22
		}
		else_if = {
			limit = {
				check_variable = {
					var = global.BOTDE_eventnumber_basic
					value = 2
					compare = equals
				}
			}
			country_event = {
				id = ethnic.23
			}
			else_if = {
				limit = {
					check_variable = {
						var = global.BOTDE_eventnumber_basic
						value = 3
						compare = equals
					}
				}
				country_event = {
					id = ethnic.24
				}
				else_if = {
					limit = {
						check_variable = {
							var = global.BOTDE_eventnumber_basic
							value = 4
							compare = equals
						}
					}
					country_event = {
						id = ethnic.25
					}
					else_if = {
						limit = {
							check_variable = {
								var = global.BOTDE_eventnumber_basic
								value = 5
								compare = equals
							}
						}
						country_event = {
							id = ethnic.26
						}
						else_if = {
							limit = {
								check_variable = {
									var = global.BOTDE_eventnumber_basic
									value = 6
									compare = equals
								}
							}
							country_event = {
								id = ethnic.27
							}
							else_if = {
								limit = {
									check_variable = {
										var = global.BOTDE_eventnumber_basic
										value = 7
										compare = equals
									}
								}
								country_event = {
									id = ethnic.28
								}
								else_if = {
									limit = {
										check_variable = {
											var = global.BOTDE_eventnumber_basic
											value = 8
											compare = equals
										}
									}
									country_event = {
										id = ethnic.29
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

AUS_picker_actual_event_AUS_shaker = { #Use event type variable and target (AUS, constituent, minority) to deduce event number
	
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_eventnumber_basic
				value = 1
				compare = equals
			}
		}
		country_event = {
			id = ethnic.30
		}
		else_if = {
			limit = {
				check_variable = {
					var = global.BOTDE_eventnumber_basic
					value = 2
					compare = equals
				}
			}
			country_event = {
				id = ethnic.31
			}
			else_if = {
				limit = {
					check_variable = {
						var = global.BOTDE_eventnumber_basic
						value = 3
						compare = equals
					}
				}
				country_event = {
					id = ethnic.32
				}
				else_if = {
					limit = {
						check_variable = {
							var = global.BOTDE_eventnumber_basic
							value = 4
							compare = equals
						}
					}
					country_event = {
						id = ethnic.33
					}
				}
			}
		}
	}
}



AUS_picker_actual_event_constituent_basic = { #Use event type variable and target (AUS, constituent, minority) to deduce event number
	
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_eventnumber_basic
				value = 1
				compare = equals
			}
		}
		country_event = {
			id = ethnic.34
		}
		else_if = {
			limit = {
				check_variable = {
					var = global.BOTDE_eventnumber_basic
					value = 2
					compare = equals
				}
			}
			country_event = {
				id = ethnic.35
			}
			else_if = {
				limit = {
					check_variable = {
						var = global.BOTDE_eventnumber_basic
						value = 3
						compare = equals
					}
				}
				country_event = {
					id = ethnic.36
				}
				else_if = {
					limit = {
						check_variable = {
							var = global.BOTDE_eventnumber_basic
							value = 4
							compare = equals
						}
					}
					country_event = {
						id = ethnic.37
					}
					else_if = {
						limit = {
							check_variable = {
								var = global.BOTDE_eventnumber_basic
								value = 5
								compare = equals
							}
						}
						country_event = {
							id = ethnic.38
						}
						else_if = {
							limit = {
								check_variable = {
									var = global.BOTDE_eventnumber_basic
									value = 6
									compare = equals
								}
							}
							country_event = {
								id = ethnic.39
							}
							else_if = {
								limit = {
									check_variable = {
										var = global.BOTDE_eventnumber_basic
										value = 7
										compare = equals
									}
								}
								country_event = {
									id = ethnic.40
								}
								else_if = {
									limit = {
										check_variable = {
											var = global.BOTDE_eventnumber_basic
											value = 8
											compare = equals
										}
									}
									country_event = {
										id = ethnic.41
									}
								}
							}
						}
					}
				}
			}
		}
	}
}




AUS_picker_actual_event_AUS_paramilitary = {
	country_event = {
		id = ethnic_picker.16
	}
}

AUS_picker_actual_event_constituent_paramilitary = {
	country_event = {
		id = ethnic_picker.17
	}
}

AUS_picker_AUS_roll_number_gen = {
	if = {
		limit = {
			check_variable = {
				var = global.BOTDE_randomevent_AUS_picker
				value = 4
				compare = equals
			}
		}
		AUS_picker_select_event_number_strategy_shaker_AUS = yes
		else_if = {
			limit = {
				check_variable = {
					var = global.BOTDE_randomevent_AUS_picker
					value = 3
					compare = equals
				}
			}
			AUS_picker_select_event_number_paramilitary_AUS = yes
			else_if = {
				limit = {
					check_variable = {
						var = global.BOTDE_randomevent_AUS_picker
						value = 2
						compare = equals
					}
				}
				AUS_picker_select_event_number_mission_AUS = yes
				else_if = {
					limit = {
						check_variable = {
							var = global.BOTDE_randomevent_AUS_picker
							value = 1
							compare = equals
						}
					}
					AUS_picker_select_event_number_basic_AUS = yes
				}
			}
		}
	}
}


AUS_picker_select_event_number_basic_AUS = { #20 basic event (with different effects each): 1-6 negligible, 7-16 moderate, 17-20 severe. 2 multi-choice for negligible. 5 multi-choice for moderate. 2 multi-choice for severe. of these, 1 of each are three-choices.
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 20
	}
	round_temp_variable = picker
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = picker
	}
}

AUS_picker_select_event_number_mission_AUS = { #8 diff missions: 2 easy, 2 hard, 4 medium 
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 8
	}
	round_temp_variable = picker
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = picker
	}
}

AUS_picker_select_event_number_paramilitary_AUS = { #Only one event for this. This is because the event will fire the great paramilitary thingamajig.
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = 1
	}
}

AUS_picker_select_event_number_strategy_shaker_AUS = { #4 different strategy shakers.
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 4
	}
	round_temp_variable = picker
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = picker
	}
}



AUS_picker_select_event_number_basic_constituent = { #8 events per constituent. 4 two-choice and one three-choice. If a constituent is gone and this script selects that constituent, it will run AUS_picker_AUS. This is the same script but only including Austria. 1-2 minor. 7-8 major.
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 8
	}
	round_temp_variable = picker
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = picker
	}
	
}

AUS_picker_select_event_number_paramilitary_constituent = {
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = 1
	}
}

AUS_picker_select_event_number_basic_minority = { #5 events per minority. 2 two-choice. 1 minor. 1 major. 3 moderate.
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 5
	}
	round_temp_variable = picker
	set_variable = {
		var =  global.BOTDE_eventnumber_basic
		value = picker
	}
}

CONST_picker_select_event_number_basic = { #15 basic events
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 15
	}
	round_temp_variable = picker
	set_variable = {
		var =  THIS.BOTDE_CONST_eventnumber_basic
		value = picker
	}
}

CONST_picker_select_event_number_minority = { #5 basic events
	set_temp_variable = { picker = 1 }
	randomize_temp_variable = {
		var = picker
		distribution = uniform
		min = 1
		max = 5
	}
	round_temp_variable = picker
	set_variable = {
		var =  THIS.BOTDE_CONST_eventnumber_basic
		value = picker
	}
}

AUS_picker_AUS = {
	set_variable = { BOTDE_event_target = AUS }
	set_variable = {
		var =  global.BOTDE_target
		value = 1
	}
}

AUS_picker_select_constituent = { #2 = Hungary. 3 = Bohemia. 4 = Illyria. 5 = Galicia.
	random_list = {
		2 = {
			modifier =  {
				factor = 0 
				NOT = {
					HUN = {
						OR = {
							is_subject_of = AUS
							is_in_faction_with = AUS
						}
					}
				}
			}
			set_variable = { BOTDE_event_target = HUN }
			set_variable = {
				var =  global.BOTDE_target
				value = 2
			}
		}
		1 = {
			modifier =  {
				factor = 0 
				NOT = {
					CZE = {
						OR = {
							is_subject_of = AUS
							is_in_faction_with = AUS
						}
					}
				}
			}
			set_variable = { BOTDE_event_target = CZE }
			set_variable = {
				var =  global.BOTDE_target
				value = 3
			}
		}
		1 = {
			modifier =  {
				factor = 0 
				NOT = {
					CRO = {
						OR = {
							is_subject_of = AUS
							is_in_faction_with = AUS
						}
					}
				}
			}
			set_variable = { BOTDE_event_target = CRO }
			set_variable = {
				var =  global.BOTDE_target
				value = 4
			}
		}
		1 = {
			modifier =  {
				factor = 0 
				NOT = {
					GAL = {
						OR = {
							is_subject_of = AUS
							is_in_faction_with = AUS
						}
					}
				}
			}
			set_variable = { BOTDE_event_target = GAL }
			set_variable = {
				var =  global.BOTDE_target
				value = 5
			}
		}
	}
}


AUS_picker_select_minority = { #6. Slovenia. 7. Slovakia. 8. Transylvania. 9. Banat. 10. Bukovina. 11. Bosnia. 12. Montenegro. 13. West Ukraine. 14. Krakow. 15. Carpatho-Ukraine. 16. Burgenland. 17. German-Bohemia. 18. Venice. 19. Srpska.
	random_list = {
		1 = {
			modifier =  {
				factor = 0
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = SLO }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1103
					}
				}
				
			}
			set_variable = { BOTDE_event_target = SLO }
			set_variable = {
				var =  global.BOTDE_target
				value = 6
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = SVK }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1123
					}
				}
			}
			set_variable = { BOTDE_event_target = SVK }
			set_variable = {
				var =  global.BOTDE_target
				value = 7
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = TRS }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1112
					}
				}
			}
			set_variable = { BOTDE_event_target = TRS }
			set_variable = {
				var =  global.BOTDE_target
				value = 8
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = BAN }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1114
					}
				}
			}
			set_variable = { BOTDE_event_target = BAN }
			set_variable = {
				var =  global.BOTDE_target
				value = 9
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = BUK }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 80
					}
				}
			}
			set_variable = { BOTDE_event_target = BUK }
			set_variable = {
				var =  global.BOTDE_target
				value = 10
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = BOS }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 104
					}
				}
			}
			set_variable = { BOTDE_event_target = BOS }
			set_variable = {
				var =  global.BOTDE_target
				value = 11
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = BOS }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 105
					}
				}
			}
			set_variable = { BOTDE_event_target = MNT }
			set_variable = {
				var =  global.BOTDE_target
				value = 12
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = WSU }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 91
					}
				}
			}
			set_variable = { BOTDE_event_target = WSU }
			set_variable = {
				var =  global.BOTDE_target
				value = 13
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = KRK }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1124
					}
				}
			}
			set_variable = { BOTDE_event_target = KRK }
			set_variable = {
				var =  global.BOTDE_target
				value = 14
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = CPU }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1119
					}
				}
			}
			set_variable = { BOTDE_event_target = CPU }
			set_variable = {
				var =  global.BOTDE_target
				value = 15
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = HNZ }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 784
					}
				}
			}
			set_variable = { BOTDE_event_target = HNZ }
			set_variable = {
				var =  global.BOTDE_target
				value = 16
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = PGU }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 69
					}
				}
			}
			set_variable = { BOTDE_event_target = PGU }
			set_variable = {
				var =  global.BOTDE_target
				value = 17
			}
		}
		
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = VNC }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 160
					}
				}
			}
			set_variable = { BOTDE_event_target = VNC }
			set_variable = {
				var =  global.BOTDE_target
				value = 18
			}
		}
		1 = {
			modifier =  {
				factor = 0 
				OR = {
					NOT = {
						is_in_array = { global.minorities_array = SKS }
						OR = {
							exists = no
							is_subject_of = AUS
							
						}
					}
					NOT = {
						owns_state = 1142
					}
				}
			}
			set_variable = { BOTDE_event_target = SKS }
			set_variable = {
				var =  global.BOTDE_target
				value = 19
			}
		}
	}
}

AUS_average_state_resistance = {
	clear_temp_array = global.temp_states
	clear_variable = THIS.avg_resistance
	set_temp_variable = { global.num_states = 0 }
	set_temp_variable = { global.resistance_sum = 0 }
	set_variable = { THIS.avg_resistance = 0 }
	every_state = {
		limit = {
			is_core_of = PREV
			has_resistance = yes
		}
		add_to_temp_array = { global.temp_states = THIS }
	}
	for_each_scope_loop = {
		array = global.temp_states
		add_to_temp_variable = { global.num_states = 1 }
		add_to_temp_variable = { global.resistance_sum = THIS.resistance }
	}
	divide_temp_variable = { global.resistance_sum = global.num_states }
	set_variable = {
		var = THIS.avg_resistance
		value = global.resistance_sum
	}
	if = {
		limit = {
			has_event_target = BOTDE_avg_resistance_target
		}
		clear_global_event_target = BOTDE_avg_resistance_target
	}
	if = {
		limit = {
			has_event_target = BOTDE_avg_resistance_owner
		}
		clear_global_event_target = BOTDE_avg_resistance_owner
	}
}

BOTDE_minority_test = {
	do_minority_rise = yes
	do_minority_rise_advanced_calc = yes
}

AUS_level_up_backer_combat = {
	custom_effect_tooltip = level_up_backer_abilities
	subtract_from_variable = {
		THIS.AUS_backer_resistance_target_combat_small = 0.02
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_target_combat_med = 0.025
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_target_combat_large = 0.03
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_activity_combat_small = 0.02
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_activity_combat_med = 0.025
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_activity_combat_large = 0.03
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_garrison_combat_small = 0.02
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_garrison_combat_med = 0.025
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_garrison_combat_large = 0.03
	}
}

AUS_level_up_backer_combat_small = {
	custom_effect_tooltip = level_up_backer_abilities
	subtract_from_variable = {
		THIS.AUS_backer_resistance_target_combat_small = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_target_combat_med = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_target_combat_large = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_activity_combat_small = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_activity_combat_med = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_activity_combat_large = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_garrison_combat_small = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_garrison_combat_med = 0.015
	}
	
	subtract_from_variable = {
		THIS.AUS_backer_resistance_garrison_combat_large = 0.015
	}
}

AUS_level_up_backer_combat_global = {
	custom_effect_tooltip = level_up_backer_abilities
	SER = {
		AUS_level_up_backer_combat = yes
	}
	ROM = {
		AUS_level_up_backer_combat = yes
	}
	POL = {
		AUS_level_up_backer_combat = yes
	}
	UKR = {
		AUS_level_up_backer_combat = yes
	}
	GER = {
		AUS_level_up_backer_combat = yes
	}
	CRO = {
		AUS_level_up_backer_combat = yes
	}
	MNT = {
		AUS_level_up_backer_combat = yes
	}
	ITA = {
		AUS_level_up_backer_combat = yes
	}
	SRI = {
		AUS_level_up_backer_combat = yes
	}
	VNC = {
		AUS_level_up_backer_combat = yes
	}
	RUS = {
		AUS_level_up_backer_combat = yes
	}
	BUL = {
		AUS_level_up_backer_combat = yes
	}
	ALB = {
		AUS_level_up_backer_combat = yes
	}
	GRU = {
		AUS_level_up_backer_combat = yes
	}
	SIC = {
		AUS_level_up_backer_combat = yes
	}
	SRD = {
		AUS_level_up_backer_combat = yes
	}
	HUN = {
		AUS_level_up_backer_combat = yes
	}
	TRS = {
		AUS_level_up_backer_combat = yes
	}
	CZE = {
		AUS_level_up_backer_combat = yes
	}
	GAL = {
		AUS_level_up_backer_combat = yes
	}
}

AUS_have_paranoid_schizophrenic_episode = {
	random_list = {
		20 = {
			scoped_sound_effect = "schizo_knock_1"
		}
		20 = {
			scoped_sound_effect = "schizo_knock_2"
		}
		20 = {
			scoped_sound_effect = "schizo_knock_3"
		}
		20 = {
			scoped_sound_effect = "schizo_knock_4"
		}
		20 = {
			scoped_sound_effect = "schizo_knock_5"
		}
	}
}

AUS_screamer = {
	scoped_sound_effect = "schizo_troll"
	set_global_flag = AUS_screamer_went_off
}

AUS_fed_speed_1 = {
	set_global_flag = AUS_fed_speed_1
	custom_effect_tooltip = govt_raise_fed1
	add_to_variable = {
		var = global.government_percentage
		value = 0.06
	}
	add_to_variable = {
		var = global.government_percentage
		value = AUS.fed_level_1_speedup
	}
}

AUS_fed_speed_2 = {
	set_global_flag = AUS_fed_speed_2
	custom_effect_tooltip = govt_raise_fed2
	add_to_variable = {
		var = global.government_percentage
		value = 0.06
	}
	add_to_variable = {
		var = global.government_percentage
		value = AUS.fed_level_2_speedup
	}
}

AUS_fed_speed_3 = {
	set_global_flag = AUS_fed_speed_3
	custom_effect_tooltip = govt_raise_fed3
	add_to_variable = {
		var = global.government_percentage
		value = 0.06
	}
	add_to_variable = {
		var = global.government_percentage
		value = AUS.fed_level_3_speedup
	}
}

AUS_fed_speed_1_add = {
	custom_effect_tooltip = AUS_speed_future_federalizing
	add_to_variable = {
		var = AUS.fed_level_1_speedup
		value = 0.03
	}
}

AUS_fed_speed_2_add = {
	custom_effect_tooltip = AUS_speed_future_federalizing
	add_to_variable = {
		var = AUS.fed_level_2_speedup
		value = 0.03
	}
}

AUS_fed_speed_3_add = {
	custom_effect_tooltip = AUS_speed_future_federalizing
	add_to_variable = {
		var = AUS.fed_level_3_speedup
		value = 0.03
	}
}

AUS_fed_speed_trialism_add = {
	custom_effect_tooltip = AUS_speed_future_federalizing_but_no_other_tags
	add_to_variable = {
		var = AUS.fed_level_2_speedup
		value = 0.3
	}
}

AUS_divide_hungary_effect = {
	SVK = {
		every_core_state = {
			limit = {
				NOT = {
					state = 1136
					state = 1122
				}
				is_owned_by = HUN
			}
			transfer_state_to = SVK
		}
	}
	TRS = {
		every_core_state = {
			limit = {
				NOT = {
					state = 1117
					state = 1118
					state = 789
					state = 76
					state = 1112
				}
				is_owned_by = HUN
			}
			transfer_state_to = TRS
		}
	}
	if = {
		limit = {
			HUN = {
				owns_state = 875
			}
		}
		TRS = {
			transfer_state = 875
			add_state_core = 875
		}
	}
	CPU = {
		every_core_state = {
			limit = {
				is_owned_by = HUN
			}
			transfer_state_to = CPU
		}
	}
	HUN = {
		set_autonomy = {
			target = SVK
			autonomous_state = botde_transleithania
		}
		set_autonomy = {
			target = TRS
			autonomous_state = botde_transleithania
		}
		set_autonomy = {
			target = CPU
			autonomous_state = botde_transleithania
		}
	}
	every_country = {
		limit = {
			OR = {
				tag = SVK
				tag = TRS
				tag = CPU
			}
		}
		if = {
			limit = {
				HUN = { AUS_DWV_member = yes }
			}
			AUS_add_to_DWV = yes
		}
	}
}

AUS_restore_bosnia_condominium_effect = {
	every_state = {
		limit = {
			AUS_state_is_owned_by_aus_or_subjects = yes
			NOT = {
				is_owned_by = MNT
			}
			OR = {
				is_core_of = BOS
				is_core_of = MNT
				state = 163
				state = 1098
				state = 1270
			}
		}
		
		BOS = {
			transfer_state = PREV
			AUS = {
				set_autonomy = {
					target = PREV
					autonomy_state = botde_constituent
				}
			}
			set_country_flag = CONST_proper
			hidden_effect = {
				set_politics = {
					ruling_party = social_conservative
				}
				set_popularities = {
					totalist = 0
					radical_socialist = 0
					syndicalist = 2
					social_democrat = 4
					social_liberal = 6
					market_liberal = 8
					social_conservative = 41
					authoritarian_democrat = 12
					paternal_autocrat = 19
					national_populist = 8
				}
			}
		}
	}
}

AUS_federalize_effect = {
	for_each_scope_loop = {
		array = global.AUS_all_possible_array
		if = {
			limit = {
				THIS = {
					AUS_is_constituent = yes
				}
				NOT = {
					AND = {
						tag = HUN
						OR = { 
							has_global_flag = AUS_autonomous_transleithania
							has_global_flag = AUS_autonomous_transleithania_minorities
						}
					}
				}
			}
			AUS = {
				if = {
					limit = {
						PREV = { is_ai = no }
					}
					change_tag_from = PREV
				}
				annex_country = {
					target = PREV
					transfer_troops = yes
				}
			}
			THIS = {
				every_state = {
					limit = {
						is_core_of = PREV
					}
					add_core_of = AUS
				}
				if = {
					limit = {
						AUS_DWV_member = yes
					}
					AUS_remove_from_DWV = yes
				}
				every_unit_leader = {
					set_nationality = AUS
				}
				every_scientist = {
					set_nationality = AUS
				}
			}
			else = {
				THIS = {
					every_core_state = {
						add_core_of = AUS
					}
				}
			}
		}
	}
	hidden_effect = {
		HUN = {
			every_core_state = {
				add_core_of = AUS
			}
		}
		CZE = {
			every_core_state = {
				add_core_of = AUS
			}
		}
		CRO = {
			every_core_state = {
				add_core_of = AUS
			}
		}
		GAL = {
			every_core_state = {
				add_core_of = AUS
			}
		}
		if = {
			limit = {
				has_global_flag = BRG_selected_AUS_emperor
				ENG = {
					is_subject_of = AUS
				}
			}
			ROOT = {
				set_autonomy = {
					target = ENG
					autonomy_state = botde_constituent_color_overload
				}
			}
		}
		add_manpower = 300000
	}
}

AUS_federalize_trialist_effect = {

	for_each_scope_loop = {
		array = global.AUS_all_possible_array
		if = {
			limit = {
				THIS = {
					AUS_is_constituent = yes
				}
				NOT = {
					AND = {
						tag = HUN
						OR = { 
							has_global_flag = AUS_autonomous_transleithania
							has_global_flag = AUS_autonomous_transleithania_minorities
						}
					}
				}
			}
			AUS = {
				if = {
					limit = {
						PREV = { is_ai = no }
					}
					change_tag_from = PREV
				}
				annex_country = {
					target = PREV
					transfer_troops = yes
				}
			}
			THIS = {
				every_state = {
					limit = {
						is_core_of = PREV
					}
					add_core_of = AUS
				}
				every_unit_leader = {
					set_nationality = AUS
				}
			}
			else ={
				THIS = {
					every_core_state = {
						add_core_of = AUS
					}
				}
			}
		}
	}
	
	if = {
		limit = {
			CRO = {
				has_country_flag = trialist_extra
			}
		}
		set_cosmetic_tag = AUS_trialism_illyria
	}

	if = {
		limit = {
			CZE = {
				has_country_flag = trialist_extra
			}
		}
		set_cosmetic_tag = AUS_trialism_bohemia
	}

	if = {
		limit = {
			ENG = {
				has_country_flag = trialist_extra
			}
		}
		set_cosmetic_tag = AUS_trialism_britain
	}

		
	if = {
		limit = {
			ENG = {
				is_subject_of = AUS
			}
			ENG = {
				has_country_flag = trialist_extra
			}
		}
		ENG = {
			set_cosmetic_tag = AUS_trialism_britain
		}
		ROOT = {
			set_autonomy = {
				target = ENG
				autonomy_state = botde_constituent_integrated
			}
		}
		
	}
}

AUS_do_fed_name = {
	if = {
		limit = {
			OR = {
				has_government = social_democrat
				has_government = radical_socialist
			}
		}
		set_cosmetic_tag = AUS_danubian_federation_tag
	}
	
	if = {
		limit = {
			has_government = social_liberal
		}
		set_cosmetic_tag = AUS_united_states_tag
	}
	
	if = {
		limit = {
			OR = {
				has_government = social_conservative
				AND = {
					has_government = authoritarian_democrat
					NOT = {
						has_country_flag = AUS_VF_WON
					}
				}
			}
			#NOT = {
			#	has_global_flag = AUS_VF_SPLIT
			#}
		}
		if = {
			limit = {
				has_global_flag = AUS_ausgleich_hungary
			}
				set_cosmetic_tag = AUS_AHE
			else = {
				set_cosmetic_tag = AUS_austria_hungary_reformed_tag
			}
		}
	}
	
	if = {
		limit = {
			OR = {
				AND = {
					has_government = authoritarian_democrat
					has_country_flag = AUS_VF_WON
				}
				has_government = paternal_autocrat
				has_government = national_populist
			}
			NOT = {
				has_country_flag = AUS_karl_absolute
			}
		}
		set_cosmetic_tag = AUS_federal_state_tag
	}
	
	if = {
		limit = {
			has_country_flag = AUS_karl_absolute
		}
		set_cosmetic_tag = AUS_austria_hungary_reformed_karl_tag
	}
	
}

SKS_revolt_units_SER = {
	if = {
		limit = {
			has_template = "Četnici"
		}
		else = {
			division_template = {
				name = "Četnici"
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }
				}
			}
			division_template = {
				name = "Četnička milicija"
				regiments = {
					militia = { x = 0 y = 0 }
					militia = { x = 0 y = 1 }
					militia = { x = 0 y = 2 }
					militia = { x = 1 y = 0 }
					militia = { x = 1 y = 1 }
					militia = { x = 1 y = 2 }
					militia = { x = 2 y = 0 }
					militia = { x = 2 y = 1 }
					militia = { x = 2 y = 2 }
				}
			}
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnici\" division_template = \"Četnici\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnici\" division_template = \"Četnici\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnici\" division_template = \"Četnici\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnici\" division_template = \"Četnici\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnici\" division_template = \"Četnici\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Četnička milicija\" division_template = \"Četnička milicija\" start_experience_factor = 0.4" 
			owner = SKS
			allow_spawning_on_enemy_provs = yes
		}
	}
	set_temp_variable = { extra_divs_temp = THIS.paramilitary_value }
	multiply_temp_variable  = { extra_divs_temp = 1.5 }
	round_temp_variable = extra_divs_temp
	add_to_variable = { SKS.extra_divs_temp = SKS.extra_divs_meme }
	
	while_loop_effect = {
		limit = {
			check_variable = {
				var = THIS.extra_divs_temp
				value = 0
				compare = greater_than
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Četnici\" division_template = \"Četnici\" start_experience_factor = 0.2" 
				owner = SKS
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
}

BAN_revolt_units_ROM = {
	if = {
		limit = {
			has_template = "Îndrăznețul"
		}
		else = {
			division_template = {
				name = "Îndrăznețul"
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }
				}
			}
		}
	}
	if = {
		limit = {
			has_template = "Militia Îndrăznețul"
		}
		else = {
			division_template = {
				name = "Militia Îndrăznețul"
				regiments = {
					militia = { x = 0 y = 0 }
					militia = { x = 0 y = 1 }
					militia = { x = 0 y = 2 }
					militia = { x = 1 y = 0 }
					militia = { x = 1 y = 1 }
					militia = { x = 1 y = 2 }
					militia = { x = 2 y = 0 }
					militia = { x = 2 y = 1 }
					militia = { x = 2 y = 2 }
				}
			}
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Îndrăznețul\" division_template = \"Îndrăznețul\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Îndrăznețul\" division_template = \"Îndrăznețul\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Îndrăznețul\" division_template = \"Îndrăznețul\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Îndrăznețul\" division_template = \"Îndrăznețul\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Îndrăznețul\" division_template = \"Militia Îndrăznețul\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Îndrăznețul\" division_template = \"Militia Îndrăznețul\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Îndrăznețul\" division_template = \"Militia Îndrăznețul\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	set_variable = { BAN.extra_divs_temp = BAN.paramilitary_value }
	multiply_variable  = { BAN.extra_divs_temp = 1.5 }
	round_variable = BAN.extra_divs_temp
	add_to_variable = { BAN.extra_divs_temp = BAN.extra_divs_meme }
	
	while_loop_effect = {
		limit = {
			check_variable = {
				var = THIS.extra_divs_temp
				value = 0
				compare = greater_than
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Îndrăznețul\" division_template = \"Îndrăznețul\" start_experience_factor = 0.8" 
				owner = BAN
				allow_spawning_on_enemy_provs = yes
			}
		}
		subtract_from_variable = {
			var = BAN.extra_divs_temp
			value = 1
		}
	}
}

BUK_revolt_units_ROM = {
	if = {
		limit = {
			has_template = "Lăncier"
		}
		else = {
			division_template = {
				name = "Lăncier"
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }
				}
			}
		}
	}
	if = {
		limit = {
			has_template = "Militia Lăncier"
		}
		else = {
			division_template = {
				name = "Militia Lăncier"
				regiments = {
					militia = { x = 0 y = 0 }
					militia = { x = 0 y = 1 }
					militia = { x = 0 y = 2 }
					militia = { x = 1 y = 0 }
					militia = { x = 1 y = 1 }
					militia = { x = 1 y = 2 }
					militia = { x = 2 y = 0 }
					militia = { x = 2 y = 1 }
					militia = { x = 2 y = 2 }
				}
			}
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Lăncier\" division_template = \"Lăncier\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Lăncier\" division_template = \"Lăncier\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Lăncier\" division_template = \"Lăncier\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Lăncier\" division_template = \"Lăncier\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Lăncier\" division_template = \"Militia Lăncier\" start_experience_factor = 0.5" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Lăncier\" division_template = \"Militia Lăncier\" start_experience_factor = 0.5" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Lăncier\" division_template = \"Militia Lăncier\" start_experience_factor = 0.5" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Lăncier\" division_template = \"Militia Lăncier\" start_experience_factor = 0.5" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	set_variable = { BUK.extra_divs_temp = BUK.paramilitary_value }
	multiply_variable  = { BUK.extra_divs_temp = 1.5 }
	round_variable = BUK.extra_divs_temp
	add_to_variable = { BUK.extra_divs_temp = BUK.extra_divs_meme }
	
	while_loop_effect = {
		limit = {
			check_variable = {
				var = THIS.extra_divs_temp
				value = 0
				compare = greater_than
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Lăncier\" division_template = \"Lăncier\" start_experience_factor = 0.8" 
				owner = BUK
				allow_spawning_on_enemy_provs = yes
			}
		}
		subtract_from_variable = {
			var = BUK.extra_divs_temp
			value = 1
		}
	}
}

TRS_revolt_units_ROM = {
	if = {
		limit = {
			has_template = "Legiunea Frătiei"
		}
		else = {
			division_template = {
				name = "Legiunea Frătiei"
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }
				}
			}
		}
	}
	if = {
		limit = {
			has_template = "Militia Frătiei"
		}
		else = {
			division_template = {
				name = "Militia Frătiei"
				regiments = {
					militia= { x = 0 y = 0 }
					militia= { x = 0 y = 1 }
					militia= { x = 0 y = 2 }
					militia= { x = 1 y = 0 }
					militia= { x = 1 y = 1 }
					militia= { x = 1 y = 2 }
					militia= { x = 2 y = 0 }
					militia= { x = 2 y = 1 }
					militia= { x = 2 y = 2 }
				}
			}
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Militia Frătiei\" division_template = \"Militia Frătiei\" start_experience_factor = 0.4" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	set_temp_variable = { extra_divs_temp = THIS.paramilitary_value }
	multiply_temp_variable  = { extra_divs_temp = 1.5 }
	round_temp_variable = extra_divs_temp
	add_to_variable = { TRS.extra_divs_temp = TRS.extra_divs_meme }
	
	while_loop_effect = {
		limit = {
			check_variable = {
				var = THIS.extra_divs_temp
				value = 0
				compare = greater_than
			}
		}
		create_unit = { 
			division = "name = \"Legiunea Frătiei\" division_template = \"Legiunea Frătiei\" start_experience_factor = 0.2" 
			owner = PREV
			allow_spawning_on_enemy_provs = yes
		}
	}
}

AWR_units = {
	division_template = {
		name = "Schutzbundmiliz"
		regiments = {
			militia= { x = 0 y = 0 }
			militia= { x = 0 y = 1 }
			militia= { x = 0 y = 2 }
			militia= { x = 1 y = 0 }
			militia= { x = 1 y = 1 }
			militia= { x = 1 y = 2 }
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Infanteriedivision mit Artillerie\" division_template = \"Infanteriedivision mit Artillerie\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Infanteriedivision mit Artillerie\" division_template = \"Infanteriedivision mit Artillerie\" start_experience_factor = 0.4" 
			owner = AWR
			allow_spawning_on_enemy_provs = yes
		}
	}
	AUS = {
		random_owned_state = {
			create_unit = { 
				division = "name = \"Infanteriedivision\" division_template = \"Infanteriedivision\" start_experience_factor = 0.4" 
				owner = AWR
				allow_spawning_on_enemy_provs = yes
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
				owner = AWR
				allow_spawning_on_enemy_provs = yes
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
				owner = AWR
				allow_spawning_on_enemy_provs = yes
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Schutzbundmiliz\" division_template = \"Schutzbundmiliz\" start_experience_factor = 0.4" 
				owner = AWR
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	for_loop_effect = {
		end = 4
		value = troop
		random_list = {
			40 = {
				random_owned_state = {
					create_unit = { 
						division = "name = \"Infanteriedivision mit Artillerie\" division_template = \"Infanteriedivision mit Artillerie\" start_experience_factor = 0.4" 
						owner = AWR
						allow_spawning_on_enemy_provs = yes
					}
				}
			}
			60 = {
				
			}
		}
	}
}

HSR_units = {
	if = {
		limit = {
			NOT = { has_template = "Gyaloghadosztály" }
		}
		division_template = {
			name = "Gyaloghadosztály"
			division_names_group = HUN_INF_01
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }
				infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }
				infantry = { x = 2 y = 0 }
				infantry = { x = 2 y = 1 }
				infantry = { x = 2 y = 2 }
			}
		}
	}
	if = {
		limit = {
			NOT = { has_template = "Gyalogság tüzérséggel" }
		}
		division_template = {
			name = "Gyalogság tüzérséggel"
			division_names_group = HUN_INF_01
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }
				infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }
				infantry = { x = 2 y = 0 }
				infantry = { x = 2 y = 1 }
				infantry = { x = 2 y = 2 }
			}
			support = {
				artillery = { x = 0 y = 0 }
			}
		}
	}

	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyalogság tüzérséggel\" division_template = \"Gyalogság tüzérséggel\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyalogság tüzérséggel\" division_template = \"Gyalogság tüzérséggel\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyalogság tüzérséggel\" division_template = \"Gyalogság tüzérséggel\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyalogság tüzérséggel\" division_template = \"Gyalogság tüzérséggel\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	random_owned_state = {
		create_unit = { 
			division = "name = \"Gyalogság tüzérséggel\" division_template = \"Gyalogság tüzérséggel\" start_experience_factor = 0.4" 
			owner = HSR
			allow_spawning_on_enemy_provs = yes
		}
	}
	
	HUN = {
		random_owned_state = {
			create_unit = { 
				division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.7" 
				owner = HSR
				allow_spawning_on_enemy_provs = yes
			}
		}
		random_owned_state = {
			create_unit = { 
				division = "name = \"Gyaloghadosztály\" division_template = \"Gyaloghadosztály\" start_experience_factor = 0.7" 
				owner = HSR
				allow_spawning_on_enemy_provs = yes
			}
		}
	}
	for_loop_effect = {
		end = 5
		value = troop
		random_list = {
			40 = {
				random_owned_state = {
					create_unit = { 
						division = "name = \"Gyalogság tüzérséggel\" division_template = \"Gyalogság tüzérséggel\" start_experience_factor = 0.4" 
						owner = HSR
						allow_spawning_on_enemy_provs = yes
					}
				}
			}
			60 = {
				
			}
		}
	}
}

SZK_do_the_awesome = {
	if = {
		limit = {
			NOT = {
				country_exists = SZK
			}
		}
		SZK = {
			transfer_state = 789
			add_state_core = 789
		}
	}
	
	SZK = {
		set_temp_variable = { THIS.extra_divs_temp = THIS.extra_divs }
		round_temp_variable = THIS.extra_divs_temp
		
		hidden_effect = {
			division_template = {
				name = "Székely Hadosztály"
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }
				}
				is_locked = no
				support = {
					engineer = { x = 0 y = 0 }
					logistics_company = { x = 0 y = 1 }
					artillery = { x = 0 y = 2 }
				}
			}
			division_template = {
				name = "Székely Ezred"
				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }
					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }
					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }
				}
				is_locked = no
				support = {
					artillery = { x = 0 y = 2 }
				}
			}
			capital_scope = {
				create_unit = { 
					division = "name = \"Székely Hadosztály\" division_template = \"Székely Hadosztály\" start_experience_factor = 1" 
					owner = PREV
					count = 2
					allow_spawning_on_enemy_provs = yes
				}
				
				while_loop_effect = {
					limit = {
						check_variable = {
							var = SZK.extra_divs_temp
							value = 0
							compare = greater_than
						}
					}
					create_unit = { 
						division = "name = \"Székely Ezred\" division_template = \"Székely Ezred\" start_experience_factor = 0.33" 
						owner = PREV
						allow_spawning_on_enemy_provs = yes
					}
					subtract_from_temp_variable = {
						var = THIS.extra_divs_temp
						value = 1
					}
				}
			}
		}
		declare_war_on = {
			target = ROM
			type = annex_everything
		}
		add_equipment_to_stockpile = {
			type = infantry_equipment
			amount = SZK.extra_guns
		}
	}
}


AUS_add_banat_array = {
	custom_effect_tooltip = AUS_banat_added
	hidden_effect = {
		set_variable = {
			var = BAN.subject_revolt_progress
			value = 0.25
		}
		add_to_array = { ROOT.austria_minority_array = BAN }
		set_global_flag = BAN_on_array
	}
}

AUS_add_krakow_array = {
	custom_effect_tooltip = AUS_krakow_added
	hidden_effect = {
		set_variable = {
			var = KRK.subject_revolt_progress
			value = 0.25
		}
		add_to_array = { ROOT.austria_minority_array = KRK }
		set_global_flag = KRK_on_array
	}
}

AUS_add_germboh_array = {
	custom_effect_tooltip = AUS_germboh_added
	hidden_effect = {
		set_variable = {
			var = PGU.subject_revolt_progress
			value = 0.25
		}
		add_to_array = { ROOT.austria_minority_array = PGU }
		set_global_flag = PGU_on_array
	}
}

AUS_tally_ausgleich = { #-1 successes - Hungarian revolt. 0-2 successes - bad. 3-5 successes - meh. 6+ successes - good.
	if = {
		limit = {
			check_variable = {
				var = global.ausgleich_successes
				value = -1
				compare = less_than_or_equals
			}
		}
		set_global_flag = AUS_terrible_ausgleich
	}
	
	if = {
		limit = {
			check_variable = {
				var = global.ausgleich_successes
				value = 0
				compare = greater_than_or_equals
			}
			check_variable = {
				var = global.ausgleich_successes
				value = 2
				compare = less_than_or_equals
			}
		}
		set_global_flag = AUS_bad_ausgleich
	}
	
	if = {
		limit = {
			check_variable = {
				var = global.ausgleich_successes
				value = 3
				compare = greater_than_or_equals
			}
			check_variable = {
				var = global.ausgleich_successes
				value = 5
				compare = less_than_or_equals
			}
		}
		set_global_flag = AUS_meh_ausgleich
	}
	
	if = {
		limit = {
			check_variable = {
				var = global.ausgleich_successes
				value = 6
				compare = greater_than_or_equals
			}
		}
		set_global_flag = AUS_good_ausgleich
	}
	
	if = {
		limit = {
			has_global_flag = AUS_autonomous_transleithania_minorities
		}
		country_event = {
			id = bdeausgleich.59
			days = 5
		}
	}
	
	if = {
		limit = {
			has_global_flag = AUS_status_quo_1927
		}
		country_event = {
			id = bdeausgleich.71
			days = 11
		}
	}
	
	country_event = {
		id = bdeausgleich.58
		days = 11
	}
	
}







BOTDE_minority_pulse_test = {
	for_each_scope_loop = {
		array = ROOT.austria_minority_array
		if = {
			limit = {
				NOT = {
					AND = {
						has_global_flag = AUS_ausgleich_ongoing
						has_global_flag = AUS_ausgleich_peoples
					}
					has_country_flag = no_minority_revolt
				}
			}
			do_minority_rise = yes
			do_minority_rise_advanced_calc = yes
		}
		
		if = {
			limit = {
				check_variable = {
					var = THIS.subject_revolt_progress
					value = 1
					compare = greater_than_or_equals
				}
				NOT = {
					OR = {
						has_global_flag = BOTDE_imminent_minority_revolt_temp
						has_global_flag = recent_minority_revolt
						has_country_flag = no_minority_revolt
						has_country_flag = BOTDE_revolt_hold
						AND = {
							tag = MNT
							exists = yes
						}
					}
				}
				all_other_country = {
					is_in_array = { ROOT.austria_minority_array = THIS }
					NOT = {
						has_country_flag = BOTDE_imminent_minority_revolt
					}
				}
			}
			set_global_flag = BOTDE_imminent_minority_revolt_temp
			THIS = {
				save_global_event_target_as = BOTDE_imminent_minority_revolt
				set_country_flag = BOTDE_imminent_minority_revolt
				#country_event = revolt.10
				capital_scope = {
					owner = {
						scoped_sound_effect = "AUS_minor_imminent_revolt"
						save_global_event_target_as = BOTDE_imminent_minority_revolt_owner
						set_country_flag = BOTDE_imminent_minority_revolt_owner
						activate_mission = BOTDE_imminent_minority_revolt_headsup
					}
				}
			}
			AUS = {
				scoped_sound_effect = "AUS_minor_imminent_revolt"
				activate_mission = BOTDE_imminent_minority_revolt_headsup
			}			
		}
		if = {
			limit = {
				owner = {
					has_country_flag = AUS_evidenzbureau_focus
				}
			}
			add_to_variable = {
				var = THIS.subject_revolt_progress
				value = -0.025
			}
		}
		if = {
			limit = {
				has_country_flag = BOTDE_revolt_hold
				check_variable = {
					var = THIS.subject_revolt_progress
					value = 0.95
					compare = greater_than_or_equals
				}
				NOT = {
					has_country_flag = BOTDE_ready_held_revolt
				}
			}
			set_country_flag = BOTDE_ready_held_revolt
		}
		if = {
			limit = {
				has_country_flag = BOTDE_ready_held_revolt
				check_variable = {
					var = THIS.subject_revolt_progress
					value = 0.74
					compare = less_than
				}
			}
			clr_country_flag = BOTDE_ready_held_revolt
		}
	}
}

BOTDE_minority_test_for_revolt_extra = {
	if = {
		limit = {
			has_country_flag = BOTDE_revolt_hold
			check_variable = {
				var = THIS.subject_revolt_progress
				value = 0.95
				compare = greater_than_or_equals
			}
			NOT = {
				has_country_flag = BOTDE_ready_held_revolt
			}
		}
		set_country_flag = BOTDE_ready_held_revolt
	}
	if = {
		limit = {
			has_country_flag = BOTDE_ready_held_revolt
			check_variable = {
				var = THIS.subject_revolt_progress
				value = 0.74
				compare = less_than
			}
		}
		clr_country_flag = BOTDE_ready_held_revolt
	}
}

BOTDE_5BW_peace = {
	
	for_each_scope_loop = { #Array for all participating Belgrade Pact tags fighting against Austria
		array = global.AUS_5BW_BP_array
		log = "[THIS.GetName] on array global.AUS_5BW_BP_array"
		if = {
			limit = {
				has_capitulated = yes
			}
			add_to_temp_array = { array = global.fucked_capped_5bw }
			every_subject_country = {
				limit = {
					has_war_with = AUS
				}
				add_to_temp_array = { array = global.fucked_capped_5bw }
			}
			else = {
				every_controlled_state = {
					limit = {
						NOT = {
							is_owned_by = PREV
						}
						OR = {
							is_core_of = PREV
							is_claimed_by = PREV
							if = {
								limit = {
									PREV = { tag = SER }
								}
								OR = {
									is_core_of = BOS
									is_core_of = SKS
								}
							}
						}
						AUS_state_is_owned_by_aus_or_subjects = yes
					}
					owner = { #Denote state owner and save
						if = {
							limit = {
								NOT = {
									is_in_array = { global.5bw_AH_rereceive = THIS }
								}
							}
							add_to_temp_array = { global.5bw_AH_rereceive = THIS }
							log = "[THIS.GetName] on array global.5bw_AH_rereceive"
						}
					}
					add_to_temp_array = { global.BW_GAINZ = THIS }
					PREV = {
						transfer_state = PREV.PREV
					}
				}
			}
		}
	}
	
	for_each_scope_loop = {
		array = global.BW_GAINZ
		log = "[THIS.GetName] on array global.BW_GAINZ"
		if = {
			limit = {
				is_core_of = BAN
				BAN = {
					OR = {
						is_in_faction_with = ROM
						is_subject_of = ROM
					}
				}
				NOT = {
					is_controlled_by = TRS
				}
			}
			BAN = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
		}
		else_if = {
			limit = {
				is_core_of = BUK
				BUK = {
					OR = {
						is_in_faction_with = ROM
						is_subject_of = ROM
					}
				}
				NOT = {
					is_controlled_by = TRS
				}
			}
			BUK = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
		}
		else_if = {
			limit = {
				is_core_of = TRS
				TRS = {
					OR = {
						is_in_faction_with = ROM
						is_subject_of = ROM
					}
				}
			}
			TRS = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
		}
		else_if = {
			limit = {
				is_controlled_by = ROM
				OR = {
					is_core_of = ROM
					is_claimed_by = ROM
				}
			}
			ROM = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
			
		}
		if = {
			limit = {
				is_core_of = SKS
				SKS = {
					OR = {
						is_in_faction_with = SER
						is_subject_of = SER
					}
				}
				NOT = {
					is_controlled_by = BOS
				}
			}
			SKS = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
		}
		else_if = {
			limit = {
				is_core_of = BOS
				BOS = {
					OR = {
						is_in_faction_with = SER
						is_subject_of = SER
					}
				}
			}
			BOS = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
		}
		else_if = {
			limit = {
				is_core_of = MNT
			}
			MNT = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
		}
		else_if = {
			limit = {
				is_controlled_by = SER
				OR = {
					is_core_of = SER
					is_claimed_by = SER
				}
			}
			SER = {
				transfer_state = PREV
				save_event_target_as = BW_GAINZER
			}
			
		}
	}
	
	for_each_scope_loop = { #Return exclaves to original owner
		array = global.5bw_AH_rereceive
		log = "[THIS.GetName] on array global.5bw_AH_rereceive"
		save_event_target_as = AH_rereceiver
		event_target:BW_GAINZER = {
			log = "[THIS.GetName] is event target BW_GAINZER"
			every_owned_state = {
				limit = {
					is_in_array = { global.BW_GAINZ = THIS }
					OR = {
						is_core_of = event_target:AH_rereceiver
						is_claimed_by = event_target:AH_rereceiver
					}
					NOT = {
						is_in_home_area = yes
						if = {
							limit = {
								OR = {
									is_owned_by = TRS
									is_owned_by = BAN
									is_owned_by = BUK
								}
							}
							PREV = { is_owner_neighbor_of = ROM }
						}
						if = {
							limit = {
								OR = {
									is_owned_by = SKS
									is_owned_by = BOS
									is_owned_by = MNT
								}
							}
							PREV = { is_owner_neighbor_of = SER }
						}
					}
				}
				log = "[THIS.GetName] returning to previous owner"
				event_target:AH_rereceiver = {
					transfer_state = PREV
				}
			}
		}
	}
	
	for_each_scope_loop = { #Annex all capped subjects into capital owner, AUS if the nation is a subject of it
		array = global.fucked_capped_5bw
		log = "[THIS.GetName] on array global.fucked_capped_5bw"
		capital_scope = {
			controller = {
				if = {
					limit = {
						OR = {
							is_subject_of = AUS
							is_in_faction_with = AUS
						}
					}
					PREV = {
						every_subject_country = {
							AUS = {
								annex_country = {
									target = PREV
								}
							}
						}
					}
					AUS = {
						annex_country = {
							target = PREV
						}
					}
					else = {
						annex_country = {
							target = PREV
						}
						every_subject_country = {
							PREV = {
								annex_country = {
									target = PREV
								}
							}
						}
					}
				}
			}
		}
	}
}

BOTDE_5BW_init = {
	every_country = {
		limit = {
			OR = {
				tag = SER
				tag = ROM
				tag = SKS
				tag = TRS
				tag = BOS
				tag = BAN
				tag = BUK
				tag = MNT
				tag = GRE
			}
			has_war_with = AUS
		}
		save_global_event_target_as = 5BW_BP
		add_to_array = {
			array = global.AUS_5BW_BP_array
		}
	}
	
	every_country = {
		limit = {
			OR = {
				tag = AUS
				is_in_faction_with = AUS
			}
			OR = {
				has_war_with = SER
				has_war_with = ROM
			}
		}
		save_global_event_target_as = 5BW_AH
		add_to_array = {
			array = global.AUS_5BW_AH_array
		}
	}
}

THIS_minority_stop_revolt = {
	custom_effect_tooltip = THIS_unable_to_revolt
	set_country_flag = no_minority_revolt
}

AUS_RUS_do_oil_upgrade = {
	if = {
		limit = {
			tag = RUS
		}
		add_to_variable = {
			var = AUS.AUS_RUS_base_fuel_gain
			value = 300
		}
		add_to_variable = {
			var = AUS.AUS_RUS_production_oil_factor
			value = 0.05
		}
		add_to_variable = {
			var = AUS.AUS_RUS_fuel_gain_factor
			value = 0.04
		}
	}
	if = {
		limit = {
			tag = AUS
		}
		add_to_variable = {
			var = RUS.AUS_RUS_base_fuel_gain
			value = 400
		}
		add_to_variable = {
			var = RUS.AUS_RUS_production_oil_factor
			value = 0.05
		}
		add_to_variable = {
			var = RUS.AUS_RUS_fuel_gain_factor
			value = 0.04
		}
	}
	add_to_variable = {
		var = global.AUS_RUS_max_refineries
		value = 2
	}
}

AUS_RUS_do_synth = {
	if = {
		limit = {
			tag = RUS
		}
		add_to_variable = {
			var = AUS.AUS_RUS_synth_oil_research_bonus
			value = 0.03
		}
		add_to_variable = {
			var = AUS.AUS_RUS_production_speed_synthetic_refinery_factor
			value = 0.03
		}
	}
	if = {
		limit = {
			tag = AUS
		}
		add_to_variable = {
			var = RUS.AUS_RUS_synth_oil_research_bonus
			value = 0.03
		}
		add_to_variable = {
			var = RUS.AUS_RUS_production_speed_synthetic_refinery_factor
			value = 0.03
		}
	}
}

remove_all_ministers_but_for = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
		remove_ideas_with_trait = vice_president
		remove_ideas_with_trait = taoiseach
	}
}

AUS_become_constituent = {
	add_to_array = { global.constituents_array = THIS }
	set_country_flag = CONST_proper
}

AUS_remove_constituent = {
	remove_from_array = { global.constituents_array = THIS }
	clr_country_flag = CONST_proper
}

AUS_become_minority = {
	add_to_array = { global.minorities_array = THIS }
}

ROM_help_serb_player_revolt = {
	if = {
		limit = {
			power_balance_value = { #King Carol
				id = ROM_great_game_bop
				value > 0.01
			}
			NOT = {
				country_exists = BAN
			}
		}
		country_event = {
			id = botdepact.3
			days = 10
			random = 240
		}
	}
	
	if = {
		limit = {
			power_balance_value = { #King Carol
				id = ROM_great_game_bop
				value > 0.01
			}
			NOT = {
				country_exists = BUK
			}
		}
		country_event = {
			id = botdepact.4
			days = 10
			random = 240
		}
	}
	
	if = {
		limit = {
			power_balance_value = { #Conducator
				id = ROM_great_game_bop
				value < 0.00
			}
			NOT = {
				country_exists = TRS
			}
		}
		country_event = {
			id = botdepact.5
			days = 10
			random = 240
		}
	}
}

SER_help_gypsy_copperwire_stealer_revolt = {
	random_list = {
		50 = {
			modifier = {
				factor = 0
				country_exists = SKS
			}
			country_event = {
				id = botdepact.6
				days = 10
				random = 240
			}
		}
		50 = {
			modifier = {
				factor = 0
				country_exists = BOS
			}
			country_event = {
				id = botdepact.7
				days = 10
				random = 240
			}
		}
	}
}

FifthBW_subject_transfer_control = {
	if = {
		limit = {
			is_in_faction_with = SKS
		}
		SKS = {
			every_controlled_state = {
				limit = {
					NOT = {
						is_owned_by = PREV
						is_claimed_by = PREV
						is_core_of = PREV
					}
					owner = {
						has_war_with = SER
					}
				}
				SER = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	if = {
		limit = {
			is_in_faction_with = BOS
		}
		BOS = {
			every_controlled_state = {
				limit = {
					NOT = {
						is_owned_by = PREV
						is_claimed_by = PREV
						is_core_of = PREV
					}
					owner = {
						has_war_with = SER
					}
				}
				SER = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	if = {
		limit = {
			is_in_faction_with = MNT
		}
		MNT = {
			every_controlled_state = {
				limit = {
					NOT = {
						is_owned_by = PREV
						is_claimed_by = PREV
						is_core_of = PREV
					}
					owner = {
						has_war_with = SER
					}
				}
				SER = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	
	
	
	
	
	
	
	
	if = {
		limit = {
			is_in_faction_with = TRS
		}
		TRS = {
			every_controlled_state = {
				limit = {
					NOT = {
						is_owned_by = PREV
						is_claimed_by = PREV
						is_core_of = PREV
					}
					owner = {
						has_war_with = ROM
					}
				}
				ROM = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	if = {
		limit = {
			is_in_faction_with = BUK
		}
		BUK = {
			every_controlled_state = {
				limit = {
					NOT = {
						is_owned_by = PREV
						is_claimed_by = PREV
						is_core_of = PREV
					}
					owner = {
						has_war_with = ROM
					}
				}
				ROM = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	if = {
		limit = {
			is_in_faction_with = BAN
		}
		BAN = {
			every_controlled_state = {
				limit = {
					NOT = {
						is_owned_by = PREV
						is_claimed_by = PREV
						is_core_of = PREV
					}
					owner = {
						has_war_with = ROM
					}
				}
				ROM = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	if = {
		limit = {
			ROM = {
				is_ai = yes
			}
		}
		ROM = {
			every_controlled_state = {
				limit = {
					OR = {
						is_claimed_by = SER
						is_core_of = SER
					}
					NOT = {
						is_claimed_by = ROM
						is_core_of = ROM
						is_owned_by = ROM
					}
				}
				SER = {
					set_state_controller = PREV
				}
			}
		}
	}
	
	if = {
		limit = {
			SER = {
				is_ai = yes
			}
		}
		SER = {
			every_controlled_state = {
				limit = {
					OR = {
						is_claimed_by = ROM
						is_core_of = ROM
					}
					NOT = {
						is_claimed_by = SER
						is_core_of = SER
						is_owned_by = SER
					}
				}
				ROM = {
					set_state_controller = PREV
				}
			}
		}
	}
}

AUS_hide_the_ark = {
	#random_state = {
	#	limit = {
	#		OR = {
	#			state = 923 
	#			state = 275 
	#			state = 33 
	#			state = 121 
	#			state = 113 
	#		}
	#	}
	#}
	random_list = {
		120 = {
			823 = { #Tigray; Church of Our Lady Mary of Zion
				set_state_flag = houses_the_ark
			}
		}
		80 = {
			275 = { #Transvaal; Dumghe Mountain
				set_state_flag = houses_the_ark
			}
		}
		9 = {
			33 = { #France; Chartres Cathedral
				set_state_flag = houses_the_ark
			}
		}
		6 = {
			121 = { #Scotland; Rosslyn Chapel
				set_state_flag = houses_the_ark
			}
		}
		3 = {
			113 = { #Ireland; Hill of Tara
				set_state_flag = houses_the_ark
			}
		}
		1 = {
			454 = { #Jerusalem
				set_state_flag = houses_the_ark
			}
		}
	}
	
	
}

create_pie_chart = {
	clear_array = pie_chart
	resize_array = {
		array = pie_chart
		value = 8 # 8 is value for authoritarian_democrat frame, so we don't have to make a loop for it
		size = 100 # 100 pieces, each percent is one piece
	}
	set_temp_variable = { authoritarian_democrat_pop = global.EU_party_averages_authoritarian_democrat }
	multiply_temp_variable = { authoritarian_democrat_pop = 100 }
	round_temp_variable = authoritarian_democrat_pop

	set_temp_variable = { totalist_pop = global.EU_party_averages_totalist }
	multiply_temp_variable = { totalist_pop = 100 }
	round_temp_variable = totalist_pop 
	set_variable = { ROOT.last_idx = authoritarian_democrat_pop }
	add_to_temp_variable = { totalist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = totalist_pop
		set_variable = { pie_chart^v = 1 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { syndicalist_pop = global.EU_party_averages_syndicalist }
	multiply_temp_variable = { syndicalist_pop = 100 }
	round_temp_variable = syndicalist_pop 
	add_to_temp_variable = { syndicalist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = syndicalist_pop
		set_variable = { pie_chart^v = 2 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { radical_socialist_pop = global.EU_party_averages_radical_socialist }
	multiply_temp_variable = { radical_socialist_pop = 100 }
	round_temp_variable = radical_socialist_pop 
	add_to_temp_variable = { radical_socialist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = radical_socialist_pop
		set_variable = { pie_chart^v = 3 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { social_democrat_pop = global.EU_party_averages_social_democrat }
	multiply_temp_variable = { social_democrat_pop = 100 }
	round_temp_variable = social_democrat_pop 
	add_to_temp_variable = { social_democrat_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = social_democrat_pop
		set_variable = { pie_chart^v = 4 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { social_liberal_pop = global.EU_party_averages_social_liberal }
	multiply_temp_variable = { social_liberal_pop = 100 }
	round_temp_variable = social_liberal_pop
	add_to_temp_variable = { social_liberal_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = social_liberal_pop
		set_variable = { pie_chart^v = 5 }
		add_to_variable = { ROOT.last_idx = 1 }
	}
	
	set_temp_variable = { market_liberal_pop = global.EU_party_averages_market_liberal }
	multiply_temp_variable = { market_liberal_pop = 100 }
	round_temp_variable = market_liberal_pop
	add_to_temp_variable = { market_liberal_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = market_liberal_pop
		set_variable = { pie_chart^v = 6 }
		add_to_variable = { ROOT.last_idx = 1 }
	}
	
	set_temp_variable = { social_conservative_pop = global.EU_party_averages_social_conservative }
	multiply_temp_variable = { social_conservative_pop = 100 }
	round_temp_variable = social_conservative_pop
	add_to_temp_variable = { social_conservative_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = social_conservative_pop
		set_variable = { pie_chart^v = 7 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { paternal_autocrat_pop = global.EU_party_averages_paternal_autocrat }
	multiply_temp_variable = { paternal_autocrat_pop = 100 }
	round_temp_variable = paternal_autocrat_pop 
	add_to_temp_variable = { paternal_autocrat_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = paternal_autocrat_pop
		set_variable = { pie_chart^v = 9 }
	}

	set_temp_variable = { national_populist_pop = global.EU_party_averages_national_populist }
	multiply_temp_variable = { national_populist_pop = 100 }
	round_temp_variable = national_populist_pop 
	add_to_temp_variable = { national_populist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = national_populist_pop
		set_variable = { pie_chart^v = 10 }
	}

	clear_variable = ROOT.last_idx
	add_to_variable = { pie_chart_dirty = 1 }
}

EUU_avg_political_parties = {
	set_variable = { var = global.EU_party_averages_totalist value = 0 }
	set_variable = { var = global.EU_party_averages_syndicalist value = 0 }
	set_variable = { var = global.EU_party_averages_radical_socialist value = 0 }
	set_variable = { var = global.EU_party_averages_social_democrat value = 0 }
	set_variable = { var = global.EU_party_averages_social_liberal value = 0 }
	set_variable = { var = global.EU_party_averages_market_liberal value = 0 }
	set_variable = { var = global.EU_party_averages_social_conservative value = 0 }
	set_variable = { var = global.EU_party_averages_authoritarian_democrat value = 0 }
	set_variable = { var = global.EU_party_averages_paternal_autocrat value = 0 }
	set_variable = { var = global.EU_party_averages_national_populist value = 0 }
	for_each_scope_loop = {
		array = EUU.EUU_EU_members
		
		set_temp_variable = { totalist_pop = party_popularity@totalist }
		add_to_variable = { var = global.EU_party_averages_totalist value = totalist_pop }
		
		set_temp_variable = { syndicalist_pop = party_popularity@syndicalist }
		add_to_variable = { var = global.EU_party_averages_syndicalist value = syndicalist_pop }
		
		set_temp_variable = { radical_socialist_pop = party_popularity@radical_socialist }
		add_to_variable = { var = global.EU_party_averages_radical_socialist value = radical_socialist_pop }
		
		set_temp_variable = { social_democrat_pop = party_popularity@social_democrat }
		add_to_variable = { var = global.EU_party_averages_social_democrat value = social_democrat_pop }
		
		set_temp_variable = { social_liberal_pop = party_popularity@social_liberal }
		add_to_variable = { var = global.EU_party_averages_social_liberal value = social_liberal_pop }
		
		set_temp_variable = { market_liberal_pop = party_popularity@market_liberal }
		add_to_variable = { var = global.EU_party_averages_market_liberal value = market_liberal_pop }
		
		set_temp_variable = { social_conservative_pop = party_popularity@social_conservative }
		add_to_variable = { var = global.EU_party_averages_social_conservative value = social_conservative_pop }
		
		set_temp_variable = { authoritarian_democrat_pop = party_popularity@authoritarian_democrat }
		add_to_variable = { var = global.EU_party_averages_authoritarian_democrat value = authoritarian_democrat_pop }
		
		set_temp_variable = { paternal_autocrat_pop = party_popularity@paternal_autocrat }
		add_to_variable = { var = global.EU_party_averages_paternal_autocrat value = paternal_autocrat_pop }
		
		set_temp_variable = { national_populist_pop = party_popularity@national_populist }
		add_to_variable = { var = global.EU_party_averages_national_populist value = national_populist_pop }
		
		
		
	}
	divide_variable = {
		var = global.EU_party_averages_totalist
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_syndicalist
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_radical_socialist
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_social_democrat
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_social_liberal
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_market_liberal
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_social_conservative
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_authoritarian_democrat
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_paternal_autocrat
		value = global.european_union_members
	}
	divide_variable = {
		var = global.EU_party_averages_national_populist
		value = global.european_union_members
	}
}

EUU_subtract_one_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = -1
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}
EUU_subtract_ten_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = -10
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}
EUU_subtract_hundred_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = -100
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}
EUU_subtract_thousand_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = -1000
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}



EUU_add_one_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = 1
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}
EUU_add_ten_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = 10
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}
EUU_add_hundred_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = 100
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}
EUU_add_thousand_pressure_counter = {
	add_to_variable = {
		var = EUM.influence_to_add
		value = 1000
	}
	clamp_variable = {
		var = EUM.influence_to_add
		min = 0
	}
	EUU_insurance = yes
}

EUU_add_pressure_to_nation = {
	add_to_variable = {
		var = EUM.EU_pressure
		value = EUM.influence_to_add
	}
	subtract_from_variable = {
		var = global.EU_pressure_value
		value = EUM.influence_to_add
	}
	set_variable = {
		var = EUM.influence_to_add
		value = 0
	}
	EUU_close_influence_menu = yes
	EUU_insurance = yes
}

EUU_close_influence_menu = {
	set_variable = {
		var = EUM.influence_to_add
		value = 0
	}
	clr_country_flag = EUU_influence_menu_open
	event_target:EUU_influence_target = {
		clr_country_flag = EUM_flag
	}
	clear_global_event_target = EUU_influence_target
}








EUU_insurance = {
	set_variable = {
		var = global.influence_one
		value = EUM.influence_to_add
	}
	
	set_variable = {
		var = global.influence_ten
		value = EUM.influence_to_add
	}
	
	set_variable = {
		var = global.influence_hundred
		value = EUM.influence_to_add
	}
	
	set_variable = {
		var = global.influence_thousand
		value = EUM.influence_to_add
	}

	add_to_variable = {
		var = global.influence_one
		value = 1
	}
	add_to_variable = {
		var = global.influence_ten
		value = 10
	}
	add_to_variable = {
		var = global.influence_hundred
		value = 100
	}
	add_to_variable = {
		var = global.influence_thousand
		value = 1000
	}
	
	
	
	
	
	
	set_variable = {
		var = global.influence_one_subtract
		value = EUM.influence_to_add
	}
	
	set_variable = {
		var = global.influence_ten_subtract
		value = EUM.influence_to_add
	}
	
	set_variable = {
		var = global.influence_hundred_subtract
		value = EUM.influence_to_add
	}
	
	set_variable = {
		var = global.influence_thousand_subtract
		value = EUM.influence_to_add
	}

	add_to_variable = {
		var = global.influence_one_subtract
		value = -1
	}
	add_to_variable = {
		var = global.influence_ten_subtract
		value = -10
	}
	add_to_variable = {
		var = global.influence_hundred_subtract
		value = -100
	}
	add_to_variable = {
		var = global.influence_thousand_subtract
		value = -1000
	}
}

AUS_socialist_republic_modifier_remove = {
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist_incorrect
	}
	
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist
	}
}

AUS_socialist_republic_modifier_tot = {
	if = {
		limit = {
			has_government = totalist
		}
		add_power_balance_modifier = {
			id = AUS_socialist_republic_bop
			modifier = AUS_socialist_republic_bop_totalist
		}
		else = {
			add_power_balance_modifier = {
				id = AUS_socialist_republic_bop
				modifier = AUS_socialist_republic_bop_totalist_incorrect
			}
		}
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie_incorrect
	}
	
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie
	}
}

AUS_socialist_republic_modifier_syn = {
	if = {
		limit = {
			has_government = syndicalist
		}
		add_power_balance_modifier = {
			id = AUS_socialist_republic_bop
			modifier = AUS_socialist_republic_bop_syndie
		}
		else = {
			add_power_balance_modifier = {
				id = AUS_socialist_republic_bop
				modifier = AUS_socialist_republic_bop_syndie_incorrect
			}
		}
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist_incorrect
	}
	
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist
	}
}

AUS_socialist_republic_modifier_rso = {
	if = {
		limit = {
			has_government = radical_socialist
		}
		add_power_balance_modifier = {
			id = AUS_socialist_republic_bop
			modifier = AUS_socialist_republic_bop_moderate_left
		}
		else = {
			add_power_balance_modifier = {
				id = AUS_socialist_republic_bop
				modifier = AUS_socialist_republic_bop_moderate_left_incorrect
			}
		}
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie_incorrect
	}
	
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_right
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie
	}
}

AUS_socialist_republic_modifier_sde = {
	if = {
		limit = {
			has_government = social_democrat
		}
		add_power_balance_modifier = {
			id = AUS_socialist_republic_bop
			modifier = AUS_socialist_republic_bop_moderate_right
		}
		else = {
			add_power_balance_modifier = {
				id = AUS_socialist_republic_bop
				modifier = AUS_socialist_republic_bop_moderate_right_incorrect
			}
		}
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left_incorrect
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie_incorrect
	}
	
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_totalist
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_moderate_left
	}
	remove_power_balance_modifier = {
		id = AUS_socialist_republic_bop
		modifier = AUS_socialist_republic_bop_syndie
	}
}

AUS_rev_progress_2 = {
	add_to_variable = {
		var = THIS.revolution_progress
		value = 0.02
	}
	clamp_variable = {
		var = THIS.revolution_progress
		min = 0
		max = 1
	}
	custom_effect_tooltip = AUS_rev_progress_2_tt
}

AUS_rev_progress_3 = {
	add_to_variable = {
		var = THIS.revolution_progress
		value = 0.03
	}
	clamp_variable = {
		var = THIS.revolution_progress
		min = 0
		max = 1
	}
	custom_effect_tooltip = AUS_rev_progress_3_tt
}

AUS_rev_progress_5 = {
	add_to_variable = {
		var = THIS.revolution_progress
		value = 0.05
	}
	clamp_variable = {
		var = THIS.revolution_progress
		min = 0
		max = 1
	}
	custom_effect_tooltip = AUS_rev_progress_5_tt
}

AUS_index_subgroup_strengths = {
	add_to_array = {
		array = global.AUS_socialist_republic_bop_values
		value = THIS.anarchist_power
	}
	add_to_array = {
		array = global.AUS_socialist_republic_bop_values
		value = THIS.unionist_power
	}
	add_to_array = {
		array = global.AUS_socialist_republic_bop_values
		value = THIS.DAP_power
	}
	
	
	
	find_highest_in_array = {
		array = global.AUS_socialist_republic_bop_values
		value = temp_high_power
		index = temp_high_power_index #what?
	}
	
	if = {
		limit = {
			check_variable = {
				var = AUS_socialist_republic_bop_values
				value = THIS.anarchist_power
				compare = equals
			}
		}
		set_country_flag = AUS_high_anarchist
		else_if = {
			limit = {
				check_variable = {
					var = AUS_socialist_republic_bop_values
					value = THIS.unionist_power
					compare = equals
				}
			}
			set_country_flag = AUS_high_unionist
			else_if = {
				limit = {
					check_variable = {
						var = AUS_socialist_republic_bop_values
						value = THIS.DAP_power
						compare = equals
					}
				}
				set_country_flag = AUS_high_DAP
			}
		}
	}
}

AUS_anarchist_power_3 = {
	custom_effect_tooltip = AUS_anarchist_powerplus3
	add_to_variable = {
		var = THIS.anarchist_power
		value = 0.03
	}
}
AUS_anarchist_power_5 = {
	custom_effect_tooltip = AUS_anarchist_powerplus5
	add_to_variable = {
		var = THIS.anarchist_power
		value = 0.05
	}
}

AUS_unionist_power_3 = {
	custom_effect_tooltip = AUS_unionist_powerplus3
	add_to_variable = {
		var = THIS.unionist_power
		value = 0.03
	}
}
AUS_unionist_power_5 = {
	custom_effect_tooltip = AUS_unionist_powerplus5
	add_to_variable = {
		var = THIS.unionist_power
		value = 0.05
	}
}

AUS_DAP_power_3 = {
	custom_effect_tooltip = AUS_DAP_powerplus3
	add_to_variable = {
		var = THIS.DAP_power
		value = 0.03
	}
}
AUS_DAP_power_5 = {
	custom_effect_tooltip = AUS_DAP_powerplus5
	add_to_variable = {
		var = THIS.DAP_power
		value = 0.05
	}
}

AUS_anarchist_power_10 = {
	custom_effect_tooltip = AUS_anarchist_powerplus10
	add_to_variable = {
		var = THIS.anarchist_power
		value = 0.1
	}
}

AUS_unionist_power_10 = {
	custom_effect_tooltip = AUS_unionist_powerplus10
	add_to_variable = {
		var = THIS.unionist_power
		value = 0.1
	}
}

AUS_DAP_power_10 = {
	custom_effect_tooltip = AUS_DAP_powerplus10
	add_to_variable = {
		var = THIS.DAP_power
		value = 0.1
	}
}

AUS_DAP_power_20 = {
	custom_effect_tooltip = AUS_DAP_powerplus20
	add_to_variable = {
		var = THIS.DAP_power
		value = 0.2
	}
}

AUS_socialist_bop_random_gain = {
	random_list = {
		60 = { #Do something
			random_list = {
				30 = {
					AUS_anarchist_power_5 = yes
				}
				30 = {
					AUS_unionist_power_5 = yes
				}
				30 = {
					AUS_DAP_power_5 = yes
				}
			}
		}
		
		30 = { #Do nothing
			
		}
	}
}

AUS_fuck_this_ideology_they_unpopular_now_lmaofuckoff = {
	if = {
		limit = {
			has_government = totalist
		}
		set_country_flag = AUS_totalist_unpopular
	}
	
	if = {
		limit = {
			has_government = syndicalist
		}
		set_country_flag = AUS_syndicalist_unpopular
	}
	
	if = {
		limit = {
			has_government = radical_socialist
		}
		set_country_flag = AUS_radical_socialist_unpopular
	}
	
	if = {
		limit = {
			has_government = social_democrat
		}
		set_country_flag = AUS_social_democrat_unpopular
	}
	
	if = {
		limit = {
			has_government = social_liberal
		}
		set_country_flag = AUS_social_liberal_unpopular
	}
	
	
	if = {
		limit = {
			has_government = market_liberal
		}
		set_country_flag = AUS_market_liberal_unpopular
	}
	
	if = {
		limit = {
			has_government = social_conservative
		}
		set_country_flag = AUS_social_conservative_unpopular
	}
	
	
	if = {
		limit = {
			has_government = authoritarian_democrat
		}
		set_country_flag = AUS_authoritarian_democrat_unpopular
	}
	
	if = {
		limit = {
			has_government = paternal_autocrat
		}
		set_country_flag = AUS_paternal_autocrat_unpopular
	}
	
	if = {
		limit = {
			has_country_flag = AUS_liebenfels_coup
		}
		set_country_flag = AUS_liebenfels_unpopular
	}
}

AUS_karl_up = {
	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_BOTDE_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = radsoc_austromarxism_subtype
	}

	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_BOTDE_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = austromarxism_subtype
	}

	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_BOTDE_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = paneuropeanism_subtype
	}

	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = marlib_agrarianism_subtype
	}

	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_BOTDE_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = christian_democracy_subtype
	}

	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_BOTDE_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = autdem_christian_democracy_subtype
	}

	create_country_leader = {
		name = "Karl I"
		desc = "POLITICS_KARL_BOTDE_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_I.png"
		expire = "1965.1.1"
		ideology = austropopulism_subtype
	}
}

AUS_restore_danubian_federation = {
	every_owned_state = {
		limit = {
			has_state_flag = default_danubian_state
		}
		ROOT = {
			add_state_core = PREV
		}
	}
	every_state = {
		limit = {
			has_state_flag = default_danubian_state
			NOT = {
				is_owned_by = ROOT
			}
		}
		ROOT = {
			add_state_claim = PREV
		}
	}
}

AUS_coalition_value = {
	add_to_variable = {
		var = AUS.coalition_value
		value = 1
	}
	if = {
		limit = {
			check_variable = {
				var = AUS.coalition_value
				value = 3
				compare = greater_than_or_equals
			}
		}
		every_country = {
			limit = {
				OR = {
					tag = HUN
					tag = CRO
					tag = CZE
					tag = GAL
				}
				is_subject = no
				is_in_faction = no
				has_opinion = {
					target = AUS
					value < 65
				}
			}
			country_event = {
				id = bdeausfor.169
				days = 5
				random = 96
			}
		}
	}
}

AUS_event_is_basic = {
	set_variable = {
		var =  global.BOTDE_randomevent_AUS_picker
		value = 1
	}
}

AUS_event_is_mission = {
	set_variable = {
		var =  global.BOTDE_randomevent_AUS_picker
		value = 2
	}
}

AUS_event_is_paramilitary = {
	set_variable = {
		var =  global.BOTDE_randomevent_AUS_picker
		value = 3
	}
}

AUS_event_is_strategyshaker = {
	set_variable = {
		var =  global.BOTDE_randomevent_AUS_picker
		value = 4
	}
}
HSR_setup_civil_war = {
	hidden_effect = {
		start_civil_war = {
			### basics ###
			ideology = totalist
			size = 0.33
			army_ratio = 0.4
			navy_ratio = 0.5

			### states ###
			capital = 43
			states = { 1107 1106 155 784 1111 }		

			### characters ###
			keep_all_characters = yes

			### effects ###
			set_temp_variable = { HUN_civil_war_target = THIS }
		}

		#move all socialists to revolter
		every_unit_leader = {
			limit = { has_unit_leader_flag = HSR_leader }
			set_nationality = var:HUN_civil_war_target
		}		
		
		#setup revolter
		var:HUN_civil_war_target = {
			#set cosmetic tag
			save_global_event_target_as = HUN_soviet_republic
			set_cosmetic_tag = HSR
			
			set_war_support = 0.7
			
			#set leaders and ideology
			set_politics = {
				ruling_party = totalist
				elections_allowed = no
			}
			set_popularities = {
				totalist = 25
				radical_socialist = 11
				syndicalist = 21
				social_democrat = 6
				social_liberal = 0
				market_liberal = 4
				social_conservative = 9
				authoritarian_democrat = 14
				paternal_autocrat = 0
				national_populist = 10
			}		
			load_focus_tree = { tree = HUN_focus keep_completed = yes }
			
			remove_all_ministers = yes
			add_ideas = {
				HUN_Sandor_Garbai_hog_syn
				HUN_Erik_Molnar_for_tot
				HUN_Erno_Gero_eco_tot
				HUN_Matyas_Rakosi_sec_tot
			}
			create_country_leader = {
				name = "Béla Kun"
				desc = "POLITICS_BELA_KUN_DESC"
				picture = "gfx/leaders/HUN/Portrait_HUN_Bela_Kun.png"
				expire = "1965.1.1"
				ideology = authcom_subtype
			}
			
			XXA = {
				every_unit_leader = {
					limit = { has_unit_leader_flag = HSR_leader }
					set_nationality = var:HUN_civil_war_target
				}
			}
			#spawn units
			#HSR_units = yes
		}
		
		set_political_party = { ideology = totalist popularity = 0 }
	}
}

AUS_habsburg_law_switch = {
	create_country_leader = {
		name = "Otto Bauer"
		desc = "POLITICS_BAUER_DESC"
		picture = "gfx/leaders/AUS/AUS_Otto_Bauer.png"
		expire = "1965.1.1"
		ideology = radsoc_austromarxism_subtype
		traits = {
			
		}
	}
	
	create_country_leader = {
		name = "Karl Renner"
		desc = "POLITICS_RENNER_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Karl_Renner.png"
		expire = "1965.1.1"
		ideology = austromarxism_subtype
		traits = {
			
		}
	}
	create_country_leader = {
		name = "Richard von Coudenhove-Kalergi"
		desc = "POLITICS_KALERGI_DESC"
		picture = "gfx/leaders/AUS/AUS_Richard_Kalergi.png"
		expire = "1965.1.1"
		ideology = paneuropeanism_subtype
	}

	create_country_leader = {
		name = "Johannes Schober"
		desc = "POLITICS_SCHOBER_DESC"
		picture = "gfx/leaders/AUS/AUS_Johannes_Schober.png"
		expire = "1965.1.1"
		ideology = marlib_agrarianism_subtype
	}
	
	create_country_leader = {
		name = "Wilhelm Miklas"
		desc = "POLITICS_MIKLAS_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Wilhelm_Miklas_KX.png"
		expire = "1.1.1"
		ideology = social_conservative_subtype
	}
	
	create_country_leader = {
		name = "Wilhelm Miklas"
		desc = "POLITICS_MIKLAS_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Wilhelm_Miklas_KX.png"
		expire = "1.1.1"
		ideology = social_conservative_subtype
	}
	
	create_country_leader = {
		name = "Karl Buresch"
		desc = "POLITICS_BURESCH_DESC"
		picture = "gfx/leaders/AUS/AUS_Karl_Buresch.png"
		expire = "1965.1.1"
		ideology = autdem_christian_democracy_subtype
	}
	
	create_country_leader = {
		name = "Engelbert Dollfuss"
		desc = "POLITICS_DOLLFUSS_DESC"
		picture = "gfx/leaders/AUS/AUS_Engelbert_Dollfuss.png"
		expire = "1965.1.1"
		ideology = austropopulism_subtype
	}
	
	create_country_leader = {
		name = "Jörg Lanz von Liebenfels"
		desc = "POLITICS_LIEBENFELS_DESC"
		picture = "gfx/leaders/AUS/Portrait_AUS_Liebenfels.png"
		expire = "1965.1.1"
		ideology = ariosophy_subtype
	}
	
}
AUS_habsburg_law_available = {
	set_country_flag = AUS_kaiser_flee
	unlock_decision_tooltip = AUS_pass_habsburg_law
}

CONST_generic_peace_post = { #Expansion and some things for post-collapse countries after they are freed
	if = {
		limit = {
			tag = CPU
		}
		add_state_claim = 1319
		add_state_claim = 1314
	}
	if = {
		limit = {
			tag = BAN
		}
		add_state_claim = 45
	}
	if = {
		limit = {
			tag = HNZ
		}
		add_state_claim = 1111
	}
	if = {
		limit = {
			has_war_with = CRO
			owns_state = 1141
			CRO = {
				controls_state = 1141
			}
		}
		CRO = {
			transfer_state = 1141
		}
	}
	if = {
		limit = {
			has_war_with = CRO
			owns_state = 1145
			CRO = {
				controls_state = 1145
			}
		}
		CRO = {
			transfer_state = 1145
		}
	}
	if = {
		limit = {
			has_war_with = CRO
			owns_state = 1099
			CRO = {
				controls_state = 1099
			}
		}
		CRO = {
			transfer_state = 1099
		}
	}
	if = {
		limit = {
			has_war_with = HUN
			owns_state = 1118
			HUN = {
				controls_state = 1118
			}
		}
		HUN = {
			transfer_state = 1118
		}
	}
	if = {
		limit = {
			has_war_with = HUN
			owns_state = 1117
			HUN = {
				controls_state = 1117
			}
		}
		HUN = {
			transfer_state = 1117
		}
	}
	if = {
		limit = {
			has_war_with = HUN
			owns_state = 1112
			HUN = {
				controls_state = 1112
			}
		}
		HUN = {
			transfer_state = 1112
		}
	}
	if = {
		limit = {
			has_war_with = HUN
			owns_state = 76
			HUN = {
				controls_state = 76
			}
		}
		HUN = {
			transfer_state = 76
		}
	}
	if = {
		limit = {
			has_war_with = HUN
			owns_state = 789
			HUN = {
				controls_state = 789
			}
		}
		HUN = {
			transfer_state = 789
		}
	}
}

SKS_drop_bosnia = { #Expansion and some things for post-collapse countries after they are freed
	1141 = {
		create_unit = { 
			division = "name = \"Milicija\" division_template = \"Milicija\" start_experience_factor = 0.25" 
			owner = SKS
			count = 2
			allow_spawning_on_enemy_provs = yes
		}
	}
	1142 = {
		create_unit = { 
			division = "name = \"Milicija\" division_template = \"Milicija\" start_experience_factor = 0.25" 
			owner = SKS
			count = 2
			allow_spawning_on_enemy_provs = yes
		}
	}
}

SZK_collapse_setup = { #Expansion and some things for post-collapse countries after they are freed
	division_template = {
			name = "Székely Hadosztály"
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }
				infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }
				infantry = { x = 2 y = 0 }
				infantry = { x = 2 y = 1 }
				infantry = { x = 2 y = 2 }
			}
			is_locked = no
			support = {
				engineer = { x = 0 y = 0 }
				logistics_company = { x = 0 y = 1 }
				artillery = { x = 0 y = 2 }
			}
		}
	789 = {
		create_unit = { 
			division = "name = \"Székely Hadosztály\" division_template = \"Székely Hadosztály\" start_experience_factor =1" 
			owner = SZK
			count = 2
			allow_spawning_on_enemy_provs = yes
		}
	}
}

wreck_AUS_navy = {
	hidden_effect = {
		random_list = {
			25 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = submarine
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = submarine
						count = 1
					}
				}
			}
			
			25 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = destroyer
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = destroyer
						count = 1
					}
				}
			}
			
			15 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = light_cruiser
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = light_cruiser
						count = 1
					}
				}
			}
			
			15 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = heavy_cruiser
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = heavy_cruiser
						count = 1
					}
				}
			}
			
			13 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = battle_cruiser
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = battle_cruiser
						count = 1
					}
				}
			}
			
			12 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = battleship
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = battleship
						count = 1
					}
				}
			}
			
			5 = {
				modifier = {
					factor = 0
					AUS = {
						has_navy_size = {
							size = 0
							type = carrier
						}
					}
				}
				AUS = {
					destroy_ships = {
						type = carrier
						count = 1
					}
				}
			}
		}
	}
}

CRO_victory_borderwar_gains = {
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_heavy_2
			creator = "CRO"
			version_name = "Boroević Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
}

CRO_defeat_borderwar_gains = {
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_light_2
			creator = "CRO"
			version_name = "Jelačić Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_heavy_2
			creator = "CRO"
			version_name = "Boroević Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
	add_equipment_production = {
		equipment = {
			type = ship_hull_submarine_1
			creator = "CRO"
			version_name = "U-100 Class"
		}
		requested_factories = 1
		progress = 0.75
		amount = 1
	}
}

KRK_setup = {
	if = {
		limit = {
			AUS = {
				OR = {
					has_country_flag = AUS_MINISTERPREZ_DOLLFUSS
					has_government = national_populist
				}
			}
		}
		random_list = {
			40 = {
				set_politics = {
					ruling_party = national_populist
				}
			}
			60 = {
				
			}
		}
	}
	if = {
		limit = {
			has_global_flag = AUS_civil_war
		}
		random_list = {
			37 = {
				set_politics = {
					ruling_party = totalist
				}
			}
			37 = {
				set_politics = {
					ruling_party = syndicalist
				}
			}
			26 = {
				
			}
		}
	}
	if = {
		limit = {
			NOT = {
				has_global_flag = AUS_civil_war
				AUS = {
					has_country_flag = AUS_MINISTERPREZ_DOLLFUSS
				}
			}
		}
		random_list = {
			5 = {
				set_politics = {
					ruling_party = radical_socialist
				}
			}
			15 = {
				set_politics = {
					ruling_party = social_democrat
				}
			}
			16 = {
				set_politics = {
					ruling_party = social_liberal
				}
			}
			16 = {
				set_politics = {
					ruling_party = market_liberal
				}
			}
			16 = {
				set_politics = {
					ruling_party = social_conservative
				}
			}
			16 = {
				set_politics = {
					ruling_party = authoritarian_democrat
				}
			}
			16 = {
				set_politics = {
					ruling_party = paternal_autocrat
				}
			}
		}
	}
	REV_spawn_units = yes
}